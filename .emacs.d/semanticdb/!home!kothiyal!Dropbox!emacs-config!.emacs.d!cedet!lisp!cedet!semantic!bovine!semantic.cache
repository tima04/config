;; Object bovine/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "bovine/"
  :tables
  (list
    (semanticdb-table "f90.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/bovine/f90-by" include nil nil [1359 1392])
            ("semantic/ctxt" include nil nil [1393 1417])
            ("semantic/decorate/mode" include nil nil [1418 1451])
            ("f90" include nil nil [1500 1514])
            ("semantic/dep" include nil nil [1474 1497])
            ("define-lex-regex-analyzer" code nil nil [1540 2355])
            ("define-lex-regex-analyzer" code nil nil [2357 3473])
            ("define-lex-regex-analyzer" code nil nil [3475 4336])
            ("define-lex-regex-analyzer" code nil nil [4338 5022])
            ("define-lex-regex-analyzer" code nil nil [5024 5774])
            ("define-lex-regex-analyzer" code nil nil [5776 6227])
            ("semantic-f90-skip-specs" function nil nil [6229 6719])
            ("define-lex-regex-analyzer" code nil nil [6721 7077])
            ("define-lex-simple-regex-analyzer" code nil nil [7079 7246])
            ("semantic-f90-lexer" function (:lexical-analyzer-flag t) nil [7278 7825])
            ("semantic-f90-expand-tag" function (:arguments ("tag")) nil [7846 10637])
            ("semantic-f90-expand-module" function (:arguments ("tag")) nil [10639 11751])
            ("semantic-f90-parse-contains" function (:arguments ("tag")) nil [11753 12108])
            ("semantic-end-of-command" function
               (:parent "f90-mode"
                :override-function-flag t)
                nil [12146 12347])
            ("semantic-beginning-of-command" function
               (:parent "f90-mode"
                :override-function-flag t)
                nil [12349 12580])
            ("defcustom-mode-local-semantic-dependency-system-include-path" code nil nil [12583 12761])
            ("semantic-get-local-variables" function
               (:parent "f90-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [12857 13248])
            ("semantic-f90-get-local-variables" function (:arguments ("tag")) nil [13250 13684])
            ("semantic-f90-get-type-members" function (:arguments ("tag")) nil [13686 14110])
            ("semantic-ctxt-current-class-list" function
               (:parent "f90-mode"
                :override-function-flag t
                :arguments ("point"))
                nil [14112 14549])
            ("semantic-tag-protection" function
               (:parent "f90-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [14551 14785])
            ("semantic-parse-region" function
               (:parent "f90-mode"
                :override-function-flag t
                :arguments ("start" "end" "&optional" "nonterminal" "depth" "returnonerror"))
                nil [14788 15803])
            ("semantic-analyze-scoped-types" function
               (:parent "f90-mode"
                :override-function-flag t
                :arguments ("pos"))
                nil [15805 16861])
            ("define-semantic-decoration-style" code nil nil [16953 17090])
            ("semantic-tag-f90-boundary-p-default" function (:arguments ("tag")) nil [17092 17343])
            ("defalias" code nil nil [17345 17443])
            ("semantic-tag-components" function
               (:parent "f90-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [17445 18024])
            ("semantic-default-f90-setup" function nil nil [18063 19476])
            ("semantic/f90" package nil nil [19478 19501]))          
      :file "f90.el"
      :pointmax 19669
      :fsize 19668
      :lastmodtime '(21135 21396)
      :unmatched-syntax '((close-paren 1514 . 1515) (symbol 1454 . 1471) (open-paren 1453 . 1454)))
    (semanticdb-table "f90-by.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/lex" include nil nil [1052 1075])
            ("semantic/bovine" include nil nil [1095 1121])
            ("semantic-f90-by--keyword-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-keyword-table (quote (("end" . END) ("subroutine" . SUBROUTINE) ("function" . FUNCTION) ("module" . MODULE) ("use" . USE) ("contains" . CONTAINS) ("interface" . INTERFACE) ("integer" . INT) ("real" . REAL) ("char" . CHAR) ("logical" . LOGICAL) ("complex" . COMPLEX) ("parameter" . PARAMETER) ("allocatable" . ALLOCATABLE) ("dimension" . DIMENSION) ("external" . EXTERNAL) ("intent" . INTENT) ("intrinsic" . INTRINSIC) ("optional" . OPTIONAL) ("pointer" . POINTER) ("save" . SAVE) ("target" . TARGET) ("implicit" . IMPLICIT) ("end" . END) ("call" . CALL) ("type" . TYPE) ("only" . ONLY))) (quote nil)))
                nil [1163 1980])
            ("semantic-f90-by--token-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-type-table (quote (("close-paren" (RPAREN . ")")) ("open-paren" (LPAREN . "(")) ("punctuation" (OR . "\\`[|]\\'") (HAT . "\\`\\^\\'") (PERCENT . "\\`[%]\\'") (TILDE . "\\`[~]\\'") (COMMA . "\\`[,]\\'") (GREATER . "\\`[>]\\'") (LESS . "\\`[<]\\'") (EQUAL . "\\`[=]\\'") (BANG . "\\`[!]\\'") (MINUS . "\\`[-]\\'") (PLUS . "\\`[+]\\'") (DIVIDE . "\\`[/]\\'") (AMPERSAND . "\\`[&]\\'") (STAR . "\\`[*]\\'") (SEMICOLON . "\\`[;]\\'") (COLON . "\\`[:]\\'") (PERIOD . "\\`[.]\\'") (HASH . "\\`[#]\\'") (OPERATORS . "[-+*/%^|&]") (PERIOD . "\\`[.]\\'")))) (quote nil)))
                nil [1982 2766])
            ("semantic-f90-by--parse-table" variable
               (:constant-flag t
                :default-value (\` ((bovine-toplevel (starting_rule)) (bovine-inner-scope (spec-one-part)) (starting_rule (punit)) (punit (PROGRAM symbol semantic-list (\, (semantic-lambda (semantic-tag (nth 1 vals) (quote program))))) (SUBROUTINE symbol semantic-list semantic-list (\, (semantic-lambda (semantic-tag (nth 1 vals) (quote subroutine) :arguments (semantic-parse-region (car (nth 2 vals)) (cdr (nth 2 vals)) (quote funarg) 1))))) (one-or-no-type FUNCTION symbol semantic-list semantic-list (\, (semantic-lambda (semantic-tag (nth 2 vals) (quote function) :arguments (semantic-parse-region (car (nth 3 vals)) (cdr (nth 3 vals)) (quote funarg) 1) :type (car (nth 0 vals)))))) (MODULE symbol semantic-list (\, (semantic-lambda (semantic-tag (nth 1 vals) (quote module)))))) (local-vars (builtin-type punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" var-decl newline spec-part) (builtin-type punctuation "\\`[,]\\'" attributes punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" var-decl newline spec-part)) (spec-part (newline (\, (semantic-lambda))) (spec-one-part newline (\, (semantic-lambda (nth 0 vals))))) (spec-one-part (IMPLICIT symbol (\, (semantic-lambda (semantic-tag (nth 1 vals) (quote implicit))))) (USE symbol opt-only (\, (semantic-lambda (semantic-tag (nth 1 vals) (quote use))))) (TYPE symbol semantic-list (\, (semantic-lambda (semantic-tag (nth 1 vals) (quote type) :kind (quote derived-type))))) (END TYPE symbol (\, (semantic-lambda (list nil)))) (END TYPE (\, (semantic-lambda (list nil)))) (one-type punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" var-decl (\, (semantic-lambda (semantic-tag-new-variable (nth 3 vals) (car (nth 0 vals)) nil)))) (one-type punctuation "\\`[,]\\'" attribute-list punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" var-decl (\, (semantic-lambda (apply (quote semantic-tag-new-variable) (nth 5 vals) (car (nth 0 vals)) nil (nth 2 vals))))) (one-type var-decl (\, (semantic-lambda (semantic-tag-new-variable (nth 1 vals) (car (nth 0 vals)) nil))))) (one-or-no-type (one-type) nil) (one-type (single-type semantic-list (\, (semantic-lambda (nth 0 vals)))) (single-type)) (single-type (derived-type) (builtin-type) (symbol)) (opt-only (punctuation "\\`[,]\\'" ONLY punctuation "\\`[:]\\'" symbol punctuation punctuation symbol (\, (semantic-lambda))) (punctuation "\\`[,]\\'" ONLY punctuation "\\`[:]\\'" symbol (\, (semantic-lambda))) nil) (var-decl (single-variable punctuation "\\`[=]\\'" symbol-or-number punctuation "\\`[,]\\'" var-decl (\, (semantic-lambda (append (nth 0 vals) (nth 4 vals))))) (single-variable punctuation "\\`[,]\\'" var-decl (\, (semantic-lambda (append (nth 0 vals) (nth 2 vals))))) (single-variable punctuation "\\`[=]\\'" symbol) (single-variable)) (single-variable (symbol semantic-list (\, (semantic-lambda (list (nth 0 vals))))) (symbol)) (builtin-type (INT (\, (semantic-lambda (list "integer")))) (REAL (\, (semantic-lambda (list "real")))) (DPREC (\, (semantic-lambda (list "double precision")))) (CHAR (\, (semantic-lambda (list "character")))) (COMPLEX (\, (semantic-lambda (list "complex")))) (LOGICAL (\, (semantic-lambda (list "logical"))))) (derived-type (TYPE semantic-list (\, (semantic-lambda (semantic-parse-region (car (nth 1 vals)) (cdr (nth 1 vals)) (quote dtype) 1))))) (dtype (open-paren "(" (\, (semantic-lambda (list nil)))) (close-paren ")" (\, (semantic-lambda (list nil)))) (symbol (\, (semantic-lambda (semantic-tag (nth 0 vals) (quote type)))))) (other-type (symbol) nil) (attribute-list (single-attribute punctuation "\\`[,]\\'" attribute-list (\, (semantic-lambda (append (nth 0 vals) (nth 2 vals))))) (single-attribute)) (single-attribute (attribute semantic-list (\, (semantic-lambda (list (car (nth 0 vals)) (downcase (buffer-substring-no-properties (1+ (car (nth 1 vals))) (1- (cdr (nth 1 vals))))))))) (attribute (\, (semantic-lambda (list (car (nth 0 vals)) (quote t)))))) (attribute (PARAMETER (\, (semantic-lambda (list (quote :parameter))))) (ALLOCATABLE (\, (semantic-lambda (list (quote :allocatable))))) (DIMENSION (\, (semantic-lambda (list (quote :dimension))))) (EXTERNAL (\, (semantic-lambda (list (quote :external))))) (INTENT (\, (semantic-lambda (list (quote :intent))))) (INTRINSIC (\, (semantic-lambda (list (quote :intrinsic))))) (OPTIONAL (\, (semantic-lambda (list (quote :optional))))) (POINTER (\, (semantic-lambda (list (quote :pointer))))) (SAVE (\, (semantic-lambda (list (quote :save))))) (TARGET (\, (semantic-lambda (list (quote :target)))))) (funarg (open-paren "(" (\, (semantic-lambda (list nil)))) (punctuation "\\`[,]\\'" (\, (semantic-lambda (list nil)))) (close-paren ")" (\, (semantic-lambda (list nil)))) (symbol (\, (semantic-lambda (semantic-tag-new-variable (nth 0 vals) nil nil))))) (symbol-or-number (symbol) (number)))))
                nil [2768 9664])
            ("semantic-f90-by--install-parser" function nil nil [9666 9962])
            ("semantic/bovine/f90-by" package nil nil [10002 10035]))          
      :file "f90-by.el"
      :pointmax 10061
      :fsize 10060
      :lastmodtime '(21135 21627)
      :unmatched-syntax '((close-paren 1121 . 1122) (symbol 1077 . 1094) (open-paren 1076 . 1077)))
    (semanticdb-table "c.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [955 974])
            ("semantic/analyze" include nil nil [975 1002])
            ("semantic/analyze/refs" include nil nil [1003 1035])
            ("semantic/bovine" include nil nil [1036 1062])
            ("semantic/bovine/gcc" include nil nil [1063 1093])
            ("semantic/idle" include nil nil [1094 1118])
            ("semantic/lex-spp" include nil nil [1119 1146])
            ("semantic/bovine/c-by" include nil nil [1147 1178])
            ("semantic/db-find" include nil nil [1179 1206])
            ("hideif" include nil nil [1207 1224])
            ("semantic/find" include nil nil [1247 1271])
            ("declare-function" code nil nil [1274 1345])
            ("declare-function" code nil nil [1346 1407])
            ("declare-function" code nil nil [1408 1467])
            ("declare-function" code nil nil [1468 1546])
            ("declare-function" code nil nil [1547 1597])
            ("declare-function" code nil nil [1598 1646])
            ("cc-mode" include nil nil [1688 1706])
            ("if" code nil nil [1709 2288])
            ("define-child-mode" code nil nil [2300 2384])
            ("define-child-mode" code nil nil [2385 2481])
            ("defcustom-mode-local-semantic-dependency-system-include-path" code nil nil [2506 2691])
            ("semantic-default-c-path" variable nil nil [2693 2934])
            ("semantic-dependency-include-path" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value semantic-default-c-path)
                nil [2936 3066])
            ("if" code nil nil [3186 3265])
            ("semantic-lex-c-preprocessor-symbol-map-builtin" variable (:default-value (quote (("__THROW" . "") ("__const" . "const") ("__restrict" . "") ("__attribute_pure__" . "") ("__attribute_malloc__" . "") ("__nonnull" . "") ("__wur" . "") ("__declspec" (spp-arg-list ("foo") 1 . 2)) ("__attribute__" (spp-arg-list ("foo") 1 . 2)) ("__asm" (spp-arg-list ("foo") 1 . 2))))) nil [3314 3762])
            ("semantic-c-in-reset-preprocessor-table" variable nil nil [3764 3963])
            ("semantic-lex-c-preprocessor-symbol-file" variable nil nil [3965 4013])
            ("semantic-lex-c-preprocessor-symbol-map" variable nil nil [4014 4061])
            ("semantic-c-reset-preprocessor-symbol-map" function nil nil [4063 5804])
            ("add-hook" code nil nil [5884 5958])
            ("semantic-lex-c-preprocessor-symbol-map" variable nil nil [5960 7315])
            ("semantic-lex-c-preprocessor-symbol-file" variable nil nil [7317 7892])
            ("semantic-c-member-of-autocast" variable (:default-value (quote t)) nil [7894 8305])
            ("define-lex-spp-macro-declaration-analyzer" code nil nil [8307 9780])
            ("define-lex-spp-macro-undeclaration-analyzer" code nil nil [9782 10033])
            ("semantic-c-obey-conditional-section-parsing-flag" variable
               (:user-visible-flag t
                :default-value t)
                nil [10065 10329])
            ("semantic-c-skip-conditional-section" function nil nil [10331 11658])
            ("semantic-c-convert-spp-value-to-hideif-value" function (:arguments ("symbol" "macrovalue")) nil [12134 13098])
            ("semantic-c-evaluate-symbol-for-hideif" function
               (:user-visible-flag t
                :arguments ("spp-symbol"))
                nil [13100 14417])
            ("semantic-c-hideif-lookup" function (:arguments ("var")) nil [14668 15093])
            ("semantic-c-hideif-defined" function (:arguments ("var")) nil [15095 15655])
            ("semantic-c-takeover-hideif" variable nil nil [15740 15837])
            ("hif-defined" function (:arguments ("around" "semantic-c" "activate")) nil [15839 16044])
            ("hif-lookup" function (:arguments ("around" "semantic-c" "activate")) nil [16046 16329])
            ("define-lex-regex-analyzer" code nil nil [16464 16679])
            ("semantic-c-do-lex-if" function nil nil [16681 18154])
            ("define-lex-regex-analyzer" code nil nil [18156 18419])
            ("semantic-c-do-lex-ifdef" function nil nil [18421 19604])
            ("define-lex-regex-analyzer" code nil nil [19606 20150])
            ("define-lex-regex-analyzer" code nil nil [20152 20396])
            ("define-lex-spp-include-analyzer" code nil nil [20398 20778])
            ("define-lex-spp-include-analyzer" code nil nil [20780 21151])
            ("define-lex-regex-analyzer" code nil nil [21154 21337])
            ("define-lex-regex-analyzer" code nil nil [21339 22318])
            ("semantic-lex-c-nested-namespace-ignore-second" variable (:default-value t) nil [22320 22851])
            ("define-lex-regex-analyzer" code nil nil [22853 23488])
            ("define-lex-regex-analyzer" code nil nil [23490 23693])
            ("define-lex-regex-analyzer" code nil nil [23695 25444])
            ("define-lex-regex-analyzer" code nil nil [25446 25689])
            ("define-lex-regex-analyzer" code nil nil [25691 26095])
            ("define-lex-regex-analyzer" code nil nil [26097 26455])
            ("semantic-c-lexer" function (:lexical-analyzer-flag t) nil [26458 27639])
            ("define-lex-simple-regex-analyzer" code nil nil [27641 27764])
            ("semantic-cpp-lexer" function (:lexical-analyzer-flag t) nil [27766 28708])
            ("semantic-parse-region" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("start" "end" "&optional" "nonterminal" "depth" "returnonerror"))
                nil [28710 30901])
            ("semantic-c-parse-token-hack-depth" variable nil nil [30903 31021])
            ("semantic-c-parse-lexical-token" function (:arguments ("lexicaltoken" "nonterminal" "depth" "returnonerror")) nil [31023 33612])
            ("semantic-c-debug-mode-init-last-mode" variable nil nil [33614 33707])
            ("semantic-c-debug-mode-init" function
               (:user-visible-flag t
                :arguments ("mm"))
                nil [33709 34210])
            ("semantic-c-debug-mode-init-pch" function nil nil [34212 34780])
            ("semantic-expand-c-tag" function (:arguments ("tag")) nil [34782 36430])
            ("semantic-expand-c-extern-C" function (:arguments ("tag")) nil [36432 36984])
            ("semantic-expand-c-complex-type" function (:arguments ("tag")) nil [36986 38508])
            ("semantic-expand-c-tag-namelist" function (:arguments ("tag")) nil [38510 42302])
            ("semantic-tag-expand-function" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote semantic-expand-c-tag))
                nil [42304 42449])
            ("semantic-c-classname" variable nil nil [42451 42767])
            ("semantic-analyze-split-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("name"))
                nil [42769 42983])
            ("semantic-analyze-tag-references" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "db"))
                nil [42985 44371])
            ("semantic-c-reconstitute-token" function (:arguments ("tokenpart" "declmods" "typedecl")) nil [44373 47588])
            ("semantic-c-reconstitute-template" function (:arguments ("tag" "specifier")) nil [47590 47775])
            ("semantic-c-reconstitute-function-arglist" function (:arguments ("arglist")) nil [47777 48446])
            ("semantic-format-tag-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [48486 48868])
            ("semantic-format-tag-canonical-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [48870 49253])
            ("semantic-format-tag-type" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "color"))
                nil [49255 50297])
            ("semantic-find-tags-by-scope-protection" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("scopeprotection" "parent" "&optional" "table"))
                nil [50299 51163])
            ("semantic-tag-protection" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [51165 52738])
            ("semantic-find-tags-included" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("&optional" "table"))
                nil [52740 53305])
            ("semantic-find-tags-included" function
               (:parent "arduino-mode"
                :override-function-flag t
                :arguments ("&optional" "table"))
                nil [53388 53880])
            ("semantic-tag-components" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [53883 54430])
            ("semantic-c-tag-template" function (:arguments ("tag")) nil [54432 54569])
            ("semantic-c-tag-template-specifier" function (:arguments ("tag")) nil [54571 54738])
            ("semantic-c-template-string-body" function (:arguments ("templatespec")) nil [54740 55097])
            ("semantic-c-template-string" function (:arguments ("token" "parent" "color")) nil [55099 55891])
            ("semantic-format-tag-concise-prototype" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("token" "&optional" "parent" "color"))
                nil [55893 56330])
            ("semantic-format-tag-uml-prototype" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("token" "&optional" "parent" "color"))
                nil [56332 56746])
            ("semantic-tag-abstract-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [56748 57827])
            ("semantic-c-dereference-typedef" function (:arguments ("type" "scope" "type-declaration")) nil [57829 58697])
            ("semantic-c--instantiate-template" function (:arguments ("tag" "def-list" "spec-list")) nil [58699 59272])
            ("semantic-c--template-name-1" function (:arguments ("spec-list")) nil [59274 59638])
            ("semantic-c--template-name" function (:arguments ("type" "spec-list")) nil [59640 59932])
            ("semantic-c-dereference-template" function (:arguments ("type" "scope" "type-declaration")) nil [59934 60850])
            ("semantic-c-dereference-member-of" function (:arguments ("type" "scope" "type-declaration")) nil [60905 61544])
            ("semantic-c-dereference-namespace" function (:arguments ("type" "scope" "type-declaration")) nil [61781 63685])
            ("semantic-c-dereference-namespace-alias" function (:arguments ("type" "namespace")) nil [63687 64938])
            ("semantic-c-check-type-namespace-using" function (:arguments ("type" "namespace")) nil [65023 66969])
            ("semantic-analyze-dereference-metatype" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("type" "scope" "&optional" "type-declaration"))
                nil [66972 68147])
            ("semantic-analyze-type-constants" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("type"))
                nil [68149 68456])
            ("semantic-analyze-unsplit-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("namelist"))
                nil [68458 68635])
            ("semantic-ctxt-scoped-types" function
               (:parent "c++-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [68637 70475])
            ("semantic-ctxt-imported-packages" function
               (:parent "c++-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [70477 71342])
            ("semanticdb-expand-nested-tag" function
               (:parent "c++-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [71344 72237])
            ("semanticdb-find-table-for-include" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("includetag" "&optional" "table"))
                nil [72239 74422])
            ("semantic-get-local-variables" function
               (:parent "c++-mode"
                :override-function-flag t)
                nil [74425 75096])
            ("semantic-idle-summary-current-symbol-info" function
               (:parent "c-mode"
                :override-function-flag t)
                nil [75098 75871])
            ("semantic--tag-similar-names-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag1" "tag2" "blankok"))
                nil [75873 76224])
            ("semantic--tag-similar-types-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag1" "tag2"))
                nil [76226 77208])
            ("semantic--tag-attribute-similar-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("attr" "value1" "value2" "ignorable-attributes"))
                nil [77211 77640])
            ("semantic-orphaned-member-metaparent-type" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value "struct")
                nil [77642 77798])
            ("semantic-symbol->name-assoc-list" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote ((type . "Types") (variable . "Variables") (function . "Functions") (include . "Includes"))))
                nil [77800 78031])
            ("semantic-symbol->name-assoc-list-for-type-parts" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote ((type . "Types") (variable . "Attributes") (function . "Methods") (label . "Labels"))))
                nil [78033 78295])
            ("imenu-create-index-function" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote semantic-create-imenu-index))
                nil [78297 78412])
            ("semantic-type-relation-separator-character" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote ("." "->" "::")))
                nil [78414 78575])
            ("semantic-command-separation-character" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value ";")
                nil [78577 78685])
            ("senator-step-at-tag-classes" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote (function variable)))
                nil [78687 78814])
            ("semantic-tag-similar-ignorable-attributes" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote (:prototype-flag :parent :typemodifiers)))
                nil [78816 79107])
            ("semantic-default-c-setup" function nil nil [79124 79662])
            ("semantic-c-add-preprocessor-symbol" function
               (:user-visible-flag t
                :arguments ("sym" "replacement"))
                nil [79679 80183])
            ("semantic-c-describe-environment" function (:user-visible-flag t) nil [80204 83537])
            ("semantic/bovine/c" package nil nil [83539 83567])
            ("semantic-c-reset-preprocessor-symbol-map" code nil nil [83569 83611]))          
      :file "c.el"
      :pointmax 83775
      :fsize 83774
      :lastmodtime '(21135 21396)
      :unmatched-syntax '((close-paren 1706 . 1707) (symbol 1670 . 1687) (open-paren 1669 . 1670) (close-paren 1271 . 1272) (symbol 1227 . 1244) (open-paren 1226 . 1227)))
    (semanticdb-table "gcc.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/dep" include nil nil [999 1022])
            ("semantic-lex-c-preprocessor-symbol-file" variable nil nil [1024 1072])
            ("semantic-lex-c-preprocessor-symbol-map" variable nil nil [1073 1120])
            ("declare-function" code nil nil [1121 1200])
            ("semantic-gcc-query" function (:arguments ("gcc-cmd" "gcc-options")) nil [1213 2223])
            ("semantic-gcc-get-include-paths" function (:arguments ("lang")) nil [2305 3786])
            ("semantic-cpp-defs" function (:arguments ("str")) nil [3789 4117])
            ("semantic-gcc-fields" function (:arguments ("str")) nil [4119 5273])
            ("semantic-gcc-setup-data" variable nil nil [5275 5612])
            ("semantic-gcc-setup" function (:user-visible-flag t) nil [5629 10036])
            ("semantic/bovine/gcc" package nil nil [10038 10068]))          
      :file "gcc.el"
      :pointmax 10236
      :fsize 10235
      :lastmodtime '(21135 21396)
      :unmatched-syntax nil)
    (semanticdb-table "c-by.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/lex" include nil nil [1059 1082])
            ("semantic/bovine" include nil nil [1102 1128])
            ("declare-function" code nil nil [1148 1216])
            ("declare-function" code nil nil [1217 1288])
            ("declare-function" code nil nil [1289 1349])
            ("semantic-c-by--keyword-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-keyword-table (quote (("extern" . EXTERN) ("static" . STATIC) ("const" . CONST) ("volatile" . VOLATILE) ("register" . REGISTER) ("signed" . SIGNED) ("unsigned" . UNSIGNED) ("inline" . INLINE) ("virtual" . VIRTUAL) ("mutable" . MUTABLE) ("explicit" . EXPLICIT) ("struct" . STRUCT) ("union" . UNION) ("enum" . ENUM) ("typedef" . TYPEDEF) ("class" . CLASS) ("typename" . TYPENAME) ("namespace" . NAMESPACE) ("using" . USING) ("new" . NEW) ("delete" . DELETE) ("template" . TEMPLATE) ("throw" . THROW) ("reentrant" . REENTRANT) ("try" . TRY) ("catch" . CATCH) ("operator" . OPERATOR) ("public" . PUBLIC) ("private" . PRIVATE) ("protected" . PROTECTED) ("friend" . FRIEND) ("if" . IF) ("else" . ELSE) ("do" . DO) ("while" . WHILE) ("for" . FOR) ("switch" . SWITCH) ("case" . CASE) ("default" . DEFAULT) ("return" . RETURN) ("break" . BREAK) ("continue" . CONTINUE) ("sizeof" . SIZEOF) ("void" . VOID) ("char" . CHAR) ("wchar_t" . WCHAR) ("short" . SHORT) ("int" . INT) ("long" . LONG) ("float" . FLOAT) ("double" . DOUBLE) ("bool" . BOOL) ("_P" . UNDERP) ("__P" . UNDERUNDERP))) (quote (("__P" summary "Common macro to eliminate prototype compatibility on some compilers") ("_P" summary "Common macro to eliminate prototype compatibility on some compilers") ("bool" summary "Primitive boolean type") ("double" summary "Primitive floating-point type (double-precision 64-bit IEEE 754)") ("float" summary "Primitive floating-point type (single-precision 32-bit IEEE 754)") ("long" summary "Integral primitive type (-9223372036854775808 to 9223372036854775807)") ("int" summary "Integral Primitive Type: (-2147483648 to 2147483647)") ("short" summary "Integral Primitive Type: (-32768 to 32767)") ("wchar_t" summary "Wide Character Type") ("char" summary "Integral Character Type: (0 to 256)") ("void" summary "Built in typeless type: void") ("sizeof" summary "Compile time macro: sizeof(<type or variable>) // size in bytes") ("continue" summary "Non-local continue within a loop (for, do/while): continue;") ("break" summary "Non-local exit within a loop or switch (for, do/while, switch): break;") ("return" summary "return <value>;") ("default" summary "switch (<variable>) { case <constvalue>: code; ... default: code; }") ("case" summary "switch (<variable>) { case <constvalue>: code; ... default: code; }") ("switch" summary "switch (<variable>) { case <constvalue>: code; ... default: code; }") ("for" summary "for(<init>; <condition>; <increment>) { code }") ("while" summary "do { code } while (<condition>); or while (<condition>) { code };") ("do" summary " do { code } while (<condition>);") ("else" summary "if (<condition>) { code } [ else { code } ]") ("if" summary "if (<condition>) { code } [ else { code } ]") ("friend" summary "friend class <CLASSNAME>") ("catch" summary "try { <body> } catch { <catch code> }") ("try" summary "try { <body> } catch { <catch code> }") ("reentrant" summary "<type> <methoddef> (<method args>) reentrant ...") ("throw" summary "<type> <methoddef> (<method args>) throw (<exception>) ...") ("template" summary "template <class TYPE ...> TYPE_OR_FUNCTION") ("delete" summary "delete <object>;") ("new" summary "new <classname>();") ("using" summary "using <namespace>;") ("namespace" summary "Namespace Declaration: namespace <name> { ... };") ("typename" summary "typename is used to handle a qualified name as a typename;") ("class" summary "Class Declaration: class <name>[:parents] { ... };") ("typedef" summary "Arbitrary Type Declaration: typedef <typedeclaration> <name>;") ("enum" summary "Enumeration Type Declaration: enum [name] { ... };") ("union" summary "Union Type Declaration: union [name] { ... };") ("struct" summary "Structure Type Declaration: struct [name] { ... };") ("explicit" summary "Forbids implicit type conversion: explicit <constructor>") ("mutable" summary "Member Declaration Modifier: mutable <type> <name> ...") ("virtual" summary "Method Modifier: virtual <type> <name>(...) ...") ("inline" summary "Function Modifier: inline <return  type> <name>(...) {...};") ("unsigned" summary "Numeric Type Modifier: unsigned <numeric type> <name> ...") ("signed" summary "Numeric Type Modifier: signed <numeric type> <name> ...") ("register" summary "Declaration Modifier: register <type> <name> ...") ("volatile" summary "Declaration Modifier: volatile <type> <name> ...") ("const" summary "Declaration Modifier: const <type> <name> ...") ("static" summary "Declaration Modifier: static <type> <name> ...") ("extern" summary "Declaration Modifier: extern <type> <name> ...")))))
                nil [1372 6513])
            ("semantic-c-by--token-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-type-table (quote (("semantic-list" (BRACKETS . "\\[\\]") (PARENS . "()") (VOID_BLCK . "^(void)$") (BRACE_BLCK . "^{") (PAREN_BLCK . "^(") (BRACK_BLCK . "\\[.*\\]$")) ("close-paren" (RBRACE . "}") (RPAREN . ")")) ("open-paren" (LBRACE . "{") (LPAREN . "(")) ("symbol" (RESTRICT . "\\<\\(__\\)?restrict\\>")) ("number" (ZERO . "^0$")) ("string" (CPP . "\"C\\+\\+\"") (C . "\"C\"")) ("punctuation" (OR . "\\`[|]\\'") (HAT . "\\`\\^\\'") (MOD . "\\`[%]\\'") (TILDE . "\\`[~]\\'") (COMA . "\\`[,]\\'") (GREATER . "\\`[>]\\'") (LESS . "\\`[<]\\'") (EQUAL . "\\`[=]\\'") (BANG . "\\`[!]\\'") (MINUS . "\\`[-]\\'") (PLUS . "\\`[+]\\'") (DIVIDE . "\\`[/]\\'") (AMPERSAND . "\\`[&]\\'") (STAR . "\\`[*]\\'") (SEMICOLON . "\\`[;]\\'") (COLON . "\\`[:]\\'") (PERIOD . "\\`[.]\\'") (HASH . "\\`[#]\\'")))) (quote nil)))
                nil [6515 7623])
            ("semantic-c-by--parse-table" variable
               (:constant-flag t
                :default-value (\` ((bovine-toplevel (declaration)) (bovine-inner-scope (codeblock)) (declaration (macro) (type) (define) (var-or-fun) (extern-c) (template) (using)) (codeblock (define) (codeblock-var-or-fun) (type) (using)) (extern-c-contents (open-paren (\, (semantic-lambda (list nil)))) (declaration) (close-paren (\, (semantic-lambda (list nil))))) (extern-c (EXTERN string "\"C\"" semantic-list (\, (semantic-lambda (semantic-tag "C" (quote extern) :members (semantic-parse-region (car (nth 2 vals)) (cdr (nth 2 vals)) (quote extern-c-contents) 1))))) (EXTERN string "\"C\\+\\+\"" semantic-list (\, (semantic-lambda (semantic-tag "C" (quote extern) :members (semantic-parse-region (car (nth 2 vals)) (cdr (nth 2 vals)) (quote extern-c-contents) 1))))) (EXTERN string "\"C\"" (\, (semantic-lambda (list nil)))) (EXTERN string "\"C\\+\\+\"" (\, (semantic-lambda (list nil))))) (macro (spp-macro-def (\, (semantic-lambda (semantic-tag-new-variable (nth 0 vals) nil nil :constant-flag t)))) (spp-system-include (\, (semantic-lambda (semantic-tag-new-include (nth 0 vals) t)))) (spp-include (\, (semantic-lambda (semantic-tag-new-include (nth 0 vals) nil))))) (define (spp-macro-def (\, (semantic-lambda (semantic-tag-new-variable (nth 0 vals) nil nil :constant-flag t)))) (spp-macro-undef (\, (semantic-lambda (list nil))))) (unionparts (semantic-list (\, (semantic-lambda (semantic-parse-region (car (nth 0 vals)) (cdr (nth 0 vals)) (quote classsubparts) 1))))) (opt-symbol (symbol) nil) (classsubparts (open-paren "{" (\, (semantic-lambda (list nil)))) (close-paren "}" (\, (semantic-lambda (list nil)))) (class-protection opt-symbol punctuation "\\`[:]\\'" (\, (semantic-lambda (semantic-tag (car (nth 0 vals)) (quote label))))) (var-or-fun) (FRIEND func-decl (\, (semantic-lambda (semantic-tag (car (nth 1 vals)) (quote friend))))) (FRIEND CLASS symbol (\, (semantic-lambda (semantic-tag (nth 2 vals) (quote friend))))) (type) (define) (template) nil) (opt-class-parents (punctuation "\\`[:]\\'" class-parents opt-template-specifier (\, (semantic-lambda (list (nth 1 vals))))) ((\, (semantic-lambda)))) (one-class-parent (opt-class-protection opt-class-declmods namespace-symbol (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) "class" nil nil :protection (car (nth 0 vals)))))) (opt-class-declmods opt-class-protection namespace-symbol (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) "class" nil nil :protection (car (nth 1 vals))))))) (class-parents (one-class-parent punctuation "\\`[,]\\'" class-parents (\, (semantic-lambda (cons (nth 0 vals) (nth 2 vals))))) (one-class-parent (\, (semantic-lambda (list (nth 0 vals)))))) (opt-class-declmods (class-declmods opt-class-declmods (\, (semantic-lambda (list nil)))) nil) (class-declmods (VIRTUAL)) (class-protection (PUBLIC) (PRIVATE) (PROTECTED)) (opt-class-protection (class-protection (\, (semantic-lambda (nth 0 vals)))) ((\, (semantic-lambda (list "unspecified"))))) (namespaceparts (semantic-list (\, (semantic-lambda (semantic-parse-region (car (nth 0 vals)) (cdr (nth 0 vals)) (quote namespacesubparts) 1))))) (namespacesubparts (open-paren "{" (\, (semantic-lambda (list nil)))) (close-paren "}" (\, (semantic-lambda (list nil)))) (type) (var-or-fun) (define) (class-protection punctuation "\\`[:]\\'" (\, (semantic-lambda (semantic-tag (car (nth 0 vals)) (quote label))))) (template) (using) (spp-include (\, (semantic-lambda (semantic-tag (nth 0 vals) (quote include) :inside-ns t)))) nil) (enumparts (semantic-list (\, (semantic-lambda (semantic-parse-region (car (nth 0 vals)) (cdr (nth 0 vals)) (quote enumsubparts) 1))))) (enumsubparts (symbol opt-assign (\, (semantic-lambda (semantic-tag-new-variable (nth 0 vals) "int" (car (nth 1 vals)) :constant-flag t)))) (open-paren "{" (\, (semantic-lambda (list nil)))) (close-paren "}" (\, (semantic-lambda (list nil)))) (punctuation "\\`[,]\\'" (\, (semantic-lambda (list nil))))) (opt-name (symbol) ((\, (semantic-lambda (list ""))))) (typesimple (struct-or-class opt-class opt-name opt-template-specifier opt-class-parents semantic-list (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) (car (nth 0 vals)) (let ((semantic-c-classname (cons (car (nth 2 vals)) (car (nth 0 vals))))) (semantic-parse-region (car (nth 5 vals)) (cdr (nth 5 vals)) (quote classsubparts) 1)) (nth 4 vals) :template-specifier (nth 3 vals) :parent (car (nth 1 vals)))))) (struct-or-class opt-class opt-name opt-template-specifier opt-class-parents (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) (car (nth 0 vals)) nil (nth 4 vals) :template-specifier (nth 3 vals) :prototype t :parent (car (nth 1 vals)))))) (UNION opt-class opt-name unionparts (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) (nth 0 vals) (nth 3 vals) nil :parent (car (nth 1 vals)))))) (ENUM opt-class opt-name enumparts (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) (nth 0 vals) (nth 3 vals) nil :parent (car (nth 1 vals)))))) (TYPEDEF declmods typeformbase cv-declmods typedef-symbol-list (\, (semantic-lambda (semantic-tag-new-type (nth 4 vals) (nth 0 vals) nil (list (nth 2 vals))))))) (typedef-symbol-list (typedefname punctuation "\\`[,]\\'" typedef-symbol-list (\, (semantic-lambda (cons (nth 0 vals) (nth 2 vals))))) (typedefname (\, (semantic-lambda (list (nth 0 vals)))))) (typedefname (opt-stars symbol opt-bits opt-array (\, (semantic-lambda (list (nth 0 vals) (nth 1 vals)))))) (struct-or-class (STRUCT) (CLASS)) (type (typesimple punctuation "\\`[;]\\'" (\, (semantic-lambda (nth 0 vals)))) (NAMESPACE symbol namespaceparts (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) (nth 0 vals) (nth 2 vals) nil)))) (NAMESPACE namespaceparts (\, (semantic-lambda (semantic-tag-new-type "unnamed" (nth 0 vals) (nth 1 vals) nil)))) (NAMESPACE symbol punctuation "\\`[=]\\'" typeformbase punctuation "\\`[;]\\'" (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) (nth 0 vals) (list (semantic-tag-new-type (car (nth 3 vals)) (nth 0 vals) nil nil)) nil :kind (quote alias)))))) (using (USING usingname punctuation "\\`[;]\\'" (\, (semantic-lambda (semantic-tag (car (nth 1 vals)) (quote using) :type (nth 1 vals)))))) (usingname (typeformbase (\, (semantic-lambda (semantic-tag-new-type (car (nth 0 vals)) "class" nil nil :prototype t)))) (NAMESPACE typeformbase (\, (semantic-lambda (semantic-tag-new-type (car (nth 1 vals)) "namespace" nil nil :prototype t))))) (template (TEMPLATE template-specifier opt-friend template-definition (\, (semantic-lambda (semantic-c-reconstitute-template (nth 3 vals) (nth 1 vals)))))) (opt-friend (FRIEND) nil) (opt-template-specifier (template-specifier (\, (semantic-lambda (nth 0 vals)))) ((\, (semantic-lambda)))) (template-specifier (punctuation "\\`[<]\\'" template-specifier-types punctuation "\\`[>]\\'" (\, (semantic-lambda (nth 1 vals))))) (template-specifier-types (template-var template-specifier-type-list (\, (semantic-lambda (cons (nth 0 vals) (nth 1 vals))))) nil) (template-specifier-type-list (punctuation "\\`[,]\\'" template-specifier-types (\, (semantic-lambda (nth 1 vals)))) ((\, (semantic-lambda)))) (template-var (template-type opt-template-equal (\, (semantic-lambda (cons (car (nth 0 vals)) (cdr (nth 0 vals)))))) (string (\, (semantic-lambda (list (nth 0 vals))))) (number (\, (semantic-lambda (list (nth 0 vals))))) (opt-stars opt-ref namespace-symbol (\, (semantic-lambda (nth 2 vals)))) (semantic-list (\, (semantic-lambda (list (nth 0 vals))))) (SIZEOF semantic-list (\, (semantic-lambda (list (nth 1 vals)))))) (opt-template-equal (punctuation "\\`[=]\\'" symbol punctuation "\\`[<]\\'" template-specifier-types punctuation "\\`[>]\\'" (\, (semantic-lambda (list (nth 1 vals))))) (punctuation "\\`[=]\\'" symbol (\, (semantic-lambda (list (nth 1 vals))))) ((\, (semantic-lambda)))) (template-type (CLASS symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) "class" nil nil)))) (STRUCT symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) "struct" nil nil)))) (TYPENAME symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) "class" nil nil)))) (declmods typeformbase cv-declmods opt-stars opt-ref variablearg-opt-name (\, (semantic-lambda (semantic-tag-new-type (car (nth 1 vals)) nil nil nil :constant-flag (if (member "const" (append (nth 0 vals) (nth 2 vals))) t nil) :typemodifiers (delete "const" (append (nth 0 vals) (nth 2 vals))) :reference (car (nth 4 vals)) :pointer (car (nth 3 vals))))))) (template-definition (type (\, (semantic-lambda (nth 0 vals)))) (var-or-fun (\, (semantic-lambda (nth 0 vals))))) (opt-stars (punctuation "\\`[*]\\'" opt-starmod opt-stars (\, (semantic-lambda (list (1+ (car (nth 2 vals))))))) ((\, (semantic-lambda (list 0))))) (opt-starmod (STARMOD opt-starmod (\, (semantic-lambda (cons (car (nth 0 vals)) (nth 1 vals))))) ((\, (semantic-lambda)))) (STARMOD (CONST)) (declmods (DECLMOD declmods (\, (semantic-lambda (cons (car (nth 0 vals)) (nth 1 vals))))) (DECLMOD (\, (semantic-lambda (nth 0 vals)))) ((\, (semantic-lambda)))) (DECLMOD (EXTERN) (STATIC) (CVDECLMOD) (INLINE) (REGISTER) (FRIEND) (TYPENAME) (METADECLMOD) (VIRTUAL)) (metadeclmod (METADECLMOD (\, (semantic-lambda))) ((\, (semantic-lambda)))) (CVDECLMOD (CONST) (VOLATILE)) (cv-declmods (CVDECLMOD cv-declmods (\, (semantic-lambda (cons (car (nth 0 vals)) (nth 1 vals))))) (CVDECLMOD (\, (semantic-lambda (nth 0 vals)))) ((\, (semantic-lambda)))) (METADECLMOD (VIRTUAL) (MUTABLE)) (opt-ref (punctuation "\\`[&]\\'" (\, (semantic-lambda (list 1)))) ((\, (semantic-lambda (list 0))))) (typeformbase (typesimple (\, (semantic-lambda (nth 0 vals)))) (STRUCT symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) (nth 0 vals) nil nil)))) (UNION symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) (nth 0 vals) nil nil)))) (ENUM symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) (nth 0 vals) nil nil)))) (builtintype (\, (semantic-lambda (nth 0 vals)))) (symbol template-specifier (\, (semantic-lambda (semantic-tag-new-type (nth 0 vals) "class" nil nil :template-specifier (nth 1 vals))))) (namespace-symbol-for-typeformbase opt-template-specifier (\, (semantic-lambda (semantic-tag-new-type (car (nth 0 vals)) "class" nil nil :template-specifier (nth 1 vals))))) (symbol (\, (semantic-lambda (list (nth 0 vals)))))) (signedmod (UNSIGNED) (SIGNED)) (builtintype-types (VOID) (CHAR) (WCHAR) (SHORT INT (\, (semantic-lambda (list (concat (nth 0 vals) " " (nth 1 vals)))))) (SHORT) (INT) (LONG INT (\, (semantic-lambda (list (concat (nth 0 vals) " " (nth 1 vals)))))) (FLOAT) (DOUBLE) (BOOL) (LONG DOUBLE (\, (semantic-lambda (list (concat (nth 0 vals) " " (nth 1 vals)))))) (LONG LONG (\, (semantic-lambda (list (concat (nth 0 vals) " " (nth 1 vals)))))) (LONG)) (builtintype (signedmod builtintype-types (\, (semantic-lambda (list (concat (car (nth 0 vals)) " " (car (nth 1 vals))))))) (builtintype-types (\, (semantic-lambda (nth 0 vals)))) (signedmod (\, (semantic-lambda (list (concat (car (nth 0 vals)) " int")))))) (codeblock-var-or-fun (declmods typeformbase declmods opt-ref var-or-func-decl (\, (semantic-lambda (semantic-c-reconstitute-token (nth 4 vals) (nth 0 vals) (nth 1 vals)))))) (var-or-fun (codeblock-var-or-fun (\, (semantic-lambda (nth 0 vals)))) (declmods var-or-func-decl (\, (semantic-lambda (semantic-c-reconstitute-token (nth 1 vals) (nth 0 vals) nil))))) (var-or-func-decl (func-decl (\, (semantic-lambda (nth 0 vals)))) (var-decl (\, (semantic-lambda (nth 0 vals))))) (func-decl (opt-stars opt-class opt-destructor functionname opt-template-specifier opt-under-p arg-list opt-post-fcn-modifiers opt-throw opt-initializers fun-or-proto-end (\, (semantic-lambda (nth 3 vals) (list (quote function) (nth 1 vals) (nth 2 vals) (nth 6 vals) (nth 8 vals) (nth 7 vals)) (nth 0 vals) (nth 10 vals) (list (nth 4 vals)) (nth 9 vals)))) (opt-stars opt-class opt-destructor functionname opt-template-specifier opt-under-p opt-post-fcn-modifiers opt-throw opt-initializers fun-try-end (\, (semantic-lambda (nth 3 vals) (list (quote function) (nth 1 vals) (nth 2 vals) nil (nth 7 vals) (nth 6 vals)) (nth 0 vals) (nth 9 vals) (list (nth 4 vals)) (nth 8 vals))))) (var-decl (varnamelist punctuation "\\`[;]\\'" (\, (semantic-lambda (list (nth 0 vals) (quote variable)))))) (opt-under-p (UNDERP (\, (semantic-lambda (list nil)))) (UNDERUNDERP (\, (semantic-lambda (list nil)))) nil) (opt-initializers (punctuation "\\`[:]\\'" namespace-symbol semantic-list opt-initializers) (punctuation "\\`[,]\\'" namespace-symbol semantic-list opt-initializers) nil) (opt-post-fcn-modifiers (post-fcn-modifiers opt-post-fcn-modifiers (\, (semantic-lambda (cons (nth 0 vals) (nth 1 vals))))) ((\, (semantic-lambda (list nil))))) (post-fcn-modifiers (REENTRANT) (CONST)) (opt-throw (THROW semantic-list (\, (lambda (vals start end) (semantic-bovinate-from-nonterminal (car (nth 1 vals)) (cdr (nth 1 vals)) (quote throw-exception-list))))) nil) (throw-exception-list (namespace-symbol punctuation "\\`[,]\\'" throw-exception-list (\, (semantic-lambda (cons (car (nth 0 vals)) (nth 2 vals))))) (namespace-symbol close-paren ")" (\, (semantic-lambda (nth 0 vals)))) (symbol close-paren ")" (\, (semantic-lambda (list (nth 0 vals))))) (open-paren "(" throw-exception-list (\, (semantic-lambda (nth 1 vals)))) (close-paren ")" (\, (semantic-lambda)))) (opt-bits (punctuation "\\`[:]\\'" number (\, (semantic-lambda (list (nth 1 vals))))) ((\, (semantic-lambda (list nil))))) (opt-array (semantic-list "\\[.*\\]$" opt-array (\, (semantic-lambda (list (cons 1 (car (nth 1 vals))))))) ((\, (semantic-lambda (list nil))))) (opt-assign (punctuation "\\`[=]\\'" expression (\, (semantic-lambda (list (nth 1 vals))))) ((\, (semantic-lambda (list nil))))) (opt-restrict (symbol "\\<\\(__\\)?restrict\\>") nil) (varname (opt-stars opt-restrict namespace-symbol opt-bits opt-array (\, (semantic-lambda (nth 2 vals) (nth 0 vals) (nth 3 vals) (nth 4 vals))))) (variablearg (declmods typeformbase cv-declmods opt-ref variablearg-opt-name opt-assign (\, (semantic-lambda (semantic-tag-new-variable (list (append (nth 4 vals) (nth 5 vals))) (nth 1 vals) nil :constant-flag (if (member "const" (append (nth 0 vals) (nth 2 vals))) t nil) :typemodifiers (delete "const" (append (nth 0 vals) (nth 2 vals))) :reference (car (nth 3 vals))))))) (variablearg-opt-name (varname (\, (semantic-lambda (nth 0 vals)))) (semantic-list arg-list (\, (semantic-lambda (list (car (semantic-bovinate-from-nonterminal (car (nth 0 vals)) (cdr (nth 0 vals)) (quote function-pointer))) (nth 1 vals))))) (opt-stars (\, (semantic-lambda (list "") (nth 0 vals) (list nil nil nil))))) (varname-opt-initializer (semantic-list) (opt-assign) nil) (varnamelist (opt-ref varname varname-opt-initializer punctuation "\\`[,]\\'" varnamelist (\, (semantic-lambda (cons (append (nth 1 vals) (nth 2 vals)) (nth 4 vals))))) (opt-ref varname varname-opt-initializer (\, (semantic-lambda (list (append (nth 1 vals) (nth 2 vals))))))) (namespace-symbol (symbol opt-template-specifier punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" namespace-symbol (\, (semantic-lambda (list (concat (nth 0 vals) "::" (car (nth 4 vals))))))) (symbol opt-template-specifier (\, (semantic-lambda (list (nth 0 vals)))))) (namespace-symbol-for-typeformbase (symbol opt-template-specifier punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" namespace-symbol-for-typeformbase (\, (semantic-lambda (list (concat (nth 0 vals) "::" (car (nth 4 vals))))))) (symbol (\, (semantic-lambda (list (nth 0 vals)))))) (namespace-opt-class (symbol punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" namespace-opt-class (\, (semantic-lambda (list (concat (nth 0 vals) "::" (car (nth 3 vals))))))) (symbol opt-template-specifier punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" (\, (semantic-lambda (list (nth 0 vals)))))) (opt-class (namespace-opt-class (\, (semantic-lambda (nth 0 vals)))) ((\, (semantic-lambda (list nil))))) (opt-destructor (punctuation "\\`[~]\\'" (\, (semantic-lambda (list t)))) ((\, (semantic-lambda (list nil))))) (arg-list (semantic-list "^(" knr-arguments (\, (semantic-lambda (nth 1 vals)))) (semantic-list "^(" (\, (semantic-lambda (semantic-parse-region (car (nth 0 vals)) (cdr (nth 0 vals)) (quote arg-sub-list) 1)))) (semantic-list "^(void)$" (\, (semantic-lambda)))) (knr-varnamelist (varname punctuation "\\`[,]\\'" knr-varnamelist (\, (semantic-lambda (cons (nth 0 vals) (nth 2 vals))))) (varname (\, (semantic-lambda (list (nth 0 vals)))))) (knr-one-variable-decl (declmods typeformbase cv-declmods knr-varnamelist (\, (semantic-lambda (semantic-tag-new-variable (nreverse (nth 3 vals)) (nth 1 vals) nil :constant-flag (if (member "const" (append (nth 2 vals))) t nil) :typemodifiers (delete "const" (nth 2 vals))))))) (knr-arguments (knr-one-variable-decl punctuation "\\`[;]\\'" knr-arguments (\, (semantic-lambda (append (semantic-expand-c-tag (nth 0 vals)) (nth 2 vals))))) (knr-one-variable-decl punctuation "\\`[;]\\'" (\, (semantic-lambda (semantic-expand-c-tag (nth 0 vals)))))) (arg-sub-list (variablearg (\, (semantic-lambda (nth 0 vals)))) (punctuation "\\`[.]\\'" punctuation "\\`[.]\\'" punctuation "\\`[.]\\'" close-paren ")" (\, (semantic-lambda (semantic-tag-new-variable "..." "vararg" nil)))) (punctuation "\\`[,]\\'" (\, (semantic-lambda (list nil)))) (open-paren "(" (\, (semantic-lambda (list nil)))) (close-paren ")" (\, (semantic-lambda (list nil))))) (operatorsym (punctuation "\\`[<]\\'" punctuation "\\`[<]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "<<=")))) (punctuation "\\`[>]\\'" punctuation "\\`[>]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list ">>=")))) (punctuation "\\`[<]\\'" punctuation "\\`[<]\\'" (\, (semantic-lambda (list "<<")))) (punctuation "\\`[>]\\'" punctuation "\\`[>]\\'" (\, (semantic-lambda (list ">>")))) (punctuation "\\`[=]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "==")))) (punctuation "\\`[<]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "<=")))) (punctuation "\\`[>]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list ">=")))) (punctuation "\\`[!]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "!=")))) (punctuation "\\`[+]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "+=")))) (punctuation "\\`[-]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "-=")))) (punctuation "\\`[*]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "*=")))) (punctuation "\\`[/]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "/=")))) (punctuation "\\`[%]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "%=")))) (punctuation "\\`[&]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "&=")))) (punctuation "\\`[|]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "|=")))) (punctuation "\\`[-]\\'" punctuation "\\`[>]\\'" punctuation "\\`[*]\\'" (\, (semantic-lambda (list "->*")))) (punctuation "\\`[-]\\'" punctuation "\\`[>]\\'" (\, (semantic-lambda (list "->")))) (semantic-list "()" (\, (semantic-lambda (list "()")))) (semantic-list "\\[\\]" (\, (semantic-lambda (list "[]")))) (punctuation "\\`[<]\\'") (punctuation "\\`[>]\\'") (punctuation "\\`[*]\\'") (punctuation "\\`[+]\\'" punctuation "\\`[+]\\'" (\, (semantic-lambda (list "++")))) (punctuation "\\`[+]\\'") (punctuation "\\`[-]\\'" punctuation "\\`[-]\\'" (\, (semantic-lambda (list "--")))) (punctuation "\\`[-]\\'") (punctuation "\\`[&]\\'" punctuation "\\`[&]\\'" (\, (semantic-lambda (list "&&")))) (punctuation "\\`[&]\\'") (punctuation "\\`[|]\\'" punctuation "\\`[|]\\'" (\, (semantic-lambda (list "||")))) (punctuation "\\`[|]\\'") (punctuation "\\`[/]\\'") (punctuation "\\`[=]\\'") (punctuation "\\`[!]\\'") (punctuation "\\`[~]\\'") (punctuation "\\`[%]\\'") (punctuation "\\`[,]\\'") (punctuation "\\`\\^\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "^=")))) (punctuation "\\`\\^\\'")) (functionname (OPERATOR operatorsym (\, (semantic-lambda (nth 1 vals)))) (semantic-list (\, (lambda (vals start end) (semantic-bovinate-from-nonterminal (car (nth 0 vals)) (cdr (nth 0 vals)) (quote function-pointer))))) (symbol (\, (semantic-lambda (list (nth 0 vals)))))) (function-pointer (open-paren "(" punctuation "\\`[*]\\'" symbol close-paren ")" (\, (semantic-lambda (list (concat "*" (nth 2 vals)))))) (open-paren "(" symbol close-paren ")" (\, (semantic-lambda (list (nth 1 vals)))))) (fun-or-proto-end (punctuation "\\`[;]\\'" (\, (semantic-lambda (list t)))) (semantic-list (\, (semantic-lambda (list nil)))) (punctuation "\\`[=]\\'" number "^0$" punctuation "\\`[;]\\'" (\, (semantic-lambda (list (quote :pure-virtual-flag))))) (fun-try-end (\, (semantic-lambda (list nil))))) (fun-try-end (TRY opt-initializers semantic-list "^{" fun-try-several-catches (\, (semantic-lambda (list nil))))) (fun-try-several-catches (CATCH semantic-list "^(" semantic-list "^{" fun-try-several-catches (\, (semantic-lambda))) (CATCH semantic-list "^{" fun-try-several-catches (\, (semantic-lambda))) ((\, (semantic-lambda)))) (type-cast (semantic-list (\, (lambda (vals start end) (semantic-bovinate-from-nonterminal (car (nth 0 vals)) (cdr (nth 0 vals)) (quote type-cast-list)))))) (type-cast-list (open-paren typeformbase close-paren)) (brackets-after-symbol (semantic-list "^(") (semantic-list "\\[.*\\]$")) (multi-stage-dereference (namespace-symbol brackets-after-symbol punctuation "\\`[.]\\'" multi-stage-dereference) (namespace-symbol brackets-after-symbol punctuation "\\`[-]\\'" punctuation "\\`[>]\\'" multi-stage-dereference) (namespace-symbol brackets-after-symbol)) (string-seq (string string-seq (\, (semantic-lambda (list (concat (nth 0 vals) (car (nth 1 vals))))))) (string (\, (semantic-lambda (list (nth 0 vals)))))) (expr-start (punctuation "\\`[-]\\'") (punctuation "\\`[+]\\'") (punctuation "\\`[*]\\'") (punctuation "\\`[&]\\'")) (expr-binop (punctuation "\\`[-]\\'") (punctuation "\\`[+]\\'") (punctuation "\\`[*]\\'") (punctuation "\\`[/]\\'") (punctuation "\\`[&]\\'" punctuation "\\`[&]\\'") (punctuation "\\`[&]\\'") (punctuation "\\`[|]\\'" punctuation "\\`[|]\\'") (punctuation "\\`[|]\\'") (punctuation "\\`[%]\\'")) (expression (unaryexpression expr-binop unaryexpression (\, (semantic-lambda (list (identity start) (identity end))))) (unaryexpression (\, (semantic-lambda (list (identity start) (identity end)))))) (unaryexpression (number) (multi-stage-dereference) (NEW multi-stage-dereference) (NEW builtintype-types semantic-list) (symbol) (string-seq) (type-cast expression) (semantic-list expression) (semantic-list) (expr-start expression)))))
                nil [7625 40643])
            ("semantic-c-by--install-parser" function nil nil [40645 40998])
            ("semantic/bovine/c-by" package nil nil [41038 41069]))          
      :file "c-by.el"
      :pointmax 41093
      :fsize 41092
      :lastmodtime '(21135 21616)
      :unmatched-syntax '((close-paren 1128 . 1129) (symbol 1084 . 1101) (open-paren 1083 . 1084)))
    (semanticdb-table "scm.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [922 941])
            ("semantic/bovine" include nil nil [942 968])
            ("semantic/bovine/scm-by" include nil nil [969 1002])
            ("semantic/format" include nil nil [1003 1029])
            ("semantic/dep" include nil nil [1030 1053])
            ("defcustom-mode-local-semantic-dependency-system-include-path" code nil nil [1066 1344])
            ("semantic-format-tag-prototype" function
               (:parent "scheme-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [1346 1762])
            ("semantic-documentation-for-tag" function
               (:parent "scheme-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "nosnarf"))
                nil [1764 2062])
            ("semantic-insert-foreign-tag" function
               (:parent "scheme-mode"
                :override-function-flag t
                :arguments ("tag" "tagfile"))
                nil [2064 2393])
            ("define-lex-regex-analyzer" code nil nil [2436 2781])
            ("semantic-scheme-lexer" function (:lexical-analyzer-flag t) nil [2784 3283])
            ("semantic-default-scheme-setup" function nil nil [3300 3976])
            ("semantic/bovine/scm" package nil nil [3978 4008]))          
      :file "scm.el"
      :pointmax 4176
      :fsize 4175
      :lastmodtime '(21135 21396)
      :unmatched-syntax nil)
    (semanticdb-table "scm-by.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/lex" include nil nil [1063 1086])
            ("semantic/bovine" include nil nil [1106 1132])
            ("semantic-scm-by--keyword-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-keyword-table (quote (("define" . DEFINE) ("define-module" . DEFINE-MODULE) ("load" . LOAD))) (quote (("load" summary "Function: (load \"filename\")") ("define-module" summary "Function: (define-module (name arg1 ...)) ") ("define" summary "Function: (define symbol expression)")))))
                nil [1174 1563])
            ("semantic-scm-by--token-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-type-table (quote (("close-paren" (CLOSEPAREN . ")")) ("open-paren" (OPENPAREN . "(")))) (quote nil)))
                nil [1565 1765])
            ("semantic-scm-by--parse-table" variable
               (:constant-flag t
                :default-value (\` ((bovine-toplevel (scheme)) (scheme (semantic-list (\, (lambda (vals start end) (semantic-bovinate-from-nonterminal (car (nth 0 vals)) (cdr (nth 0 vals)) (quote scheme-list)))))) (scheme-list (open-paren "(" scheme-in-list close-paren ")" (\, (semantic-lambda (nth 1 vals))))) (scheme-in-list (DEFINE symbol expression (\, (semantic-lambda (semantic-tag-new-variable (nth 1 vals) nil (nth 2 vals))))) (DEFINE name-args opt-doc sequence (\, (semantic-lambda (semantic-tag-new-function (car (nth 1 vals)) nil (cdr (nth 1 vals)))))) (DEFINE-MODULE name-args (\, (semantic-lambda (semantic-tag-new-package (nth (length (nth 1 vals)) (nth 1 vals)) nil)))) (LOAD string (\, (semantic-lambda (semantic-tag-new-include (file-name-nondirectory (read (nth 1 vals))) (read (nth 1 vals)))))) (symbol (\, (semantic-lambda (semantic-tag-new-code (nth 0 vals) nil))))) (name-args (semantic-list (\, (lambda (vals start end) (semantic-bovinate-from-nonterminal (car (nth 0 vals)) (cdr (nth 0 vals)) (quote name-arg-expand)))))) (name-arg-expand (open-paren name-arg-expand (\, (semantic-lambda (nth 1 vals)))) (symbol name-arg-expand (\, (semantic-lambda (cons (nth 0 vals) (nth 1 vals))))) ((\, (semantic-lambda)))) (opt-doc (string) nil) (sequence (expression sequence) (expression)) (expression (symbol) (semantic-list) (string) (number)))))
                nil [1767 3835])
            ("semantic-scm-by--install-parser" function nil nil [3837 4133])
            ("semantic/bovine/scm-by" package nil nil [4173 4206]))          
      :file "scm-by.el"
      :pointmax 4232
      :fsize 4231
      :lastmodtime '(21135 21621)
      :unmatched-syntax '((close-paren 1132 . 1133) (symbol 1088 . 1105) (open-paren 1087 . 1088)))
    (semanticdb-table "make.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("make-mode" include nil nil [968 988])
            ("semantic" include nil nil [990 1009])
            ("semantic/bovine" include nil nil [1010 1036])
            ("semantic/bovine/make-by" include nil nil [1037 1071])
            ("semantic/analyze" include nil nil [1072 1099])
            ("semantic/dep" include nil nil [1100 1123])
            ("declare-function" code nil nil [1125 1221])
            ("define-lex-analyzer" code nil nil [1233 1758])
            ("define-lex-regex-analyzer" code nil nil [1760 2153])
            ("define-lex-regex-analyzer" code nil nil [2155 2377])
            ("semantic-make-lexer" function (:lexical-analyzer-flag t) nil [2379 2870])
            ("semantic-make-expand-tag" function (:arguments ("tag")) nil [2872 3450])
            ("semantic-get-local-variables" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [3452 3668])
            ("semantic-ctxt-current-class-list" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [3670 4319])
            ("semantic-format-tag-abbreviate" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [4321 4759])
            ("semantic-function-argument-separator" variable
               (:parent "makefile-mode"
                :override-variable-flag t
                :default-value " ")
                nil [4761 4887])
            ("semantic-format-tag-prototype" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [4889 5458])
            ("semantic-format-tag-concise-prototype" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [5460 5731])
            ("semantic-format-tag-uml-prototype" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [5733 5996])
            ("semantic-analyze-possible-completions" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("context"))
                nil [5998 7016])
            ("defcustom-mode-local-semantic-dependency-system-include-path" code nil nil [7018 7207])
            ("semantic-default-make-setup" function nil nil [7224 8281])
            ("semantic/bovine/make" package nil nil [8283 8314]))          
      :file "make.el"
      :pointmax 8484
      :fsize 8483
      :lastmodtime '(21135 21396)
      :unmatched-syntax nil)
    (semanticdb-table "make-by.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/lex" include nil nil [1065 1088])
            ("semantic/bovine" include nil nil [1108 1134])
            ("semantic-make-by--keyword-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-keyword-table (quote (("if" . IF) ("ifdef" . IFDEF) ("ifndef" . IFNDEF) ("ifeq" . IFEQ) ("ifneq" . IFNEQ) ("else" . ELSE) ("endif" . ENDIF) ("include" . INCLUDE))) (quote (("include" summary "Macro: include filename1 filename2 ...") ("ifneq" summary "Conditional: ifneq (expression) ... else ... endif") ("ifeq" summary "Conditional: ifeq (expression) ... else ... endif") ("ifndef" summary "Conditional: ifndef (expression) ... else ... endif") ("ifdef" summary "Conditional: ifdef (expression) ... else ... endif") ("endif" summary "Conditional: if (expression) ... else ... endif") ("else" summary "Conditional: if (expression) ... else ... endif") ("if" summary "Conditional: if (expression) ... else ... endif")))))
                nil [1176 2053])
            ("semantic-make-by--token-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-type-table (quote (("punctuation" (BACKSLASH . "\\`[\\]\\'") (DOLLAR . "\\`[$]\\'") (EQUAL . "\\`[=]\\'") (PLUS . "\\`[+]\\'") (COLON . "\\`[:]\\'")))) (quote nil)))
                nil [2055 2332])
            ("semantic-make-by--parse-table" variable
               (:constant-flag t
                :default-value (\` ((bovine-toplevel (Makefile)) (Makefile (bol newline (\, (semantic-lambda (list nil)))) (bol variable (\, (semantic-lambda (nth 1 vals)))) (bol rule (\, (semantic-lambda (nth 1 vals)))) (bol conditional (\, (semantic-lambda (nth 1 vals)))) (bol include (\, (semantic-lambda (nth 1 vals)))) (whitespace (\, (semantic-lambda (list nil)))) (newline (\, (semantic-lambda (list nil))))) (variable (symbol opt-whitespace equals opt-whitespace element-list (\, (semantic-lambda (semantic-tag-new-variable (nth 0 vals) nil (nth 4 vals)))))) (rule (targets opt-whitespace colons opt-whitespace element-list commands (\, (semantic-lambda (semantic-tag-new-function (nth 0 vals) nil (nth 4 vals)))))) (targets (target opt-whitespace targets (\, (semantic-lambda (list (car (nth 0 vals)) (car (nth 2 vals)))))) (target (\, (semantic-lambda (list (car (nth 0 vals))))))) (target (sub-target target (\, (semantic-lambda (list (concat (car (nth 0 vals)) (car (nth 2 vals))))))) (sub-target (\, (semantic-lambda (list (car (nth 0 vals))))))) (sub-target (symbol) (string) (varref)) (conditional (IF some-whitespace symbol newline (\, (semantic-lambda (list nil)))) (IFDEF some-whitespace symbol newline (\, (semantic-lambda (list nil)))) (IFNDEF some-whitespace symbol newline (\, (semantic-lambda (list nil)))) (IFEQ some-whitespace expression newline (\, (semantic-lambda (list nil)))) (IFNEQ some-whitespace expression newline (\, (semantic-lambda (list nil)))) (ELSE newline (\, (semantic-lambda (list nil)))) (ENDIF newline (\, (semantic-lambda (list nil))))) (expression (semantic-list)) (include (INCLUDE some-whitespace element-list (\, (semantic-lambda (semantic-tag-new-include (nth 2 vals) nil))))) (equals (punctuation "\\`[:]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda))) (punctuation "\\`[+]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda))) (punctuation "\\`[=]\\'" (\, (semantic-lambda)))) (colons (punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" (\, (semantic-lambda))) (punctuation "\\`[:]\\'" (\, (semantic-lambda)))) (element-list (elements newline (\, (semantic-lambda (nth 0 vals))))) (elements (element some-whitespace elements (\, (semantic-lambda (nth 0 vals) (nth 2 vals)))) (element (\, (semantic-lambda (nth 0 vals)))) nil) (element (sub-element element (\, (semantic-lambda (list (concat (car (nth 0 vals)) (car (nth 1 vals))))))) nil) (sub-element (symbol) (string) (punctuation) (semantic-list (\, (semantic-lambda (list (buffer-substring-no-properties (identity start) (identity end))))))) (varref (punctuation "\\`[$]\\'" semantic-list (\, (semantic-lambda (list (buffer-substring-no-properties (identity start) (identity end))))))) (commands (bol shell-command newline commands (\, (semantic-lambda (list (nth 0 vals)) (nth 1 vals)))) ((\, (semantic-lambda)))) (opt-whitespace (some-whitespace (\, (semantic-lambda (list nil)))) nil) (some-whitespace (whitespace some-whitespace (\, (semantic-lambda (list nil)))) (whitespace (\, (semantic-lambda (list nil))))))))
                nil [2334 7028])
            ("semantic-make-by--install-parser" function nil nil [7030 7330])
            ("semantic/bovine/make-by" package nil nil [7370 7404]))          
      :file "make-by.el"
      :pointmax 7431
      :fsize 7430
      :lastmodtime '(21135 21619)
      :unmatched-syntax '((close-paren 1134 . 1135) (symbol 1090 . 1107) (open-paren 1089 . 1090)))
    (semanticdb-table "el.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [912 931])
            ("semantic/bovine" include nil nil [932 958])
            ("semantic/db-el" include nil nil [959 984])
            ("find-func" include nil nil [985 1005])
            ("semantic/ctxt" include nil nil [1007 1031])
            ("semantic/format" include nil nil [1032 1058])
            ("thingatpt" include nil nil [1059 1079])
            ("semantic-emacs-lisp-lexer" function (:lexical-analyzer-flag t) nil [1106 1600])
            ("semantic--elisp-parse-table" variable (:default-value (\` ((bovine-toplevel (semantic-list (\, (lambda (vals start end) (let ((tag (semantic-elisp-use-read (car vals)))) (cond ((and (listp tag) (semantic-tag-p (car tag))) (nreverse tag)) ((semantic--tag-expanded-p tag) tag) (t (append tag (list start end)))))))))))) nil [1617 2449])
            ("semantic-elisp-desymbolify" function (:arguments ("arglist")) nil [2451 2874])
            ("semantic-elisp-desymbolify-args" function (:arguments ("arglist")) nil [2876 3126])
            ("semantic-elisp-clos-slot-property-string" function (:arguments ("slot" "property")) nil [3128 3483])
            ("semantic-elisp-clos-args-to-semantic" function (:arguments ("partlist")) nil [3485 4438])
            ("semantic-elisp-form-to-doc-string" function (:arguments ("form")) nil [4440 4821])
            ("semantic-elisp-store-documentation-in-tag" variable (:user-visible-flag t) nil [4823 4945])
            ("semantic-elisp-do-doc" function (:arguments ("str")) nil [4947 5139])
            ("semantic-elisp-setup-form-parser" function (:arguments ("parser" "symbols")) nil [5141 5750])
            ("put" code nil nil [5751 5814])
            ("semantic-elisp-reuse-form-parser" function (:arguments ("symbol" "symbols")) nil [5816 6345])
            ("semantic-elisp-use-read" function (:arguments ("sl")) nil [6347 7100])
            ("semantic-elisp-setup-form-parser" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [7123 7362])
            ("eval-and-compile" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [7364 7783])
            ("defun" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [7785 8363])
            ("defvar" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [8365 8895])
            ("defface" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [8897 9358])
            ("defimage" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [9361 9837])
            ("defgroup" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [9840 10189])
            ("autoload" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [10192 10548])
            ("defmethod" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [10550 11221])
            ("defadvice" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [11223 11438])
            ("defclass" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [11440 12025])
            ("defstruct" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [12027 12516])
            ("define-lex" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [12518 12780])
            ("define-mode-overload-implementation" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [12782 13211])
            ("defvar-mode-local" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [13213 13577])
            ("require" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [13579 13895])
            ("provide" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [13897 14189])
            ("semantic-dependency-tag-file" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [14210 15111])
            ("semantic-emacs-lisp-overridable-doc" function (:arguments ("tag")) nil [15132 15594])
            ("semantic-emacs-lisp-obsoleted-doc" function (:arguments ("tag")) nil [15596 16228])
            ("semantic-documentation-for-tag" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "nosnarf"))
                nil [16230 17736])
            ("semantic-tag-include-filename" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [17758 18081])
            ("semantic-insert-foreign-tag" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [18083 18397])
            ("semantic-tag-protection" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [18399 19052])
            ("semantic-tag-static-p" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [19054 19363])
            ("semantic-up-context" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point" "bounds-type"))
                nil [19504 20178])
            ("semantic-ctxt-current-function" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point" "same-as-symbol-return"))
                nil [20181 21422])
            ("semantic-get-local-variables" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [21425 23002])
            ("semantic-end-of-command" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t)
                nil [23004 23247])
            ("semantic-beginning-of-command" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t)
                nil [23249 23546])
            ("semantic-ctxt-current-symbol" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [23548 23825])
            ("semantic-ctxt-current-assignment" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [23828 25210])
            ("semantic-ctxt-current-argument" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [25212 25676])
            ("semantic-ctxt-current-class-list" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [25678 26420])
            ("semantic-format-tag-abbreviate" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [26440 26832])
            ("semantic-format-tag-prototype" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [26834 27648])
            ("semantic-format-tag-concise-prototype" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [27650 27937])
            ("semantic-format-tag-uml-prototype" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [27939 28218])
            ("semantic-ia-insert-tag" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [28239 28669])
            ("semantic-lex-analyzer" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote semantic-emacs-lisp-lexer))
                nil [28705 28791])
            ("semantic--parse-table" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value semantic--elisp-parse-table)
                nil [28793 28880])
            ("semantic-function-argument-separator" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value " ")
                nil [28882 28960])
            ("semantic-function-argument-separation-character" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value " ")
                nil [28962 29051])
            ("semantic-symbol->name-assoc-list" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote ((type . "Types") (variable . "Variables") (function . "Defuns") (include . "Requires") (package . "Provides"))))
                nil [29053 29268])
            ("imenu-create-index-function" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote semantic-create-imenu-index))
                nil [29270 29364])
            ("semantic-stickyfunc-sticky-classes" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote (function type variable)))
                nil [29366 29542])
            ("define-child-mode" code nil nil [29544 29662])
            ("semantic-default-elisp-setup" function nil nil [29679 29872])
            ("semantic/bovine/el" package nil nil [30044 30073]))          
      :file "el.el"
      :pointmax 30239
      :fsize 30238
      :lastmodtime '(21135 21396)
      :unmatched-syntax nil)
    (semanticdb-table "grammar.el"
      :file "grammar.el"
      :fsize 13688
      :lastmodtime '(21135 21396))
    (semanticdb-table "clang.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("inversion" include nil nil [1630 1650])
            ("ede" include nil nil [1651 1665])
            ("ede/proj" include nil nil [1666 1685])
            ("ede/cpp-root" include nil nil [1686 1709])
            ("ede/linux" include nil nil [1710 1730])
            ("semantic/analyze" include nil nil [1731 1758])
            ("semantic/analyze/complete" include nil nil [1759 1795])
            ("mode-local" include nil nil [1818 1839])
            ("semantic-clang-binary" variable (:default-value "/usr/bin/clang") nil [1842 1911])
            ("semantic-clang-arguments" variable (:default-value (quote (""))) nil [1913 1988])
            ("semantic-clang-temp-filename" variable (:default-value "__SEMANTIC_CLANG_TEMPFILE") nil [1990 2093])
            ("semantic-clang-show-errors" variable (:default-value t) nil [2095 2168])
            ("semantic-clang-system-includes" variable nil nil [2170 2213])
            ("semantic-clang-activate" function (:user-visible-flag t) nil [2230 3193])
            ("semantic-clang-deactivate" function (:user-visible-flag t) nil [3195 3943])
            ("semantic-clang-completion-regexp" function (:arguments ("completetext")) nil [3945 4201])
            ("semantic-clang-possible-completions" function (:arguments ("context" "flags")) nil [4203 6186])
            ("semantic-clang-identify" function (:arguments ("str")) nil [6333 6983])
            ("semantic-clang-generate-tag" function (:arguments ("str1" "str2")) nil [6985 7447])
            ("semantic-clang-filter-results" function (:arguments ("results" "desired-type" "desired-class" "prefix" "flags")) nil [7449 8679])
            ("semantic-clang-get-typename-string" function (:arguments ("tag")) nil [8681 8946])
            ("semantic-clang-version-string" function nil nil [8948 9430])
            ("semantic-clang-get-system-includes" function nil nil [9432 10169])
            ("semantic-clang-args-from-project" function nil nil [10171 12198])
            ("semantic/bovine/clang" package nil nil [12200 12232]))          
      :file "clang.el"
      :pointmax 12404
      :fsize 12403
      :lastmodtime '(21135 21396)
      :unmatched-syntax '((close-paren 1839 . 1840) (symbol 1798 . 1815) (open-paren 1797 . 1798))))
  :file "!home!kothiyal!Dropbox!emacs-config!.emacs.d!cedet!lisp!cedet!semantic!bovine!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
