;; Object emacs-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs-lisp/"
  :tables
  (list
    (semanticdb-table "timer.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1280 1293])
            ("timer" type
               (:members ("triggered" "high-seconds" "low-seconds" "usecs" "repeat-delay" "function" "args" "idle-delay")
                :type "struct")
                nil [1296 1562])
            ("timerp" function (:arguments ("object")) nil [1564 1669])
            ("timer--time" function (:arguments ("timer")) nil [1695 1823])
            ("defsetf" code nil nil [1825 2144])
            ("timer-set-time" function (:arguments ("timer" "time" "delta")) nil [2147 2542])
            ("timer-set-idle-time" function (:arguments ("timer" "secs" "repeat")) nil [2544 3076])
            ("timer-next-integral-multiple-of-time" function (:arguments ("time" "secs")) nil [3078 3943])
            ("timer-relative-time" function (:arguments ("time" "secs" "usecs")) nil [3945 4326])
            ("timer--time-less-p" function (:arguments ("t1" "t2")) nil [4328 4470])
            ("timer-inc-time" function (:arguments ("timer" "secs" "usecs")) nil [4472 4758])
            ("timer-set-time-with-usecs" function (:arguments ("timer" "time" "usecs" "delta")) nil [4760 5291])
            ("make-obsolete" code nil nil [5292 5424])
            ("timer-set-function" function (:arguments ("timer" "function" "args")) nil [5426 5685])
            ("timer--activate" function (:arguments ("timer" "triggered-p" "reuse-cell" "idle")) nil [5688 6636])
            ("timer-activate" function (:arguments ("timer" "triggered-p" "reuse-cell")) nil [6638 7154])
            ("timer-activate-when-idle" function (:arguments ("timer" "dont-wait" "reuse-cell")) nil [7156 7751])
            ("defalias" code nil nil [7753 7794])
            ("cancel-timer" function (:arguments ("timer")) nil [7796 8029])
            ("cancel-timer-internal" function (:arguments ("timer")) nil [8031 8453])
            ("cancel-function-timers" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [8455 8993])
            ("timer-event-last" variable nil nil [9042 9100])
            ("timer-event-last-1" variable nil nil [9101 9169])
            ("timer-event-last-2" variable nil nil [9170 9239])
            ("timer-max-repeats" variable
               (:user-visible-flag t
                :default-value 10)
                nil [9241 9580])
            ("timer-until" function (:arguments ("timer" "time")) nil [9582 9838])
            ("timer-event-handler" function (:arguments ("timer")) nil [9840 11628])
            ("timeout-event-p" function (:arguments ("event")) nil [11691 11815])
            ("declare-function" code nil nil [11819 11870])
            ("run-at-time" function
               (:user-visible-flag t
                :arguments ("time" "repeat" "function" "args"))
                nil [11872 14165])
            ("run-with-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [14167 14653])
            ("add-timeout" function (:arguments ("secs" "function" "object" "repeat")) nil [14655 14959])
            ("run-with-idle-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [14961 15995])
            ("with-timeout-timers" variable nil nil [15998 16101])
            ("with-timeout" function (:arguments ("list" "body")) nil [16103 17574])
            ("with-timeout-suspend" function nil nil [17576 18039])
            ("with-timeout-unsuspend" function (:arguments ("timer-spec-list")) nil [18041 18384])
            ("y-or-n-p-with-timeout" function (:arguments ("prompt" "seconds" "default-value")) nil [18386 18626])
            ("timer-duration-words" variable
               (:constant-flag t
                :default-value (list (cons "microsec" 1e-06) (cons "microsecond" 1e-06) (cons "millisec" 0.001) (cons "millisecond" 0.001) (cons "sec" 1) (cons "second" 1) (cons "min" 60) (cons "minute" 60) (cons "hour" (* 60 60)) (cons "day" (* 24 60 60)) (cons "week" (* 7 24 60 60)) (cons "fortnight" (* 14 24 60 60)) (cons "month" (* 30 24 60 60)) (cons "year" (* 365.25 24 60 60))))
                nil [18629 19145])
            ("timer-duration" function (:arguments ("string")) nil [19147 19849])
            ("timer" package nil nil [19852 19868]))          
      :file "timer.el.gz"
      :pointmax 19893
      :fsize 6408
      :lastmodtime '(20400 62402)
      :unmatched-syntax '((close-paren 1293 . 1294) (symbol 1262 . 1279) (open-paren 1261 . 1262)))
    (semanticdb-table "cl.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-optimize-speed" variable (:default-value 1) nil [3808 3836])
            ("cl-optimize-safety" variable (:default-value 1) nil [3837 3866])
            ("custom-print-functions" variable nil nil [3884 4367])
            ("cl-unload-function" function nil nil [4369 4527])
            ("incf" function (:arguments ("place" "x")) nil [4642 4966])
            ("decf" function (:arguments ("place" "x")) nil [4968 5292])
            ("declare-function" code nil nil [5348 5394])
            ("pop" function (:arguments ("place")) nil [5396 5812])
            ("push" function (:arguments ("x" "place")) nil [5814 6187])
            ("pushnew" function (:arguments ("x" "place" "keys")) nil [6189 7130])
            ("cl-set-elt" function (:arguments ("seq" "n" "val")) nil [7132 7226])
            ("cl-set-nthcdr" function (:arguments ("n" "list" "x")) nil [7228 7318])
            ("cl-set-buffer-substring" function (:arguments ("start" "end" "val")) nil [7320 7459])
            ("cl-set-substring" function (:arguments ("str" "start" "end" "val")) nil [7461 7738])
            ("cl-map-extents" function (:arguments ("cl-args")) nil [7896 7969])
            ("defalias" code nil nil [7995 8033])
            ("defalias" code nil nil [8034 8067])
            ("values" function (:arguments ("values")) nil [8264 8437])
            ("values-list" function (:arguments ("list")) nil [8439 8619])
            ("multiple-value-list" function (:arguments ("expression")) nil [8621 8903])
            ("multiple-value-apply" function (:arguments ("function" "expression")) nil [8905 9224])
            ("defalias" code nil nil [9226 9410])
            ("nth-value" function (:arguments ("n" "expression")) nil [9412 9700])
            ("cl-macro-environment" variable nil nil [9715 9744])
            ("cl-old-macroexpand" variable (:default-value (prog1 (symbol-function (quote macroexpand)) (defalias (quote macroexpand) (quote cl-macroexpand)))) nil [9745 9859])
            ("cl-macroexpand" function (:arguments ("cl-macro" "cl-env")) nil [9861 10615])
            ("cl-compiling-file" variable nil nil [10637 10667])
            ("cl-compiling-file" function nil nil [10668 10919])
            ("cl-proclaims-deferred" variable nil nil [10921 10955])
            ("proclaim" function (:arguments ("spec")) nil [10957 11081])
            ("declaim" function (:arguments ("specs")) nil [11083 11311])
            ("cl-random-time" function nil nil [11371 11545])
            ("*gensym-counter*" variable (:default-value (* (logand (cl-random-time) 1023) 100)) nil [11547 11611])
            ("floatp-safe" function (:arguments ("object")) nil [11628 11842])
            ("plusp" function (:arguments ("number")) nil [11844 11917])
            ("minusp" function (:arguments ("number")) nil [11919 11993])
            ("oddp" function (:arguments ("integer")) nil [11995 12077])
            ("evenp" function (:arguments ("integer")) nil [12079 12163])
            ("*random-state*" variable (:default-value (vector (quote cl-random-state-tag) -1 30 (cl-random-time))) nil [12165 12241])
            ("most-positive-float" variable (:constant-flag t) nil [12243 12485])
            ("most-negative-float" variable (:constant-flag t) nil [12487 12655])
            ("least-positive-float" variable (:constant-flag t) nil [12657 12896])
            ("least-negative-float" variable (:constant-flag t) nil [12898 13075])
            ("least-positive-normalized-float" variable (:constant-flag t) nil [13077 13483])
            ("least-negative-normalized-float" variable (:constant-flag t) nil [13485 13673])
            ("float-epsilon" variable (:constant-flag t) nil [13675 13927])
            ("float-negative-epsilon" variable (:constant-flag t) nil [13929 14125])
            ("defalias" code nil nil [14153 14188])
            ("declare-function" code nil nil [14190 14252])
            ("mapcar*" function (:arguments ("cl-func" "cl-x" "cl-rest")) nil [14254 14972])
            ("defalias" code nil nil [14974 14997])
            ("defalias" code nil nil [15020 15042])
            ("defalias" code nil nil [15043 15067])
            ("defalias" code nil nil [15068 15089])
            ("defalias" code nil nil [15090 15112])
            ("third" function (:arguments ("x")) nil [15114 15197])
            ("fourth" function (:arguments ("x")) nil [15199 15274])
            ("fifth" function (:arguments ("x")) nil [15276 15349])
            ("sixth" function (:arguments ("x")) nil [15351 15424])
            ("seventh" function (:arguments ("x")) nil [15426 15503])
            ("eighth" function (:arguments ("x")) nil [15505 15580])
            ("ninth" function (:arguments ("x")) nil [15582 15655])
            ("tenth" function (:arguments ("x")) nil [15657 15730])
            ("caaar" function (:arguments ("x")) nil [15732 15824])
            ("caadr" function (:arguments ("x")) nil [15826 15918])
            ("cadar" function (:arguments ("x")) nil [15920 16012])
            ("caddr" function (:arguments ("x")) nil [16014 16106])
            ("cdaar" function (:arguments ("x")) nil [16108 16200])
            ("cdadr" function (:arguments ("x")) nil [16202 16294])
            ("cddar" function (:arguments ("x")) nil [16296 16388])
            ("cdddr" function (:arguments ("x")) nil [16390 16482])
            ("caaaar" function (:arguments ("x")) nil [16484 16596])
            ("caaadr" function (:arguments ("x")) nil [16598 16710])
            ("caadar" function (:arguments ("x")) nil [16712 16824])
            ("caaddr" function (:arguments ("x")) nil [16826 16938])
            ("cadaar" function (:arguments ("x")) nil [16940 17052])
            ("cadadr" function (:arguments ("x")) nil [17054 17166])
            ("caddar" function (:arguments ("x")) nil [17168 17280])
            ("cadddr" function (:arguments ("x")) nil [17282 17394])
            ("cdaaar" function (:arguments ("x")) nil [17396 17508])
            ("cdaadr" function (:arguments ("x")) nil [17510 17622])
            ("cdadar" function (:arguments ("x")) nil [17624 17736])
            ("cdaddr" function (:arguments ("x")) nil [17738 17850])
            ("cddaar" function (:arguments ("x")) nil [17852 17964])
            ("cddadr" function (:arguments ("x")) nil [17966 18078])
            ("cdddar" function (:arguments ("x")) nil [18080 18192])
            ("cddddr" function (:arguments ("x")) nil [18194 18306])
            ("list*" function (:arguments ("arg" "rest")) nil [18634 19119])
            ("ldiff" function (:arguments ("list" "sublist")) nil [19121 19328])
            ("copy-list" function (:arguments ("list")) nil [19330 19623])
            ("cl-maclisp-member" function (:arguments ("item" "list")) nil [19625 19743])
            ("defalias" code nil nil [19745 19772])
            ("declare-function" code nil nil [19871 19923])
            ("declare-function" code nil nil [19924 19978])
            ("declare-function" code nil nil [19979 20034])
            ("declare-function" code nil nil [20035 20087])
            ("declare-function" code nil nil [20088 20128])
            ("defalias" code nil nil [20130 20158])
            ("defalias" code nil nil [20159 20191])
            ("defalias" code nil nil [20192 20226])
            ("defalias" code nil nil [20227 20255])
            ("defalias" code nil nil [20256 20280])
            ("adjoin" function (:arguments ("cl-item" "cl-list" "cl-keys")) nil [20282 20875])
            ("subst" function (:arguments ("cl-new" "cl-old" "cl-tree" "cl-keys")) nil [20877 21321])
            ("cl-do-subst" function (:arguments ("cl-new" "cl-old" "cl-tree")) nil [21323 21630])
            ("acons" function (:arguments ("key" "value" "alist")) nil [21632 21792])
            ("pairlis" function (:arguments ("keys" "values" "alist")) nil [21794 22105])
            ("dolist" code nil nil [22171 23924])
            ("fmakunbound" code nil nil [24049 24070])
            ("fmakunbound" code nil nil [24071 24093])
            ("fmakunbound" code nil nil [24094 24116])
            ("load" code nil nil [24117 24148])
            ("cl" package nil nil [24219 24232])
            ("cl-hacked-flag" variable nil nil [24282 24309])
            ("cl-hack-byte-compiler" function nil nil [24310 24567])
            ("cl-hack-byte-compiler" code nil nil [24629 24652])
            ("add-hook" code nil nil [24718 24771])
            ("cl" package nil nil [24879 24892])
            ("run-hooks" code nil nil [24894 24919]))          
      :file "cl.el.gz"
      :pointmax 25042
      :fsize 7731
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "cl-macs.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1515 1528])
            ("cl-pop2" function (:arguments ("place")) nil [1530 1652])
            ("put" code nil nil [1653 1699])
            ("cl-optimize-safety" variable nil nil [1701 1728])
            ("cl-optimize-speed" variable nil nil [1729 1755])
            ("cl-old-bc-file-form" variable nil nil [2182 2214])
            ("cl-simple-funcs" variable
               (:constant-flag t
                :default-value (quote (car cdr nth aref elt if and or + - 1+ 1- min max car-safe cdr-safe progn prog1 prog2)))
                nil [2359 2480])
            ("cl-safe-funcs" variable
               (:constant-flag t
                :default-value (quote (* / % length memq list vector vectorp < > <= >= = error)))
                nil [2481 2569])
            ("cl-simple-expr-p" function (:arguments ("x" "size")) nil [2623 3069])
            ("cl-simple-exprs-p" function (:arguments ("xs")) nil [3071 3182])
            ("cl-safe-expr-p" function (:arguments ("x")) nil [3214 3554])
            ("cl-const-expr-p" function (:arguments ("x")) nil [3619 3874])
            ("cl-const-exprs-p" function (:arguments ("xs")) nil [3876 3985])
            ("cl-const-expr-val" function (:arguments ("x")) nil [3987 4078])
            ("cl-expr-access-order" function (:arguments ("x" "v")) nil [4080 4614])
            ("cl-expr-contains" function (:arguments ("x" "y")) nil [4682 4936])
            ("cl-expr-contains-any" function (:arguments ("x" "y")) nil [4938 5037])
            ("cl-expr-depends-p" function (:arguments ("x" "y")) nil [5098 5227])
            ("*gensym-counter*" variable nil nil [5243 5268])
            ("gensym" function (:arguments ("prefix")) nil [5284 5632])
            ("gentemp" function (:arguments ("prefix")) nil [5649 6005])
            ("defun*" function (:arguments ("name" "args" "body")) nil [6047 6439])
            ("defmacro*" function (:arguments ("name" "args" "body")) nil [6456 6854])
            ("function*" function (:arguments ("func")) nil [6871 7275])
            ("cl-transform-function-property" function (:arguments ("func" "prop" "form")) nil [7277 7531])
            ("lambda-list-keywords" variable
               (:constant-flag t
                :default-value (quote (&optional &rest &key &allow-other-keys &aux &whole &body &environment)))
                nil [7533 7639])
            ("cl-macro-environment" variable nil nil [7641 7912])
            ("bind-block" variable nil nil [7913 7932])
            ("bind-defs" variable nil nil [7933 7951])
            ("bind-enquote" variable nil nil [7952 7973])
            ("bind-inits" variable nil nil [7974 7993])
            ("bind-lets" variable nil nil [7994 8012])
            ("bind-forms" variable nil nil [8013 8032])
            ("declare-function" code nil nil [8034 8105])
            ("cl--make-usage-var" function (:arguments ("x")) nil [8107 8303])
            ("cl--make-usage-args" function (:arguments ("arglist")) nil [8305 9344])
            ("cl-transform-lambda" function (:arguments ("form" "bind-block")) nil [9346 11827])
            ("cl-do-arglist" function (:arguments ("args" "expr" "num")) nil [11829 16757])
            ("cl-arglist-args" function (:arguments ("args")) nil [16759 17212])
            ("destructuring-bind" function (:arguments ("args" "expr" "body")) nil [17229 17562])
            ("cl-not-toplevel" variable nil nil [17592 17620])
            ("eval-when" function (:arguments ("when" "body")) nil [17637 18476])
            ("cl-compile-time-too" function (:arguments ("form")) nil [18478 18991])
            ("load-time-value" function (:arguments ("form" "read-only")) nil [19008 19805])
            ("case" function (:arguments ("expr" "clauses")) nil [19860 21127])
            ("ecase" function (:arguments ("expr" "clauses")) nil [21144 21355])
            ("typecase" function (:arguments ("expr" "clauses")) nil [21372 22298])
            ("etypecase" function (:arguments ("expr" "clauses")) nil [22315 22535])
            ("block" function (:arguments ("name" "body")) nil [22576 23289])
            ("return" function (:arguments ("result")) nil [23306 23462])
            ("return-from" function (:arguments ("name" "result")) nil [23479 23937])
            ("loop-args" variable nil nil [23963 23981])
            ("loop-accum-var" variable nil nil [23982 24005])
            ("loop-accum-vars" variable nil nil [24006 24030])
            ("loop-bindings" variable nil nil [24031 24053])
            ("loop-body" variable nil nil [24054 24072])
            ("loop-destr-temps" variable nil nil [24073 24098])
            ("loop-finally" variable nil nil [24099 24120])
            ("loop-finish-flag" variable nil nil [24121 24146])
            ("loop-first-flag" variable nil nil [24147 24171])
            ("loop-initially" variable nil nil [24172 24195])
            ("loop-map-form" variable nil nil [24196 24218])
            ("loop-name" variable nil nil [24219 24237])
            ("loop-result" variable nil nil [24238 24258])
            ("loop-result-explicit" variable nil nil [24259 24288])
            ("loop-result-var" variable nil nil [24289 24313])
            ("loop-steps" variable nil nil [24314 24333])
            ("loop-symbol-macs" variable nil nil [24334 24359])
            ("loop" function (:arguments ("loop-args")) nil [24376 27239])
            ("cl-parse-loop-clause" function nil nil [27241 43403])
            ("cl-loop-let" function (:arguments ("specs" "body" "par")) nil [43405 44612])
            ("cl-loop-handle-accum" function (:arguments ("def" "func")) nil [44614 45109])
            ("cl-loop-build-ands" function (:arguments ("clauses")) nil [45111 45839])
            ("do" function (:arguments ("steps" "endtest" "body")) nil [45898 46075])
            ("do*" function (:arguments ("steps" "endtest" "body")) nil [46092 46269])
            ("cl-expand-do-loop" function (:arguments ("steps" "endtest" "body" "star")) nil [46271 46899])
            ("dolist" function (:arguments ("spec" "body")) nil [46916 48260])
            ("dotimes" function (:arguments ("spec" "body")) nil [48277 49573])
            ("do-symbols" function (:arguments ("spec" "body")) nil [49590 50038])
            ("do-all-symbols" function (:arguments ("spec" "body")) nil [50055 50159])
            ("psetq" function (:arguments ("args")) nil [50195 50451])
            ("progv" function (:arguments ("symbols" "values" "body")) nil [50502 51113])
            ("flet" function (:arguments ("bindings" "body")) nil [51208 52538])
            ("labels" function (:arguments ("bindings" "body")) nil [52555 53534])
            ("macrolet" function (:arguments ("bindings" "body")) nil [53640 54199])
            ("symbol-macrolet" function (:arguments ("bindings" "body")) nil [54216 54794])
            ("cl-closure-vars" variable nil nil [54796 54824])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [54840 56206])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [56223 56726])
            ("cl-defun-expander" function (:arguments ("func" "rest")) nil [56728 56888])
            ("multiple-value-bind" function (:arguments ("vars" "form" "body")) nil [56928 57586])
            ("multiple-value-setq" function (:arguments ("vars" "form")) nil [57603 58447])
            ("locally" function (:arguments ("body")) nil [58484 58534])
            ("the" function (:arguments ("type" "form")) nil [58550 58581])
            ("cl-proclaim-history" variable (:default-value t) nil [58583 58613])
            ("cl-declare-stack" variable (:default-value t) nil [58640 58667])
            ("cl-do-proclaim" function (:arguments ("spec" "hist")) nil [58698 60198])
            ("cl-proclaims-deferred" variable nil nil [60262 60292])
            ("let" code nil nil [60293 60410])
            ("declare" function (:arguments ("specs")) nil [60427 60811])
            ("define-setf-method" function (:arguments ("func" "args" "body")) nil [60858 61651])
            ("defalias" code nil nil [61652 61704])
            ("defsetf" function (:arguments ("func" "arg1" "args")) nil [61721 64751])
            ("defsetf" code nil nil [64801 64820])
            ("defsetf" code nil nil [64821 64841])
            ("defsetf" code nil nil [64842 64862])
            ("defsetf" code nil nil [64863 64920])
            ("defsetf" code nil nil [64921 64978])
            ("defsetf" code nil nil [64979 65036])
            ("defsetf" code nil nil [65037 65094])
            ("defsetf" code nil nil [65095 65223])
            ("defsetf" code nil nil [65224 65241])
            ("defsetf" code nil nil [65242 65304])
            ("defsetf" code nil nil [65305 65374])
            ("defsetf" code nil nil [65375 65442])
            ("defsetf" code nil nil [65443 65559])
            ("defsetf" code nil nil [65560 65590])
            ("defsetf" code nil nil [65591 65622])
            ("defsetf" code nil nil [65623 65649])
            ("defsetf" code nil nil [65720 65742])
            ("defsetf" code nil nil [65743 65806])
            ("defsetf" code nil nil [65807 65870])
            ("defsetf" code nil nil [65871 65936])
            ("defsetf" code nil nil [65937 66004])
            ("defsetf" code nil nil [66005 66072])
            ("defsetf" code nil nil [66073 66142])
            ("defsetf" code nil nil [66143 66211])
            ("defsetf" code nil nil [66212 66279])
            ("defsetf" code nil nil [66280 66347])
            ("defsetf" code nil nil [66348 66369])
            ("defsetf" code nil nil [66412 66462])
            ("defsetf" code nil nil [66463 66583])
            ("defsetf" code nil nil [66584 66621])
            ("defsetf" code nil nil [66622 66709])
            ("defsetf" code nil nil [66710 66760])
            ("defsetf" code nil nil [66761 66796])
            ("defsetf" code nil nil [66797 66840])
            ("defsetf" code nil nil [66841 66882])
            ("defsetf" code nil nil [66883 66928])
            ("defsetf" code nil nil [66929 67026])
            ("defsetf" code nil nil [67027 67070])
            ("defsetf" code nil nil [67071 67136])
            ("defsetf" code nil nil [67137 67190])
            ("defsetf" code nil nil [67191 67226])
            ("defsetf" code nil nil [67227 67263])
            ("defsetf" code nil nil [67264 67343])
            ("defsetf" code nil nil [67344 67439])
            ("defsetf" code nil nil [67440 67507])
            ("defsetf" code nil nil [67508 67587])
            ("defsetf" code nil nil [67588 67671])
            ("defsetf" code nil nil [67672 67709])
            ("defsetf" code nil nil [67710 67752])
            ("defsetf" code nil nil [67753 67805])
            ("defsetf" code nil nil [67806 67854])
            ("defsetf" code nil nil [67855 67895])
            ("defsetf" code nil nil [67896 67943])
            ("defsetf" code nil nil [67944 67995])
            ("defsetf" code nil nil [67996 68021])
            ("defsetf" code nil nil [68022 68057])
            ("defsetf" code nil nil [68058 68101])
            ("defsetf" code nil nil [68102 68143])
            ("defsetf" code nil nil [68144 68185])
            ("defsetf" code nil nil [68186 68211])
            ("defsetf" code nil nil [68212 68244])
            ("defsetf" code nil nil [68245 68283])
            ("defsetf" code nil nil [68284 68321])
            ("defsetf" code nil nil [68322 68450])
            ("defsetf" code nil nil [68451 68484])
            ("defsetf" code nil nil [68485 68596])
            ("defsetf" code nil nil [68597 68708])
            ("defsetf" code nil nil [68709 68734])
            ("defsetf" code nil nil [68735 68769])
            ("defsetf" code nil nil [68770 68866])
            ("defsetf" code nil nil [68867 68963])
            ("defsetf" code nil nil [68964 69007])
            ("defsetf" code nil nil [69008 69051])
            ("defsetf" code nil nil [69052 69099])
            ("defsetf" code nil nil [69100 69133])
            ("defsetf" code nil nil [69134 69246])
            ("defsetf" code nil nil [69247 69290])
            ("defsetf" code nil nil [69291 69332])
            ("defsetf" code nil nil [69333 69372])
            ("defsetf" code nil nil [69373 69412])
            ("defsetf" code nil nil [69413 69450])
            ("defsetf" code nil nil [69451 69504])
            ("defsetf" code nil nil [69505 69544])
            ("defsetf" code nil nil [69545 69602])
            ("defsetf" code nil nil [69603 69646])
            ("defsetf" code nil nil [69647 69704])
            ("defsetf" code nil nil [69705 69758])
            ("defsetf" code nil nil [69759 69871])
            ("defsetf" code nil nil [69872 69915])
            ("defsetf" code nil nil [69916 69963])
            ("defsetf" code nil nil [69964 70003])
            ("defsetf" code nil nil [70004 70043])
            ("defsetf" code nil nil [70044 70156])
            ("defsetf" code nil nil [70157 70220])
            ("defsetf" code nil nil [70221 70264])
            ("define-setf-method" code nil nil [70528 71034])
            ("define-setf-method" code nil nil [71263 71783])
            ("cl-setf-make-apply" function (:arguments ("form" "func" "temps")) nil [71785 72095])
            ("define-setf-method" code nil nil [72097 72565])
            ("define-setf-method" code nil nil [72567 73137])
            ("define-setf-method" code nil nil [73139 73748])
            ("get-setf-method" function (:arguments ("place" "env")) nil [73806 75110])
            ("cl-setf-do-modify" function (:arguments ("place" "opt-expr")) nil [75112 75844])
            ("cl-setf-do-store" function (:arguments ("spec" "val")) nil [75846 76138])
            ("cl-setf-simple-store-p" function (:arguments ("sym" "form")) nil [76140 76397])
            ("setf" function (:arguments ("args")) nil [76446 77188])
            ("psetf" function (:arguments ("args")) nil [77205 78046])
            ("cl-do-pop" function (:arguments ("place")) nil [78063 78464])
            ("remf" function (:arguments ("place" "tag")) nil [78481 79274])
            ("shiftf" function (:arguments ("place" "args")) nil [79291 79790])
            ("rotatef" function (:arguments ("args")) nil [79807 80778])
            ("letf" function (:arguments ("bindings" "body")) nil [80795 82884])
            ("letf*" function (:arguments ("bindings" "body")) nil [82901 83664])
            ("callf" function (:arguments ("func" "place" "args")) nil [83681 84175])
            ("callf2" function (:arguments ("func" "arg1" "place" "args")) nil [84192 84930])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [84947 85497])
            ("defstruct" function (:arguments ("struct" "descs")) nil [85532 94471])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [94488 95167])
            ("deftype" function (:arguments ("name" "arglist" "body")) nil [95212 95504])
            ("cl-make-type-test" function (:arguments ("val" "type")) nil [95506 97079])
            ("typep" function (:arguments ("object" "type")) nil [97096 97278])
            ("check-type" function (:arguments ("form" "type" "string")) nil [97295 97923])
            ("assert" function (:arguments ("form" "show-args" "string" "args")) nil [97940 98783])
            ("define-compiler-macro" function (:arguments ("func" "args" "body")) nil [98822 100468])
            ("compiler-macroexpand" function (:arguments ("form")) nil [100485 100922])
            ("cl-byte-compile-compiler-macro" function (:arguments ("form")) nil [100924 101093])
            ("cl-active-block-names" variable nil nil [101136 101170])
            ("define-compiler-macro" code nil nil [101172 101754])
            ("define-compiler-macro" code nil nil [101756 101944])
            ("defsubst*" function (:arguments ("name" "args" "body")) nil [101961 103196])
            ("cl-defsubst-expand" function (:arguments ("argns" "body" "simple" "whole" "unsafe" "argvs")) nil [103198 104377])
            ("put" code nil nil [104583 104611])
            ("define-compiler-macro" code nil nil [104612 105249])
            ("define-compiler-macro" code nil nil [105251 105578])
            ("define-compiler-macro" code nil nil [105580 106011])
            ("define-compiler-macro" code nil nil [106013 106240])
            ("define-compiler-macro" code nil nil [106242 106447])
            ("define-compiler-macro" code nil nil [106449 106591])
            ("define-compiler-macro" code nil nil [106593 106942])
            ("mapc" code nil nil [106945 107917])
            ("proclaim" code nil nil [107947 108059])
            ("mapc" code nil nil [108099 108288])
            ("mapc" code nil nil [108338 108478])
            ("run-hooks" code nil nil [108481 108511]))          
      :file "cl-macs.el.gz"
      :pointmax 108684
      :fsize 28012
      :lastmodtime '(20420 42151)
      :unmatched-syntax '((semantic-list 1862 . 2158)))
    (semanticdb-table "easymenu.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1127 1140])
            ("easy-menu-precalculate-equivalent-keybindings" variable nil nil [1143 1664])
            ("make-obsolete-variable" code nil nil [1665 1748])
            ("easy-menu-intern" function (:arguments ("s")) nil [1750 1813])
            ("easy-menu-define" function (:arguments ("symbol" "maps" "doc" "menu")) nil [1830 5429])
            ("easy-menu-binding" function (:arguments ("menu" "item-name")) nil [5431 6193])
            ("easy-menu-do-define" function (:arguments ("symbol" "maps" "doc" "menu")) nil [6210 7155])
            ("easy-menu-filter-return" function (:arguments ("menu" "name")) nil [7157 7943])
            ("easy-menu-avoid-duplicate-keys" variable (:default-value t) nil [7945 8199])
            ("easy-menu-create-menu" function (:arguments ("menu-name" "menu-items")) nil [8216 10167])
            ("easy-menu-button-prefix" variable (:default-value (quote ((radio . :radio) (toggle . :toggle)))) nil [10193 10266])
            ("easy-menu-converted-items-table" variable (:default-value (make-hash-table :test (quote equal))) nil [10268 10339])
            ("easy-menu-convert-item" function (:arguments ("item")) nil [10341 11779])
            ("easy-menu-convert-item-1" function (:arguments ("item")) nil [11781 16147])
            ("easy-menu-define-key" function (:arguments ("menu" "key" "item" "before")) nil [16149 17898])
            ("easy-menu-name-match" function (:arguments ("name" "item")) nil [17900 18496])
            ("easy-menu-always-true-p" function (:arguments ("x")) nil [18498 18671])
            ("easy-menu-item-count" variable nil nil [18673 18704])
            ("easy-menu-make-symbol" function (:arguments ("callback" "noexp")) nil [18706 19335])
            ("easy-menu-change" function (:arguments ("path" "name" "items" "before" "map")) nil [19352 20289])
            ("defalias" code nil nil [20462 20689])
            ("easy-menu-add" function (:arguments ("menu" "map")) nil [20691 21065])
            ("add-submenu" function (:arguments ("menu-path" "submenu" "before" "in-menu")) nil [21067 21465])
            ("easy-menu-add-item" function (:arguments ("map" "path" "item" "before")) nil [21467 23359])
            ("easy-menu-item-present-p" function (:arguments ("map" "path" "name")) nil [23361 23667])
            ("easy-menu-remove-item" function (:arguments ("map" "path" "name")) nil [23669 24055])
            ("easy-menu-return-item" function (:arguments ("menu" "name")) nil [24057 25669])
            ("easy-menu-lookup-name" function (:arguments ("map" "name")) nil [25671 26464])
            ("easy-menu-get-map" function (:arguments ("map" "path" "to-modify")) nil [26466 28030])
            ("easymenu" package nil nil [28032 28051]))          
      :file "easymenu.el.gz"
      :pointmax 28079
      :fsize 9068
      :lastmodtime '(20352 65510)
      :unmatched-syntax '((close-paren 1140 . 1141) (symbol 1109 . 1126) (open-paren 1108 . 1109)))
    (semanticdb-table "advice.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("advice-preload" package nil nil [76673 76698])
            ("advice-preload" include (:directory "advice.el") nil [76739 76776])
            ("advice" customgroup (:user-visible-flag t) nil [76836 76996])
            ("ad-version" variable
               (:constant-flag t
                :default-value "2.14")
                nil [76998 77026])
            ("ad-redefinition-action" variable (:default-value (quote warn)) nil [77043 77809])
            ("ad-default-compilation-action" variable (:default-value (quote maybe)) nil [77826 78494])
            ("ad-substitute-tree" function (:arguments ("sUbTrEe-TeSt" "fUnCtIoN" "tReE")) nil [78670 79538])
            ("ad-copy-tree" function (:arguments ("tree")) nil [79590 79769])
            ("ad-dolist" function (:arguments ("varform" "body")) nil [79771 81109])
            ("ad-do-return" function (:arguments ("value")) nil [81111 81172])
            ("if" code nil nil [81174 81260])
            ("ad-save-real-definition" function (:arguments ("function")) nil [81578 82269])
            ("ad-save-real-definitions" function nil nil [82271 82607])
            ("ad-save-real-definitions" code nil nil [82609 82635])
            ("ad-advised-functions" variable nil nil [83291 83324])
            ("ad-pushnew-advised-function" function (:arguments ("function")) nil [83326 83613])
            ("ad-pop-advised-function" function (:arguments ("function")) nil [83615 83830])
            ("ad-do-advised-functions" function (:arguments ("varform" "body")) nil [83832 84275])
            ("if" code nil nil [84277 84391])
            ("ad-get-advice-info" function (:arguments ("function")) nil [84393 84463])
            ("ad-get-advice-info-macro" function (:arguments ("function")) nil [84465 84546])
            ("ad-set-advice-info" function (:arguments ("function" "advice-info")) nil [84548 84648])
            ("ad-copy-advice-info" function (:arguments ("function")) nil [84650 84741])
            ("ad-is-advised" function (:arguments ("function")) nil [84743 84944])
            ("ad-initialize-advice-info" function (:arguments ("function")) nil [84946 85182])
            ("ad-get-advice-info-field" function (:arguments ("function" "field")) nil [85184 85357])
            ("ad-set-advice-info-field" function (:arguments ("function" "field" "value")) nil [85359 85854])
            ("ad-is-active" function (:arguments ("function")) nil [85916 86050])
            ("ad-make-advice" function (:arguments ("name" "protect" "enable" "definition")) nil [86192 86553])
            ("ad-advice-name" function (:arguments ("advice")) nil [86653 86708])
            ("ad-advice-protected" function (:arguments ("advice")) nil [86709 86771])
            ("ad-advice-enabled" function (:arguments ("advice")) nil [86772 86832])
            ("ad-advice-definition" function (:arguments ("advice")) nil [86833 86896])
            ("ad-advice-set-enabled" function (:arguments ("advice" "flag")) nil [86898 86976])
            ("ad-class-p" function (:arguments ("thing")) nil [86978 87037])
            ("ad-name-p" function (:arguments ("thing")) nil [87038 87093])
            ("ad-position-p" function (:arguments ("thing")) nil [87094 87179])
            ("ad-advice-classes" variable (:default-value (quote (before around after activation deactivation))) nil [87280 87353])
            ("ad-has-enabled-advice" function (:arguments ("function" "class")) nil [87355 87587])
            ("ad-has-redefining-advice" function (:arguments ("function")) nil [87589 87949])
            ("ad-has-any-advice" function (:arguments ("function")) nil [87951 88210])
            ("ad-get-enabled-advices" function (:arguments ("function" "class")) nil [88212 88514])
            ("ad-activate-internal" function (:arguments ("function" "compile")) nil [89810 89948])
            ("ad-activate-internal-off" function (:arguments ("function" "compile")) nil [89987 90129])
            ("ad-activate-on-top-level" variable (:default-value t) nil [90199 90234])
            ("ad-with-auto-activation-disabled" function (:arguments ("body")) nil [90236 90345])
            ("ad-safe-fset" function (:arguments ("symbol" "definition")) nil [90347 90536])
            ("ad-make-origname" function (:arguments ("function")) nil [91066 91199])
            ("ad-get-orig-definition" function (:arguments ("function")) nil [91201 91377])
            ("ad-set-orig-definition" function (:arguments ("function" "definition")) nil [91379 91515])
            ("ad-clear-orig-definition" function (:arguments ("function")) nil [91517 91627])
            ("declare-function" code nil nil [91701 91752])
            ("ad-read-advised-function" function (:arguments ("prompt" "predicate" "default")) nil [91754 93451])
            ("ad-advice-class-completion-table" variable (:default-value (mapcar (lambda (class) (list (symbol-name class))) ad-advice-classes)) nil [93453 93570])
            ("ad-read-advice-class" function (:arguments ("function" "prompt" "default")) nil [93572 94272])
            ("ad-read-advice-name" function (:arguments ("function" "class" "prompt")) nil [94274 95007])
            ("ad-read-advice-specification" function (:arguments ("prompt")) nil [95009 95415])
            ("ad-last-regexp" variable nil nil [95454 95480])
            ("ad-read-regexp" function (:arguments ("prompt")) nil [95482 95823])
            ("ad-find-advice" function (:arguments ("function" "class" "name")) nil [95953 96118])
            ("ad-advice-position" function (:arguments ("function" "class" "name")) nil [96120 96434])
            ("ad-find-some-advice" function (:arguments ("function" "class" "name")) nil [96436 97192])
            ("ad-enable-advice-internal" function (:arguments ("function" "class" "name" "flag")) nil [97194 98143])
            ("ad-enable-advice" function
               (:user-visible-flag t
                :arguments ("function" "class" "name"))
                nil [98160 98579])
            ("ad-disable-advice" function
               (:user-visible-flag t
                :arguments ("function" "class" "name"))
                nil [98596 99021])
            ("ad-enable-regexp-internal" function (:arguments ("regexp" "class" "flag")) nil [99023 99505])
            ("ad-enable-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [99507 99925])
            ("ad-disable-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [99927 100350])
            ("ad-remove-advice" function
               (:user-visible-flag t
                :arguments ("function" "class" "name"))
                nil [100352 101009])
            ("ad-add-advice" function (:arguments ("function" "advice" "class" "position")) nil [101026 103101])
            ("ad-macrofy" function (:arguments ("definition")) nil [103215 103344])
            ("ad-lambdafy" function (:arguments ("definition")) nil [103346 103468])
            ("ad-special-form-p" function (:arguments ("definition")) nil [103470 103748])
            ("ad-subr-p" function (:arguments ("definition")) nil [103750 103849])
            ("ad-macro-p" function (:arguments ("definition")) nil [103851 103963])
            ("ad-lambda-p" function (:arguments ("definition")) nil [103965 104091])
            ("ad-advice-p" function (:arguments ("definition")) nil [104153 104277])
            ("if" code nil nil [104374 104517])
            ("ad-compiled-p" function (:arguments ("definition")) nil [104519 104753])
            ("ad-compiled-code" function (:arguments ("compiled-definition")) nil [104755 104968])
            ("ad-lambda-expression" function (:arguments ("definition")) nil [104970 105242])
            ("ad-arglist" function (:arguments ("definition" "name")) nil [105244 105615])
            ("ad-docstring" function (:arguments ("definition")) nil [105617 105926])
            ("ad-interactive-form" function (:arguments ("definition")) nil [105928 106187])
            ("ad-body-forms" function (:arguments ("definition")) nil [106189 106485])
            ("ad-make-advised-definition-docstring" function (:arguments ("function")) nil [106487 106923])
            ("ad-advised-definition-p" function (:arguments ("definition")) nil [106925 107268])
            ("ad-definition-type" function (:arguments ("definition")) nil [107270 107635])
            ("ad-has-proper-definition" function (:arguments ("function")) nil [107637 107919])
            ("ad-real-definition" function (:arguments ("function")) nil [108049 108333])
            ("ad-real-orig-definition" function (:arguments ("function")) nil [108335 108557])
            ("ad-is-compilable" function (:arguments ("function")) nil [108559 108864])
            ("ad-compile-function" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [108866 109755])
            ("ad-prognify" function (:arguments ("forms")) nil [109757 109856])
            ("ad-parse-arglist" function (:arguments ("arglist")) nil [109925 110587])
            ("ad-retrieve-args-form" function (:arguments ("arglist")) nil [110589 111492])
            ("ad-arg-binding-field" function (:arguments ("binding" "field")) nil [111494 111667])
            ("ad-list-access" function (:arguments ("position" "list")) nil [111669 111807])
            ("ad-element-access" function (:arguments ("position" "list")) nil [111809 111961])
            ("ad-access-argument" function (:arguments ("arglist" "index")) nil [111963 112513])
            ("ad-get-argument" function (:arguments ("arglist" "index")) nil [112515 112849])
            ("ad-set-argument" function (:arguments ("arglist" "index" "value-form")) nil [112851 113442])
            ("ad-get-arguments" function (:arguments ("arglist" "index")) nil [113444 114067])
            ("ad-set-arguments" function (:arguments ("arglist" "index" "values-form")) nil [114069 115849])
            ("ad-insert-argument-access-forms" function (:arguments ("definition" "arglist")) nil [115851 116759])
            ("ad-map-arglists" function (:arguments ("source-arglist" "target-arglist")) nil [117193 119148])
            ("ad-make-mapped-call" function (:arguments ("source-arglist" "target-arglist" "target-function")) nil [119150 119539])
            ("ad-make-single-advice-docstring" function (:arguments ("advice" "class" "style")) nil [120156 120780])
            ("help-fns" include nil nil [120782 120801])
            ("ad-make-advised-docstring" function (:arguments ("function" "style")) nil [120857 122391])
            ("ad-make-plain-docstring" function (:arguments ("function")) nil [122393 122481])
            ("ad-make-freeze-docstring" function (:arguments ("function")) nil [122482 122572])
            ("ad-advised-arglist" function (:arguments ("function")) nil [122695 123118])
            ("ad-advised-interactive-form" function (:arguments ("function")) nil [123120 123593])
            ("ad-make-advised-definition" function (:arguments ("function")) nil [123660 126826])
            ("ad-assemble-advised-definition" function (:arguments ("type" "args" "docstring" "interactive" "orig" "befores" "arounds" "afters")) nil [126828 130060])
            ("ad-make-hook-form" function (:arguments ("function" "hook-name")) nil [130115 130456])
            ("ad-get-cache-definition" function (:arguments ("function")) nil [133768 133866])
            ("ad-get-cache-id" function (:arguments ("function")) nil [133868 133958])
            ("ad-set-cache" function (:arguments ("function" "definition" "id")) nil [133960 134082])
            ("ad-clear-cache" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [134084 134414])
            ("ad-make-cache-id" function (:arguments ("function")) nil [134416 135342])
            ("ad-get-cache-class-id" function (:arguments ("function" "class")) nil [135344 135616])
            ("ad-verify-cache-class-id" function (:arguments ("cache-class-id" "advices")) nil [135618 135890])
            ("ad-cache-id-verification-code" function (:arguments ("function")) nil [136288 137400])
            ("ad-verify-cache-id" function (:arguments ("function")) nil [137402 137569])
            ("ad-preactivate-advice" function (:arguments ("function" "advice" "class" "position")) nil [138894 139826])
            ("ad-make-freeze-definition" function (:arguments ("function" "advice" "class" "position")) nil [141041 143865])
            ("ad-should-compile" function (:arguments ("function" "compile")) nil [143953 144721])
            ("ad-activate-advised-definition" function (:arguments ("function" "compile")) nil [144723 145875])
            ("ad-handle-definition" function (:arguments ("function")) nil [145877 147836])
            ("ad-activate" function
               (:user-visible-flag t
                :arguments ("function" "compile"))
                nil [147931 149884])
            ("defalias" code nil nil [149886 149925])
            ("ad-deactivate" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [149927 150822])
            ("ad-update" function
               (:user-visible-flag t
                :arguments ("function" "compile"))
                nil [150824 151180])
            ("ad-unadvise" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [151182 151611])
            ("ad-recover" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [151613 152372])
            ("ad-activate-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "compile"))
                nil [152374 152905])
            ("ad-deactivate-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [152907 153329])
            ("ad-update-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "compile"))
                nil [153331 153856])
            ("ad-activate-all" function
               (:user-visible-flag t
                :arguments ("compile"))
                nil [153858 154111])
            ("ad-deactivate-all" function (:user-visible-flag t) nil [154113 154273])
            ("ad-update-all" function
               (:user-visible-flag t
                :arguments ("compile"))
                nil [154275 154513])
            ("ad-unadvise-all" function (:user-visible-flag t) nil [154515 154669])
            ("ad-recover-all" function (:user-visible-flag t) nil [154671 155116])
            ("ad-defadvice-flags" variable (:default-value (quote (("protect") ("disable") ("activate") ("compile") ("preactivate") ("freeze")))) nil [155166 155278])
            ("defadvice" function (:arguments ("function" "args" "body")) nil [155295 160354])
            ("ad-with-originals" function (:arguments ("functions" "body")) nil [160384 162036])
            ("if" code nil nil [162038 162140])
            ("ad-start-advice" function (:user-visible-flag t) nil [162482 162723])
            ("ad-stop-advice" function (:user-visible-flag t) nil [162725 163042])
            ("ad-recover-normality" function (:user-visible-flag t) nil [163044 163407])
            ("ad-start-advice" code nil nil [163409 163426])
            ("advice" package nil nil [163428 163445]))          
      :file "advice.el.gz"
      :pointmax 163471
      :fsize 43187
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "byte-run.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macro-declaration-function" function (:arguments ("macro" "decl")) nil [1275 2202])
            ("setq" code nil nil [2205 2266])
            ("fset" code nil nil [2373 2394])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [3461 3862])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [3864 3942])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "when")) nil [3944 4313])
            ("make-obsolete" function
               (:user-visible-flag t
                :arguments ("obsolete-name" "current-name" "when"))
                nil [4315 5039])
            ("set-advertised-calling-convention" code nil nil [5040 5189])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [5191 5825])
            ("set-advertised-calling-convention" code nil nil [5826 6013])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [6015 6660])
            ("set-advertised-calling-convention" code nil nil [6661 6842])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [6844 8357])
            ("set-advertised-calling-convention" code nil nil [8358 8545])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [8875 9261])
            ("dont-compile" function (:arguments ("body")) nil [9263 9550])
            ("eval-when-compile" function (:arguments ("body")) nil [9793 10218])
            ("eval-and-compile" function (:arguments ("body")) nil [10220 10416])
            ("put" code nil nil [10418 10465])
            ("with-no-warnings" function (:arguments ("body")) nil [10466 10651]))          
      :file "byte-run.el.gz"
      :pointmax 11972
      :fsize 4189
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "assoc.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1040 1053])
            ("asort" function (:arguments ("alist-symbol" "key")) nil [1056 1498])
            ("aelement" function (:arguments ("key" "value")) nil [1501 1711])
            ("aheadsym" function (:arguments ("alist")) nil [1714 1806])
            ("anot-head-p" function (:arguments ("alist" "key")) nil [1809 2215])
            ("aput" function (:arguments ("alist-symbol" "key" "value")) nil [2218 3153])
            ("adelete" function (:arguments ("alist-symbol" "key")) nil [3156 3537])
            ("aget" function (:arguments ("alist" "key" "keynil-p")) nil [3540 4181])
            ("amake" function (:arguments ("alist-symbol" "keylist" "valuelist")) nil [4184 5103])
            ("assoc" package nil nil [5105 5121]))          
      :file "assoc.el.gz"
      :pointmax 5146
      :fsize 1882
      :lastmodtime '(20400 62402)
      :unmatched-syntax '((close-paren 1053 . 1054) (symbol 1022 . 1039) (open-paren 1021 . 1022))))
  :file "!usr!local!share!emacs!24.1!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
