;; Object core/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "core/"
  :tables
  (list
    (semanticdb-table "frame.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
DataFrame
---------
An efficient 2D container for potentially mixed-type time series or other
labeled data series.

Similar to its R counterpart, data.frame, except providing automatic data
alignment and a host of useful data manipulation methods having to do with the
labeling information
\"\"\"" code nil nil [1 298])
            ("__future__" include nil nil [299 330])
            ("functools" include nil nil [404 420])
            ("collections" include nil nil [421 439])
            ("itertools" include nil nil [440 456])
            ("sys" include nil nil [457 467])
            ("types" include nil nil [468 480])
            ("warnings" include nil nil [481 496])
            ("numpy" include nil nil [498 525])
            ("numpy" include nil nil [526 544])
            ("numpy.ma" include nil nil [545 566])
            ("" code nil nil [599 1016])
            ("pandas.core.generic" include nil nil [1017 1070])
            ("pandas.core.index" include nil nil [1071 1133])
            ("" code nil nil [1167 1301])
            ("" code nil nil [1336 1488])
            ("pandas.core.series" include nil nil [1489 1526])
            ("pandas.core.categorical" include nil nil [1527 1574])
            ("pandas.computation.expressions" include nil nil [1575 1627])
            ("pandas.computation.eval" include nil nil [1628 1677])
            ("numpy" include nil nil [1678 1719])
            ("" code nil nil [1745 1851])
            ("pandas" include nil nil [1852 1877])
            ("pandas.sparse.array" include nil nil [1878 1921])
            ("pandas.util.decorators" include nil nil [1922 2013])
            ("pandas.tseries.period" include nil nil [2015 2060])
            ("pandas.tseries.index" include nil nil [2061 2107])
            ("pandas.core.algorithms" include nil nil [2109 2147])
            ("pandas.core.common" include nil nil [2148 2180])
            ("pandas.core.format" include nil nil [2181 2213])
            ("pandas.core.nanops" include nil nil [2214 2249])
            ("pandas.core.ops" include nil nil [2250 2279])
            ("pandas.lib" include nil nil [2281 2305])
            ("pandas.algos" include nil nil [2306 2335])
            ("pandas.core.config" include nil nil [2337 2378])
            ("_shared_doc_kwargs" variable nil nil [2475 2614])
            ("_numeric_only_doc" variable nil nil [2616 2794])
            ("_merge_doc" variable nil nil [2796 5269])
            ("DataFrame" type
               (:documentation " Two-dimensional size-mutable, potentially heterogeneous tabular data
    structure with labeled axes (rows and columns). Arithmetic operations
    align on both row and column labels. Can be thought of as a dict-like
    container for Series objects. The primary pandas data structure

    Parameters
    ----------
    data : numpy ndarray (structured or homogeneous), dict, or DataFrame
        Dict can contain Series, arrays, constants, or list-like objects
    index : Index or array-like
        Index to use for resulting frame. Will default to np.arange(n) if
        no indexing information part of input data and no index provided
    columns : Index or array-like
        Column labels to use for resulting frame. Will default to
        np.arange(n) if no column labels are provided
    dtype : dtype, default None
        Data type to force, otherwise infer
    copy : boolean, default False
        Copy data from inputs. Only affects DataFrame / 2d ndarray input

    Examples
    --------
    >>> d = {'col1': ts1, 'col2': ts2}
    >>> df = DataFrame(data=d, index=index)
    >>> df2 = DataFrame(np.random.randn(10, 5))
    >>> df3 = DataFrame(np.random.randn(10, 5),
    ...                 columns=['a', 'b', 'c', 'd', 'e'])

    See also
    --------
    DataFrame.from_records : constructor from tuples, also record arrays
    DataFrame.from_dict : from dicts of Series, arrays, or dicts
    DataFrame.from_csv : from CSV files
    DataFrame.from_items : from sequence of (key, value) pairs
    pandas.read_csv, pandas.read_table, pandas.read_clipboard
    "
                :superclasses ("NDFrame")
                :members 
                  ( ("_auto_consolidate" variable nil (reparse-symbol indented_block_body) [6983 7007])
                    ("_constructor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7044 7048]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7013 7076])
                    ("_constructor_sliced" variable nil (reparse-symbol indented_block_body) [7081 7109])
                    ("_constructor_expanddim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7156 7160]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7115 7228])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [7339 7378])
                            ("if" code nil (reparse-symbol indented_block_body) [7386 7456])
                            ("if" code nil (reparse-symbol indented_block_body) [7465 7527])
                            ("if" code nil (reparse-symbol indented_block_body) [7536 11483])
                            ("NDFrame" code nil (reparse-symbol indented_block_body) [11492 11534]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7246 7250])
                            ("data" variable nil (reparse-symbol function_parameters) [7252 7256])
                            ("index" variable nil (reparse-symbol function_parameters) [7263 7268])
                            ("columns" variable nil (reparse-symbol function_parameters) [7275 7282])
                            ("dtype" variable nil (reparse-symbol function_parameters) [7289 7294])
                            ("copy" variable nil (reparse-symbol function_parameters) [7318 7322]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7233 11535])
                    ("_init_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11555 11559])
                            ("data" variable nil (reparse-symbol function_parameters) [11561 11565])
                            ("index" variable nil (reparse-symbol function_parameters) [11567 11572])
                            ("columns" variable nil (reparse-symbol function_parameters) [11574 11581])
                            ("dtype" variable nil (reparse-symbol function_parameters) [11583 11588]))                          
                        :documentation "
        Segregate Series based on type and coerce into matrices.
        Needs to handle a lot of exceptional cases.
        ")
                        (reparse-symbol indented_block_body) [11540 13176])
                    ("_init_ndarray" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13199 13203])
                            ("values" variable nil (reparse-symbol function_parameters) [13205 13211])
                            ("index" variable nil (reparse-symbol function_parameters) [13213 13218])
                            ("columns" variable nil (reparse-symbol function_parameters) [13220 13227])
                            ("dtype" variable nil (reparse-symbol function_parameters) [13229 13234])
                            ("copy" variable nil (reparse-symbol function_parameters) [13263 13267]))                          )
                        (reparse-symbol indented_block_body) [13181 15802])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15830 15834]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15807 15879])
                    ("shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15908 15912]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15884 15967])
                    ("_repr_fits_vertical_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15997 16001]))                          
                        :documentation "
        Check length against max_rows.
        ")
                        (reparse-symbol indented_block_body) [15972 16154])
                    ("_repr_fits_horizontal_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16186 16190])
                            ("ignore_width" variable nil (reparse-symbol function_parameters) [16192 16204]))                          
                        :documentation "
        Check if full repr fits in horizontal boundaries imposed by the display
        options width and max_columns. In case off non-interactive session, no
        boundaries apply.

        ignore_width is here so ipnb+HTML output can behave the way
        users expect. display.max_columns remains in effect.
        GH3541, GH3573
        ")
                        (reparse-symbol indented_block_body) [16159 18049])
                    ("_info_repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18069 18073]))                          
                        :documentation "True if the repr should show the info view.")
                        (reparse-symbol indented_block_body) [18054 18332])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18353 18357]))                          
                        :documentation "
        Return a string representation for a particular DataFrame

        Invoked by unicode(df) in py2 only. Yields a Unicode String in both
        py2/py3.
        ")
                        (reparse-symbol indented_block_body) [18337 19149])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19170 19174]))                          
                        :documentation "
        Return a html representation for a particular DataFrame.
        Mainly for IPython notebook.
        ")
                        (reparse-symbol indented_block_body) [19154 20579])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20598 20602]))                          
                        :documentation "Iterator over (column, series) pairs")
                        (reparse-symbol indented_block_body) [20584 20909])
                    ("iterrows" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20927 20931]))                          
                        :documentation "
        Iterate over rows of DataFrame as (index, Series) pairs.

        Notes
        -----

        * ``iterrows`` does **not** preserve dtypes across the rows (dtypes
          are preserved across columns for DataFrames). For example,

            >>> df = DataFrame([[1, 1.0]], columns=['x', 'y'])
            >>> row = next(df.iterrows())[1]
            >>> print(row['x'].dtype)
            float64
            >>> print(df['x'].dtype)
            int64

        Returns
        -------
        it : generator
            A generator that iterates over the rows of the frame.
        ")
                        (reparse-symbol indented_block_body) [20914 21695])
                    ("itertuples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21715 21719])
                            ("index" variable nil (reparse-symbol function_parameters) [21721 21726]))                          
                        :documentation "
        Iterate over rows of DataFrame as tuples, with index value
        as first element of the tuple
        ")
                        (reparse-symbol indented_block_body) [21700 22115])
                    ("if" code nil (reparse-symbol indented_block_body) [22120 22181])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22198 22202]))                          
                        :documentation "Returns length of info axis, but here we use the index ")
                        (reparse-symbol indented_block_body) [22186 22306])
                    ("dot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22319 22323])
                            ("other" variable nil (reparse-symbol function_parameters) [22325 22330]))                          
                        :documentation "
        Matrix multiplication with DataFrame or Series objects

        Parameters
        ----------
        other : DataFrame or Series

        Returns
        -------
        dot_product : DataFrame or Series
        ")
                        (reparse-symbol indented_block_body) [22311 24008])
                    ("from_dict" function
                       (:documentation "
        Construct DataFrame from dict of array-like or dicts

        Parameters
        ----------
        data : dict
            {field : array-like} or {field : dict}
        orient : {'columns', 'index'}, default 'columns'
            The \"orientation\" of the data. If the keys of the passed dict
            should be the columns of the resulting DataFrame, pass 'columns'
            (default). Otherwise if the keys should be rows, pass 'index'.
        dtype : dtype, default None
            Data type to force, otherwise infer

        Returns
        -------
        DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [24164 24167])
                            ("data" variable nil (reparse-symbol function_parameters) [24169 24173])
                            ("orient" variable nil (reparse-symbol function_parameters) [24175 24181])
                            ("dtype" variable nil (reparse-symbol function_parameters) [24193 24198]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24133 25406])
                    ("" code nil (reparse-symbol indented_block_body) [25427 25474])
                    ("to_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25491 25495])
                            ("orient" variable nil (reparse-symbol function_parameters) [25497 25503]))                          
                        :documentation "Convert DataFrame to dictionary.

        Parameters
        ----------
        orient : str {'dict', 'list', 'series', 'split', 'records'}
            Determines the type of the values of the dictionary.

            - dict (default) : dict like {column -> {index -> value}}
            - list : dict like {column -> [values]}
            - series : dict like {column -> Series(values)}
            - split : dict like
              {index -> [index], columns -> [columns], data -> [values]}
            - records : list like
              [{column -> value}, ... , {column -> value}]

            Abbreviations are allowed. `s` indicates `series` and `sp`
            indicates `split`.

        Returns
        -------
        result : dict like {column -> {index -> value}}
        ")
                        (reparse-symbol indented_block_body) [25479 27280])
                    ("to_gbq" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27296 27300])
                            ("destination_table" variable nil (reparse-symbol function_parameters) [27302 27319])
                            ("project_id" variable nil (reparse-symbol function_parameters) [27321 27331])
                            ("chunksize" variable nil (reparse-symbol function_parameters) [27338 27347])
                            ("verbose" variable nil (reparse-symbol function_parameters) [27370 27377])
                            ("reauth" variable nil (reparse-symbol function_parameters) [27384 27390]))                          
                        :documentation "Write a DataFrame to a Google BigQuery table.

        THIS IS AN EXPERIMENTAL LIBRARY

        If the table exists, the dataframe will be written to the table using
        the defined table schema and column types. For simplicity, this method
        uses the Google BigQuery streaming API. The to_gbq method chunks data
        into a default chunk size of 10,000. Failures return the complete error
        response which can be quite long depending on the size of the insert.
        There are several important limitations of the Google streaming API
        which are detailed at:
        https://developers.google.com/bigquery/streaming-data-into-bigquery.

        Parameters
        ----------
        dataframe : DataFrame
            DataFrame to be written
        destination_table : string
            Name of table to be written, in the form 'dataset.tablename'
        project_id : str
            Google BigQuery Account project ID.
        chunksize : int (default 10000)
            Number of rows to be inserted in each chunk from the dataframe.
        verbose : boolean (default True)
            Show percentage complete
        reauth : boolean (default False)
            Force Google BigQuery to reauthenticate the user. This is useful
            if multiple accounts are used.

        ")
                        (reparse-symbol indented_block_body) [27285 28943])
                    ("from_records" function
                       (:documentation "
        Convert structured or record ndarray to DataFrame

        Parameters
        ----------
        data : ndarray (structured dtype), list of tuples, dict, or DataFrame
        index : string, list of fields, array-like
            Field of array to use as the index, alternately a specific set of
            input labels to use
        exclude : sequence, default None
            Columns or fields to exclude
        columns : sequence, default None
            Column names to use. If the passed data do not have names
            associated with them, this argument provides names for the
            columns. Otherwise this argument indicates the order of the columns
            in the result (any names not found in the data will become all-NA
            columns)
        coerce_float : boolean, default False
            Attempt to convert values to non-string, non-numeric objects (like
            decimal.Decimal) to floating point, useful for SQL result sets

        Returns
        -------
        df : DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28982 28985])
                            ("data" variable nil (reparse-symbol function_parameters) [28987 28991])
                            ("index" variable nil (reparse-symbol function_parameters) [28993 28998])
                            ("exclude" variable nil (reparse-symbol function_parameters) [29005 29012])
                            ("columns" variable nil (reparse-symbol function_parameters) [29019 29026])
                            ("coerce_float" variable nil (reparse-symbol function_parameters) [29054 29066])
                            ("nrows" variable nil (reparse-symbol function_parameters) [29074 29079]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [28948 33503])
                    ("to_records" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33523 33527])
                            ("index" variable nil (reparse-symbol function_parameters) [33529 33534])
                            ("convert_datetime64" variable nil (reparse-symbol function_parameters) [33541 33559]))                          
                        :documentation "
        Convert DataFrame to record array. Index will be put in the
        'index' field of the record array if requested

        Parameters
        ----------
        index : boolean, default True
            Include index in resulting record array, stored in 'index' field
        convert_datetime64 : boolean, default True
            Whether to convert the index to datetime.datetime if it is a
            DatetimeIndex

        Returns
        -------
        y : recarray
        ")
                        (reparse-symbol indented_block_body) [33508 35287])
                    ("from_items" function
                       (:documentation "
        Convert (key, value) pairs to DataFrame. The keys will be the axis
        index (usually the columns, but depends on the specified
        orientation). The values should be arrays or Series.

        Parameters
        ----------
        items : sequence of (key, value) pairs
            Values should be arrays or Series.
        columns : sequence of column labels, optional
            Must be passed if orient='index'.
        orient : {'columns', 'index'}, default 'columns'
            The \"orientation\" of the data. If the keys of the
            input correspond to column labels, pass 'columns'
            (default). Otherwise if the keys correspond to the index,
            pass 'index'.

        Returns
        -------
        frame : DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [35324 35327])
                            ("items" variable nil (reparse-symbol function_parameters) [35329 35334])
                            ("columns" variable nil (reparse-symbol function_parameters) [35336 35343])
                            ("orient" variable nil (reparse-symbol function_parameters) [35350 35356]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35292 37356])
                    ("_from_arrays" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [37395 37398])
                            ("arrays" variable nil (reparse-symbol function_parameters) [37400 37406])
                            ("columns" variable nil (reparse-symbol function_parameters) [37408 37415])
                            ("index" variable nil (reparse-symbol function_parameters) [37417 37422])
                            ("dtype" variable nil (reparse-symbol function_parameters) [37424 37429]))                          )
                        (reparse-symbol indented_block_body) [37361 37536])
                    ("from_csv" function
                       (:documentation "
        Read delimited file into DataFrame

        Parameters
        ----------
        path : string file path or file handle / StringIO
        header : int, default 0
            Row to use at header (skip prior rows)
        sep : string, default ','
            Field delimiter
        index_col : int or sequence, default 0
            Column to use for index. If a sequence is given, a MultiIndex
            is used. Different default from read_table
        parse_dates : boolean, default True
            Parse dates. Different default from read_table
        tupleize_cols : boolean, default False
            write multi_index columns as a list of tuples (if True)
            or new (expanded format) if False)
        infer_datetime_format: boolean, default False
            If True and `parse_dates` is True for a column, try to infer the
            datetime format based on the first datetime string. If the format
            can be inferred, there often will be a large parsing speed-up.

        Notes
        -----
        Preferable to use read_table for most general purposes but from_csv
        makes for an easy roundtrip to and from file, especially with a
        DataFrame of time series data

        Returns
        -------
        y : DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [37571 37574])
                            ("path" variable nil (reparse-symbol function_parameters) [37576 37580])
                            ("header" variable nil (reparse-symbol function_parameters) [37582 37588])
                            ("sep" variable nil (reparse-symbol function_parameters) [37592 37595])
                            ("index_col" variable nil (reparse-symbol function_parameters) [37601 37610])
                            ("parse_dates" variable nil (reparse-symbol function_parameters) [37631 37642])
                            ("encoding" variable nil (reparse-symbol function_parameters) [37649 37657])
                            ("tupleize_cols" variable nil (reparse-symbol function_parameters) [37664 37677])
                            ("infer_datetime_format" variable nil (reparse-symbol function_parameters) [37702 37723]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [37541 39358])
                    ("to_sparse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39377 39381])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [39383 39393])
                            ("kind" variable nil (reparse-symbol function_parameters) [39400 39404]))                          
                        :documentation "
        Convert to SparseDataFrame

        Parameters
        ----------
        fill_value : float, default NaN
        kind : {'block', 'integer'}

        Returns
        -------
        y : SparseDataFrame
        ")
                        (reparse-symbol indented_block_body) [39363 39880])
                    ("to_panel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39898 39902]))                          
                        :documentation "
        Transform long (stacked) format (DataFrame) into wide (3D, Panel)
        format.

        Currently the index of the DataFrame must be a 2-level MultiIndex. This
        may be generalized later

        Returns
        -------
        panel : Panel
        ")
                        (reparse-symbol indented_block_body) [39885 41613])
                    ("to_wide" variable nil (reparse-symbol indented_block_body) [41618 41658])
                    ("to_csv" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41675 41679])
                            ("path_or_buf" variable nil (reparse-symbol function_parameters) [41681 41692])
                            ("sep" variable nil (reparse-symbol function_parameters) [41699 41702])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [41708 41714])
                            ("float_format" variable nil (reparse-symbol function_parameters) [41719 41731])
                            ("columns" variable nil (reparse-symbol function_parameters) [41753 41760])
                            ("header" variable nil (reparse-symbol function_parameters) [41767 41773])
                            ("index" variable nil (reparse-symbol function_parameters) [41780 41785])
                            ("index_label" variable nil (reparse-symbol function_parameters) [41792 41803])
                            ("mode" variable nil (reparse-symbol function_parameters) [41825 41829])
                            ("encoding" variable nil (reparse-symbol function_parameters) [41835 41843])
                            ("quoting" variable nil (reparse-symbol function_parameters) [41850 41857])
                            ("quotechar" variable nil (reparse-symbol function_parameters) [41879 41888])
                            ("line_terminator" variable nil (reparse-symbol function_parameters) [41894 41909])
                            ("chunksize" variable nil (reparse-symbol function_parameters) [41916 41925])
                            ("tupleize_cols" variable nil (reparse-symbol function_parameters) [41947 41960])
                            ("date_format" variable nil (reparse-symbol function_parameters) [41968 41979])
                            ("doublequote" variable nil (reparse-symbol function_parameters) [41986 41997])
                            ("escapechar" variable nil (reparse-symbol function_parameters) [42019 42029])
                            ("decimal" variable nil (reparse-symbol function_parameters) [42036 42043])
                            ("kwds" variable nil (reparse-symbol function_parameters) [42049 42055]))                          )
                        (reparse-symbol indented_block_body) [41664 45663])
                    ("to_excel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45681 45685])
                            ("excel_writer" variable nil (reparse-symbol function_parameters) [45687 45699])
                            ("sheet_name" variable nil (reparse-symbol function_parameters) [45701 45711])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [45722 45728])
                            ("float_format" variable nil (reparse-symbol function_parameters) [45750 45762])
                            ("columns" variable nil (reparse-symbol function_parameters) [45769 45776])
                            ("header" variable nil (reparse-symbol function_parameters) [45783 45789])
                            ("index" variable nil (reparse-symbol function_parameters) [45796 45801])
                            ("index_label" variable nil (reparse-symbol function_parameters) [45825 45836])
                            ("startrow" variable nil (reparse-symbol function_parameters) [45843 45851])
                            ("startcol" variable nil (reparse-symbol function_parameters) [45855 45863])
                            ("engine" variable nil (reparse-symbol function_parameters) [45867 45873])
                            ("merge_cells" variable nil (reparse-symbol function_parameters) [45897 45908])
                            ("encoding" variable nil (reparse-symbol function_parameters) [45915 45923])
                            ("inf_rep" variable nil (reparse-symbol function_parameters) [45930 45937]))                          
                        :documentation "
        Write DataFrame to a excel sheet

        Parameters
        ----------
        excel_writer : string or ExcelWriter object
            File path or existing ExcelWriter
        sheet_name : string, default 'Sheet1'
            Name of sheet which will contain DataFrame
        na_rep : string, default ''
            Missing data representation
        float_format : string, default None
            Format string for floating point numbers
        columns : sequence, optional
            Columns to write
        header : boolean or list of string, default True
            Write out column names. If a list of string is given it is
            assumed to be aliases for the column names
        index : boolean, default True
            Write row names (index)
        index_label : string or sequence, default None
            Column label for index column(s) if desired. If None is given, and
            `header` and `index` are True, then the index names are used. A
            sequence should be given if the DataFrame uses MultiIndex.
        startrow :
            upper left cell row to dump data frame
        startcol :
            upper left cell column to dump data frame
        engine : string, default None
            write engine to use - you can also set this via the options
            ``io.excel.xlsx.writer``, ``io.excel.xls.writer``, and
            ``io.excel.xlsm.writer``.
        merge_cells : boolean, default True
            Write MultiIndex and Hierarchical Rows as merged cells.
        encoding: string, default None
            encoding of the resulting excel file. Only necessary for xlwt,
            other writers support unicode natively.
        inf_rep : string, default 'inf'
            Representation for infinity (there is no native representation for
            infinity in Excel)

        Notes
        -----
        If passing an existing ExcelWriter object, then the sheet will be added
        to the existing workbook.  This can be used to save different
        DataFrames to one workbook:

        >>> writer = ExcelWriter('output.xlsx')
        >>> df1.to_excel(writer,'Sheet1')
        >>> df2.to_excel(writer,'Sheet2')
        >>> writer.save()
        ")
                        (reparse-symbol indented_block_body) [45668 49409])
                    ("to_stata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49436 49440])
                            ("fname" variable nil (reparse-symbol function_parameters) [49442 49447])
                            ("convert_dates" variable nil (reparse-symbol function_parameters) [49449 49462])
                            ("write_index" variable nil (reparse-symbol function_parameters) [49469 49480])
                            ("encoding" variable nil (reparse-symbol function_parameters) [49487 49495])
                            ("byteorder" variable nil (reparse-symbol function_parameters) [49519 49528])
                            ("time_stamp" variable nil (reparse-symbol function_parameters) [49535 49545])
                            ("data_label" variable nil (reparse-symbol function_parameters) [49552 49562]))                          
                        :documentation "
        A class for writing Stata binary dta files from array-like objects

        Parameters
        ----------
        fname : file path or buffer
            Where to save the dta file.
        convert_dates : dict
            Dictionary mapping column of datetime types to the stata internal
            format that you want to use for the dates. Options are
            'tc', 'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either a
            number or a name.
        encoding : str
            Default is latin-1. Note that Stata does not support unicode.
        byteorder : str
            Can be \">\", \"<\", \"little\", or \"big\". The default is None which uses
            `sys.byteorder`

        Examples
        --------
        >>> writer = StataWriter('./data_file.dta', data)
        >>> writer.write_file()

        Or with dates

        >>> writer = StataWriter('./date_data_file.dta', data, {2 : 'tw'})
        >>> writer.write_file()
        ")
                        (reparse-symbol indented_block_body) [49414 50895])
                    ("" code nil (reparse-symbol indented_block_body) [50909 50945])
                    ("to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50964 50968])
                            ("buf" variable nil (reparse-symbol function_parameters) [50970 50973])
                            ("columns" variable nil (reparse-symbol function_parameters) [50980 50987])
                            ("col_space" variable nil (reparse-symbol function_parameters) [50994 51003])
                            ("colSpace" variable nil (reparse-symbol function_parameters) [51010 51018])
                            ("header" variable nil (reparse-symbol function_parameters) [51043 51049])
                            ("index" variable nil (reparse-symbol function_parameters) [51056 51061])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [51068 51074])
                            ("formatters" variable nil (reparse-symbol function_parameters) [51082 51092])
                            ("float_format" variable nil (reparse-symbol function_parameters) [51117 51129])
                            ("sparsify" variable nil (reparse-symbol function_parameters) [51136 51144])
                            ("index_names" variable nil (reparse-symbol function_parameters) [51151 51162])
                            ("justify" variable nil (reparse-symbol function_parameters) [51187 51194])
                            ("line_width" variable nil (reparse-symbol function_parameters) [51201 51211])
                            ("max_rows" variable nil (reparse-symbol function_parameters) [51218 51226])
                            ("max_cols" variable nil (reparse-symbol function_parameters) [51233 51241])
                            ("show_dimensions" variable nil (reparse-symbol function_parameters) [51266 51281]))                          
                        :documentation "
        Render a DataFrame to a console-friendly tabular output.
        ")
                        (reparse-symbol indented_block_body) [50950 52519])
                    ("" code nil (reparse-symbol indented_block_body) [52533 52569])
                    ("to_html" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52586 52590])
                            ("buf" variable nil (reparse-symbol function_parameters) [52592 52595])
                            ("columns" variable nil (reparse-symbol function_parameters) [52602 52609])
                            ("col_space" variable nil (reparse-symbol function_parameters) [52616 52625])
                            ("colSpace" variable nil (reparse-symbol function_parameters) [52632 52640])
                            ("header" variable nil (reparse-symbol function_parameters) [52663 52669])
                            ("index" variable nil (reparse-symbol function_parameters) [52676 52681])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [52688 52694])
                            ("formatters" variable nil (reparse-symbol function_parameters) [52702 52712])
                            ("float_format" variable nil (reparse-symbol function_parameters) [52735 52747])
                            ("sparsify" variable nil (reparse-symbol function_parameters) [52754 52762])
                            ("index_names" variable nil (reparse-symbol function_parameters) [52769 52780])
                            ("justify" variable nil (reparse-symbol function_parameters) [52803 52810])
                            ("bold_rows" variable nil (reparse-symbol function_parameters) [52817 52826])
                            ("classes" variable nil (reparse-symbol function_parameters) [52833 52840])
                            ("escape" variable nil (reparse-symbol function_parameters) [52847 52853])
                            ("max_rows" variable nil (reparse-symbol function_parameters) [52876 52884])
                            ("max_cols" variable nil (reparse-symbol function_parameters) [52891 52899])
                            ("show_dimensions" variable nil (reparse-symbol function_parameters) [52906 52921])
                            ("notebook" variable nil (reparse-symbol function_parameters) [52945 52953]))                          
                        :documentation "
        Render a DataFrame as an HTML table.

        `to_html`-specific options:

        bold_rows : boolean, default True
            Make the row labels bold in the output
        classes : str or list or tuple, default None
            CSS class(es) to apply to the resulting html table
        escape : boolean, default True
            Convert the characters <, >, and & to HTML-safe sequences.=
        max_rows : int, optional
            Maximum number of rows to show before truncating. If None, show
            all.
        max_cols : int, optional
            Maximum number of columns to show before truncating. If None, show
            all.

        ")
                        (reparse-symbol indented_block_body) [52574 54845])
                    ("" code nil (reparse-symbol indented_block_body) [54859 54895])
                    ("to_latex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54913 54917])
                            ("buf" variable nil (reparse-symbol function_parameters) [54919 54922])
                            ("columns" variable nil (reparse-symbol function_parameters) [54929 54936])
                            ("col_space" variable nil (reparse-symbol function_parameters) [54943 54952])
                            ("colSpace" variable nil (reparse-symbol function_parameters) [54959 54967])
                            ("header" variable nil (reparse-symbol function_parameters) [54991 54997])
                            ("index" variable nil (reparse-symbol function_parameters) [55004 55009])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [55016 55022])
                            ("formatters" variable nil (reparse-symbol function_parameters) [55030 55040])
                            ("float_format" variable nil (reparse-symbol function_parameters) [55064 55076])
                            ("sparsify" variable nil (reparse-symbol function_parameters) [55083 55091])
                            ("index_names" variable nil (reparse-symbol function_parameters) [55098 55109])
                            ("bold_rows" variable nil (reparse-symbol function_parameters) [55133 55142])
                            ("longtable" variable nil (reparse-symbol function_parameters) [55149 55158])
                            ("escape" variable nil (reparse-symbol function_parameters) [55166 55172]))                          
                        :documentation "
        Render a DataFrame to a tabular environment table. You can splice
        this into a LaTeX document. Requires \\\\usepackage{booktabs}.

        `to_latex`-specific options:

        bold_rows : boolean, default True
            Make the row labels bold in the output
        longtable : boolean, default False
            Use a longtable environment instead of tabular. Requires adding
            a \\\\usepackage{longtable} to your LaTeX preamble.
        escape : boolean, default True
            When set to False prevents from escaping latex special
            characters in column names.

        ")
                        (reparse-symbol indented_block_body) [54900 56733])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56747 56751])
                            ("verbose" variable nil (reparse-symbol function_parameters) [56753 56760])
                            ("buf" variable nil (reparse-symbol function_parameters) [56767 56770])
                            ("max_cols" variable nil (reparse-symbol function_parameters) [56777 56785])
                            ("memory_usage" variable nil (reparse-symbol function_parameters) [56792 56804])
                            ("null_counts" variable nil (reparse-symbol function_parameters) [56811 56822]))                          
                        :documentation "
        Concise summary of a DataFrame.

        Parameters
        ----------
        verbose : {None, True, False}, optional
            Whether to print the full summary.
            None follows the `display.max_info_columns` setting.
            True or False overrides the `display.max_info_columns` setting.
        buf : writable buffer, defaults to sys.stdout
        max_cols : int, default None
            Determines whether full summary or short summary is printed.
            None follows the `display.max_info_columns` setting.
        memory_usage : boolean, default None
            Specifies whether total memory usage of the DataFrame
            elements (including index) should be displayed. None follows
            the `display.memory_usage` setting. True or False overrides
            the `display.memory_usage` setting. Memory usage is shown in
            human-readable units (base-2 representation).
        null_counts : boolean, default None
            Whether to show the non-null counts
            If None, then only show if the frame is smaller than max_info_rows and max_info_columns.
            If True, always show counts.
            If False, never show counts.

        ")
                        (reparse-symbol indented_block_body) [56738 61474])
                    ("memory_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61496 61500])
                            ("index" variable nil (reparse-symbol function_parameters) [61502 61507]))                          
                        :documentation "Memory usage of DataFrame columns.

        Parameters
        ----------
        index : bool
            Specifies whether to include memory usage of DataFrame's
            index in returned Series. If `index=True` (default is False)
            the first index of the Series is `Index`.

        Returns
        -------
        sizes : Series
            A series with column names as index and memory usage of
            columns with units of bytes.

        Notes
        -----
        Memory usage does not include memory consumed by elements that
        are not components of the array.

        See Also
        --------
        numpy.ndarray.nbytes
        ")
                        (reparse-symbol indented_block_body) [61479 62464])
                    ("transpose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62483 62487]))                          
                        :documentation "Transpose index and columns")
                        (reparse-symbol indented_block_body) [62469 62586])
                    ("T" variable nil (reparse-symbol indented_block_body) [62591 62614])
                    ("_unpickle_frame_compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62771 62775])
                            ("state" variable nil (reparse-symbol function_parameters) [62777 62782]))                          )
                        (reparse-symbol indented_block_body) [62744 63178])
                    ("_unpickle_matrix_compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63211 63215])
                            ("state" variable nil (reparse-symbol function_parameters) [63217 63222]))                          )
                        (reparse-symbol indented_block_body) [63183 63826])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64033 64037])
                            ("index" variable nil (reparse-symbol function_parameters) [64039 64044])
                            ("col" variable nil (reparse-symbol function_parameters) [64046 64049])
                            ("takeable" variable nil (reparse-symbol function_parameters) [64051 64059]))                          
                        :documentation "
        Quickly retrieve single value at passed column and index

        Parameters
        ----------
        index : row label
        col : column label
        takeable : interpret the index/col as indexers, default False

        Returns
        -------
        value : scalar value
        ")
                        (reparse-symbol indented_block_body) [64019 64656])
                    ("set_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64675 64679])
                            ("index" variable nil (reparse-symbol function_parameters) [64681 64686])
                            ("col" variable nil (reparse-symbol function_parameters) [64688 64691])
                            ("value" variable nil (reparse-symbol function_parameters) [64693 64698])
                            ("takeable" variable nil (reparse-symbol function_parameters) [64700 64708]))                          
                        :documentation "
        Put single value at passed column and index

        Parameters
        ----------
        index : row label
        col : column label
        value : scalar value
        takeable : interpret the index/col as indexers, default False

        Returns
        -------
        frame : DataFrame
            If label pair is contained, will be reference to calling DataFrame,
            otherwise a new object
        ")
                        (reparse-symbol indented_block_body) [64661 65709])
                    ("irow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65723 65727])
                            ("i" variable nil (reparse-symbol function_parameters) [65729 65730])
                            ("copy" variable nil (reparse-symbol function_parameters) [65732 65736]))                          )
                        (reparse-symbol indented_block_body) [65714 65781])
                    ("icol" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65795 65799])
                            ("i" variable nil (reparse-symbol function_parameters) [65801 65802]))                          )
                        (reparse-symbol indented_block_body) [65786 65841])
                    ("_ixs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65855 65859])
                            ("i" variable nil (reparse-symbol function_parameters) [65861 65862])
                            ("axis" variable nil (reparse-symbol function_parameters) [65864 65868]))                          
                        :documentation "
        i : int, slice, or sequence of integers
        axis : int
        ")
                        (reparse-symbol indented_block_body) [65846 68157])
                    ("iget_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68177 68181])
                            ("i" variable nil (reparse-symbol function_parameters) [68183 68184])
                            ("j" variable nil (reparse-symbol function_parameters) [68186 68187]))                          )
                        (reparse-symbol indented_block_body) [68162 68220])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68241 68245])
                            ("key" variable nil (reparse-symbol function_parameters) [68247 68250]))                          )
                        (reparse-symbol indented_block_body) [68225 69071])
                    ("_getitem_column" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69096 69100])
                            ("key" variable nil (reparse-symbol function_parameters) [69102 69105]))                          
                        :documentation " return the actual column ")
                        (reparse-symbol indented_block_body) [69076 69463])
                    ("_getitem_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69487 69491])
                            ("key" variable nil (reparse-symbol function_parameters) [69493 69496]))                          )
                        (reparse-symbol indented_block_body) [69468 69539])
                    ("_getitem_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69563 69567])
                            ("key" variable nil (reparse-symbol function_parameters) [69569 69572]))                          )
                        (reparse-symbol indented_block_body) [69544 70764])
                    ("_getitem_multilevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70793 70797])
                            ("key" variable nil (reparse-symbol function_parameters) [70799 70802]))                          )
                        (reparse-symbol indented_block_body) [70769 71888])
                    ("_getitem_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71912 71916])
                            ("key" variable nil (reparse-symbol function_parameters) [71918 71921]))                          )
                        (reparse-symbol indented_block_body) [71893 72073])
                    ("query" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72088 72092])
                            ("expr" variable nil (reparse-symbol function_parameters) [72094 72098])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [72100 72108]))                          
                        :documentation "Query the columns of a frame with a boolean expression.

        .. versionadded:: 0.13

        Parameters
        ----------
        expr : string
            The query string to evaluate.  You can refer to variables
            in the environment by prefixing them with an '@' character like
            ``@a + b``.
        kwargs : dict
            See the documentation for :func:`pandas.eval` for complete details
            on the keyword arguments accepted by :meth:`DataFrame.query`.

        Returns
        -------
        q : DataFrame

        Notes
        -----
        The result of the evaluation of this expression is first passed to
        :attr:`DataFrame.loc` and if that fails because of a
        multidimensional key (e.g., a DataFrame) then the result will be passed
        to :meth:`DataFrame.__getitem__`.

        This method uses the top-level :func:`pandas.eval` function to
        evaluate the passed query.

        The :meth:`~pandas.DataFrame.query` method uses a slightly
        modified Python syntax by default. For example, the ``&`` and ``|``
        (bitwise) operators have the precedence of their boolean cousins,
        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,
        however the semantics are different.

        You can change the semantics of the expression by passing the keyword
        argument ``parser='python'``. This enforces the same semantics as
        evaluation in Python space. Likewise, you can pass ``engine='python'``
        to evaluate an expression using Python itself as a backend. This is not
        recommended as it is inefficient compared to using ``numexpr`` as the
        engine.

        The :attr:`DataFrame.index` and
        :attr:`DataFrame.columns` attributes of the
        :class:`~pandas.DataFrame` instance are placed in the query namespace
        by default, which allows you to treat both the index and columns of the
        frame as a column in the frame.
        The identifier ``index`` is used for the frame index; you can also
        use the name of the index to identify it in a query.

        For further details and examples see the ``query`` documentation in
        :ref:`indexing <indexing.query>`.

        See Also
        --------
        pandas.eval
        DataFrame.eval

        Examples
        --------
        >>> from numpy.random import randn
        >>> from pandas import DataFrame
        >>> df = DataFrame(randn(10, 2), columns=list('ab'))
        >>> df.query('a > b')
        >>> df[df.a > df.b]  # same result as the previous expression
        ")
                        (reparse-symbol indented_block_body) [72078 75032])
                    ("eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75046 75050])
                            ("expr" variable nil (reparse-symbol function_parameters) [75052 75056])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [75058 75066]))                          
                        :documentation "Evaluate an expression in the context of the calling DataFrame
        instance.

        Parameters
        ----------
        expr : string
            The expression string to evaluate.
        kwargs : dict
            See the documentation for :func:`~pandas.eval` for complete details
            on the keyword arguments accepted by
            :meth:`~pandas.DataFrame.query`.

        Returns
        -------
        ret : ndarray, scalar, or pandas object

        See Also
        --------
        pandas.DataFrame.query
        pandas.eval

        Notes
        -----
        For more details see the API documentation for :func:`~pandas.eval`.
        For detailed examples see :ref:`enhancing performance with eval
        <enhancingperf.eval>`.

        Examples
        --------
        >>> from numpy.random import randn
        >>> from pandas import DataFrame
        >>> df = DataFrame(randn(10, 2), columns=list('ab'))
        >>> df.eval('a + b')
        >>> df.eval('c = a + b')
        ")
                        (reparse-symbol indented_block_body) [75037 76489])
                    ("select_dtypes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76512 76516])
                            ("include" variable nil (reparse-symbol function_parameters) [76518 76525])
                            ("exclude" variable nil (reparse-symbol function_parameters) [76532 76539]))                          
                        :documentation "Return a subset of a DataFrame including/excluding columns based on
        their ``dtype``.

        Parameters
        ----------
        include, exclude : list-like
            A list of dtypes or strings to be included/excluded. You must pass
            in a non-empty sequence for at least one of these.

        Raises
        ------
        ValueError
            * If both of ``include`` and ``exclude`` are empty
            * If ``include`` and ``exclude`` have overlapping elements
            * If any kind of string dtype is passed in.
        TypeError
            * If either of ``include`` or ``exclude`` is not a sequence

        Returns
        -------
        subset : DataFrame
            The subset of the frame including the dtypes in ``include`` and
            excluding the dtypes in ``exclude``.

        Notes
        -----
        * To select all *numeric* types use the numpy dtype ``numpy.number``
        * To select strings you must use the ``object`` dtype, but note that
          this will return *all* object dtype columns
        * See the `numpy dtype hierarchy
          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__
        * To select Pandas categorical dtypes, use 'category'

        Examples
        --------
        >>> df = pd.DataFrame({'a': np.random.randn(6).astype('f4'),
        ...                    'b': [True, False] * 3,
        ...                    'c': [1.0, 2.0] * 3})
        >>> df
                a      b  c
        0  0.3962   True  1
        1  0.1459  False  2
        2  0.2623   True  1
        3  0.0764  False  2
        4 -0.9703   True  1
        5 -1.2094  False  2
        >>> df.select_dtypes(include=['float64'])
           c
        0  1
        1  2
        2  1
        3  2
        4  1
        5  2
        >>> df.select_dtypes(exclude=['floating'])
               b
        0   True
        1  False
        2   True
        3  False
        4   True
        5  False
        ")
                        (reparse-symbol indented_block_body) [76494 80885])
                    ("_box_item_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80911 80915])
                            ("key" variable nil (reparse-symbol function_parameters) [80917 80920])
                            ("values" variable nil (reparse-symbol function_parameters) [80922 80928]))                          )
                        (reparse-symbol indented_block_body) [80890 81165])
                    ("_box_col_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81190 81194])
                            ("values" variable nil (reparse-symbol function_parameters) [81196 81202])
                            ("items" variable nil (reparse-symbol function_parameters) [81204 81209]))                          
                        :documentation " provide boxed values for a column ")
                        (reparse-symbol indented_block_body) [81170 81417])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81438 81442])
                            ("key" variable nil (reparse-symbol function_parameters) [81444 81447])
                            ("value" variable nil (reparse-symbol function_parameters) [81449 81454]))                          )
                        (reparse-symbol indented_block_body) [81422 81911])
                    ("_setitem_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81935 81939])
                            ("key" variable nil (reparse-symbol function_parameters) [81941 81944])
                            ("value" variable nil (reparse-symbol function_parameters) [81946 81951]))                          )
                        (reparse-symbol indented_block_body) [81916 82039])
                    ("_setitem_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82063 82067])
                            ("key" variable nil (reparse-symbol function_parameters) [82069 82072])
                            ("value" variable nil (reparse-symbol function_parameters) [82074 82079]))                          )
                        (reparse-symbol indented_block_body) [82044 83037])
                    ("_setitem_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83061 83065])
                            ("key" variable nil (reparse-symbol function_parameters) [83067 83070])
                            ("value" variable nil (reparse-symbol function_parameters) [83072 83077]))                          )
                        (reparse-symbol indented_block_body) [83042 83435])
                    ("_ensure_valid_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83464 83468])
                            ("value" variable nil (reparse-symbol function_parameters) [83470 83475]))                          
                        :documentation "
        ensure that if we don't have an index, that we can create one from the
        passed value
        ")
                        (reparse-symbol indented_block_body) [83440 84353])
                    ("_set_item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84372 84376])
                            ("key" variable nil (reparse-symbol function_parameters) [84378 84381])
                            ("value" variable nil (reparse-symbol function_parameters) [84383 84388]))                          
                        :documentation "
        Add series to DataFrame in specified column.

        If series is a numpy-array (not a Series/TimeSeries), it must be the
        same length as the DataFrames index or an error will be thrown.

        Series/TimeSeries will be conformed to the DataFrames index to
        ensure homogeneity.
        ")
                        (reparse-symbol indented_block_body) [84358 85047])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85063 85067])
                            ("loc" variable nil (reparse-symbol function_parameters) [85069 85072])
                            ("column" variable nil (reparse-symbol function_parameters) [85074 85080])
                            ("value" variable nil (reparse-symbol function_parameters) [85082 85087])
                            ("allow_duplicates" variable nil (reparse-symbol function_parameters) [85089 85105]))                          
                        :documentation "
        Insert column into DataFrame at specified location.

        If `allow_duplicates` is False, raises Exception if column
        is already contained in the DataFrame.

        Parameters
        ----------
        loc : int
            Must have 0 <= loc <= len(columns)
        column : object
        value : int, Series, or array-like
        ")
                        (reparse-symbol indented_block_body) [85052 85671])
                    ("assign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85687 85691])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [85693 85701]))                          
                        :documentation "
        Assign new columns to a DataFrame, returning a new object
        (a copy) with all the original columns in addition to the new ones.

        .. versionadded:: 0.16.0

        Parameters
        ----------
        kwargs : keyword, value pairs
            keywords are the column names. If the values are
            callable, they are computed on the DataFrame and
            assigned to the new columns. If the values are
            not callable, (e.g. a Series, scalar, or array),
            they are simply assigned.

        Returns
        -------
        df : DataFrame
            A new DataFrame with the new columns in addition to
            all the existing columns.

        Notes
        -----
        Since ``kwargs`` is a dictionary, the order of your
        arguments may not be preserved. The make things predicatable,
        the columns are inserted in alphabetical order, at the end of
        your DataFrame. Assigning multiple columns within the same
        ``assign`` is possible, but you cannot reference other columns
        created within the same ``assign`` call.

        Examples
        --------
        >>> df = DataFrame({'A': range(1, 11), 'B': np.random.randn(10)})

        Where the value is a callable, evaluated on `df`:

        >>> df.assign(ln_A = lambda x: np.log(x.A))
            A         B      ln_A
        0   1  0.426905  0.000000
        1   2 -0.780949  0.693147
        2   3 -0.418711  1.098612
        3   4 -0.269708  1.386294
        4   5 -0.274002  1.609438
        5   6 -0.500792  1.791759
        6   7  1.649697  1.945910
        7   8 -1.495604  2.079442
        8   9  0.549296  2.197225
        9  10 -0.758542  2.302585

        Where the value already exists and is inserted:

        >>> newcol = np.log(df['A'])
        >>> df.assign(ln_A=newcol)
            A         B      ln_A
        0   1  0.426905  0.000000
        1   2 -0.780949  0.693147
        2   3 -0.418711  1.098612
        3   4 -0.269708  1.386294
        4   5 -0.274002  1.609438
        5   6 -0.500792  1.791759
        6   7  1.649697  1.945910
        7   8 -1.495604  2.079442
        8   9  0.549296  2.197225
        9  10 -0.758542  2.302585
        ")
                        (reparse-symbol indented_block_body) [85676 88294])
                    ("_sanitize_column" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88320 88324])
                            ("key" variable nil (reparse-symbol function_parameters) [88326 88329])
                            ("value" variable nil (reparse-symbol function_parameters) [88331 88336]))                          )
                        (reparse-symbol indented_block_body) [88299 91543])
                    ("_series" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91574 91578]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [91548 91792])
                    ("lookup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91808 91812])
                            ("row_labels" variable nil (reparse-symbol function_parameters) [91814 91824])
                            ("col_labels" variable nil (reparse-symbol function_parameters) [91826 91836]))                          
                        :documentation "Label-based \"fancy indexing\" function for DataFrame.
        Given equal-length arrays of row and column labels, return an
        array of the values corresponding to each (row, col) pair.

        Parameters
        ----------
        row_labels : sequence
            The row labels to use for lookup
        col_labels : sequence
            The column labels to use for lookup

        Notes
        -----
        Akin to::

            result = []
            for row, col in zip(row_labels, col_labels):
                result.append(df.get_value(row, col))

        Examples
        --------
        values : ndarray
            The found values

        ")
                        (reparse-symbol indented_block_body) [91797 93482])
                    ("_reindex_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93613 93617])
                            ("axes" variable nil (reparse-symbol function_parameters) [93619 93623])
                            ("level" variable nil (reparse-symbol function_parameters) [93625 93630])
                            ("limit" variable nil (reparse-symbol function_parameters) [93632 93637])
                            ("method" variable nil (reparse-symbol function_parameters) [93639 93645])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [93647 93657])
                            ("copy" variable nil (reparse-symbol function_parameters) [93659 93663]))                          )
                        (reparse-symbol indented_block_body) [93595 94093])
                    ("_reindex_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94117 94121])
                            ("new_index" variable nil (reparse-symbol function_parameters) [94123 94132])
                            ("method" variable nil (reparse-symbol function_parameters) [94134 94140])
                            ("copy" variable nil (reparse-symbol function_parameters) [94142 94146])
                            ("level" variable nil (reparse-symbol function_parameters) [94148 94153])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [94155 94165])
                            ("limit" variable nil (reparse-symbol function_parameters) [94193 94198]))                          )
                        (reparse-symbol indented_block_body) [94098 94549])
                    ("_reindex_columns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94575 94579])
                            ("new_columns" variable nil (reparse-symbol function_parameters) [94581 94592])
                            ("copy" variable nil (reparse-symbol function_parameters) [94594 94598])
                            ("level" variable nil (reparse-symbol function_parameters) [94600 94605])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [94607 94617])
                            ("limit" variable nil (reparse-symbol function_parameters) [94647 94652]))                          )
                        (reparse-symbol indented_block_body) [94554 95013])
                    ("_reindex_multi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95037 95041])
                            ("axes" variable nil (reparse-symbol function_parameters) [95043 95047])
                            ("copy" variable nil (reparse-symbol function_parameters) [95049 95053])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [95055 95065]))                          
                        :documentation " we are guaranteed non-Nones in the axes! ")
                        (reparse-symbol indented_block_body) [95018 95934])
                    ("" code nil (reparse-symbol indented_block_body) [95948 95994])
                    ("reindex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96011 96015])
                            ("index" variable nil (reparse-symbol function_parameters) [96017 96022])
                            ("columns" variable nil (reparse-symbol function_parameters) [96029 96036])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [96043 96051]))                          )
                        (reparse-symbol indented_block_body) [95999 96186])
                    ("" code nil (reparse-symbol indented_block_body) [96200 96251])
                    ("reindex_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96273 96277])
                            ("labels" variable nil (reparse-symbol function_parameters) [96279 96285])
                            ("axis" variable nil (reparse-symbol function_parameters) [96287 96291])
                            ("method" variable nil (reparse-symbol function_parameters) [96295 96301])
                            ("level" variable nil (reparse-symbol function_parameters) [96308 96313])
                            ("copy" variable nil (reparse-symbol function_parameters) [96320 96324])
                            ("limit" variable nil (reparse-symbol function_parameters) [96352 96357])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [96364 96374]))                          )
                        (reparse-symbol indented_block_body) [96256 96689])
                    ("" code nil (reparse-symbol indented_block_body) [96703 96748])
                    ("rename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96764 96768])
                            ("index" variable nil (reparse-symbol function_parameters) [96770 96775])
                            ("columns" variable nil (reparse-symbol function_parameters) [96782 96789])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [96796 96804]))                          )
                        (reparse-symbol indented_block_body) [96753 96937])
                    ("" code nil (reparse-symbol indented_block_body) [96951 96996])
                    ("fillna" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97012 97016])
                            ("value" variable nil (reparse-symbol function_parameters) [97018 97023])
                            ("method" variable nil (reparse-symbol function_parameters) [97030 97036])
                            ("axis" variable nil (reparse-symbol function_parameters) [97043 97047])
                            ("inplace" variable nil (reparse-symbol function_parameters) [97054 97061])
                            ("limit" variable nil (reparse-symbol function_parameters) [97084 97089])
                            ("downcast" variable nil (reparse-symbol function_parameters) [97096 97104])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [97111 97119]))                          )
                        (reparse-symbol indented_block_body) [97001 97400])
                    ("" code nil (reparse-symbol indented_block_body) [97414 97458])
                    ("shift" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97473 97477])
                            ("periods" variable nil (reparse-symbol function_parameters) [97479 97486])
                            ("freq" variable nil (reparse-symbol function_parameters) [97490 97494])
                            ("axis" variable nil (reparse-symbol function_parameters) [97501 97505])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [97509 97517]))                          )
                        (reparse-symbol indented_block_body) [97463 97657])
                    ("set_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97676 97680])
                            ("keys" variable nil (reparse-symbol function_parameters) [97682 97686])
                            ("drop" variable nil (reparse-symbol function_parameters) [97688 97692])
                            ("append" variable nil (reparse-symbol function_parameters) [97699 97705])
                            ("inplace" variable nil (reparse-symbol function_parameters) [97713 97720])
                            ("verify_integrity" variable nil (reparse-symbol function_parameters) [97746 97762]))                          
                        :documentation "
        Set the DataFrame index (row labels) using one or more existing
        columns. By default yields a new object.

        Parameters
        ----------
        keys : column label or list of column labels / arrays
        drop : boolean, default True
            Delete columns to be used as the new index
        append : boolean, default False
            Whether to append columns to existing index
        inplace : boolean, default False
            Modify the DataFrame in place (do not create a new object)
        verify_integrity : boolean, default False
            Check the new index for duplicates. Otherwise defer the check until
            necessary. Setting to False will improve the performance of this
            method

        Examples
        --------
        >>> indexed_df = df.set_index(['A', 'B'])
        >>> indexed_df2 = df.set_index(['A', [0, 1, 2, 0, 1, 2]])
        >>> indexed_df3 = df.set_index([[0, 1, 2, 0, 1, 2]])

        Returns
        -------
        dataframe : DataFrame
        ")
                        (reparse-symbol indented_block_body) [97662 100702])
                    ("reset_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100723 100727])
                            ("level" variable nil (reparse-symbol function_parameters) [100729 100734])
                            ("drop" variable nil (reparse-symbol function_parameters) [100741 100745])
                            ("inplace" variable nil (reparse-symbol function_parameters) [100753 100760])
                            ("col_level" variable nil (reparse-symbol function_parameters) [100768 100777])
                            ("col_fill" variable nil (reparse-symbol function_parameters) [100801 100809]))                          
                        :documentation "
        For DataFrame with multi-level index, return new DataFrame with
        labeling information in the columns under the index names, defaulting
        to 'level_0', 'level_1', etc. if any are None. For a standard index,
        the index name will be used (if set), otherwise a default 'index' or
        'level_0' (if 'index' is already taken) will be used.

        Parameters
        ----------
        level : int, str, tuple, or list, default None
            Only remove the given levels from the index. Removes all levels by
            default
        drop : boolean, default False
            Do not try to insert index into dataframe columns. This resets
            the index to the default integer index.
        inplace : boolean, default False
            Modify the DataFrame in place (do not create a new object)
        col_level : int or str, default 0
            If the columns have multiple levels, determines which level the
            labels are inserted into. By default it is inserted into the first
            level.
        col_fill : object, default ''
            If the columns have multiple levels, determines how the other
            levels are named. If None then the index name is repeated.

        Returns
        -------
        resetted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [100707 105415])
                    ("dropna" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105547 105551])
                            ("axis" variable nil (reparse-symbol function_parameters) [105553 105557])
                            ("how" variable nil (reparse-symbol function_parameters) [105561 105564])
                            ("thresh" variable nil (reparse-symbol function_parameters) [105572 105578])
                            ("subset" variable nil (reparse-symbol function_parameters) [105585 105591])
                            ("inplace" variable nil (reparse-symbol function_parameters) [105613 105620]))                          
                        :documentation "
        Return object with labels on given axis omitted where alternately any
        or all of the data are missing

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, or tuple/list thereof
            Pass tuple or list to drop on multiple axes
        how : {'any', 'all'}
            * any : if any NA values are present, drop that label
            * all : if all values are NA, drop that label
        thresh : int, default None
            int value : require that many non-NA values
        subset : array-like
            Labels along other axis to consider, e.g. if you are dropping rows
            these would be a list of columns to include
        inplace : boolean, defalt False
            If True, do operation inplace and return None.

        Returns
        -------
        dropped : DataFrame
        ")
                        (reparse-symbol indented_block_body) [105536 107852])
                    ("" code nil (reparse-symbol indented_block_body) [107873 107917])
                    ("drop_duplicates" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107942 107946])
                            ("subset" variable nil (reparse-symbol function_parameters) [107948 107954])
                            ("take_last" variable nil (reparse-symbol function_parameters) [107961 107970])
                            ("inplace" variable nil (reparse-symbol function_parameters) [107978 107985]))                          
                        :documentation "
        Return DataFrame with duplicate rows removed, optionally only
        considering certain columns

        Parameters
        ----------
        subset : column label or sequence of labels, optional
            Only consider certain columns for identifying duplicates, by
            default use all of the columns
        take_last : boolean, default False
            Take the last observed row in a row. Defaults to the first row
        inplace : boolean, default False
            Whether to drop duplicates in place or to return a copy
        cols : kwargs only argument of subset [deprecated]

        Returns
        -------
        deduplicated : DataFrame
        ")
                        (reparse-symbol indented_block_body) [107922 108963])
                    ("" code nil (reparse-symbol indented_block_body) [108984 109028])
                    ("duplicated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109048 109052])
                            ("subset" variable nil (reparse-symbol function_parameters) [109054 109060])
                            ("take_last" variable nil (reparse-symbol function_parameters) [109067 109076]))                          
                        :documentation "
        Return boolean Series denoting duplicate rows, optionally only
        considering certain columns

        Parameters
        ----------
        subset : column label or sequence of labels, optional
            Only consider certain columns for identifying duplicates, by
            default use all of the columns
        take_last : boolean, default False
            For a set of distinct duplicate rows, flag all but the last row as
            duplicated. Default is for all but the first row to be flagged
        cols : kwargs only argument of subset [deprecated]

        Returns
        -------
        duplicated : Series
        ")
                        (reparse-symbol indented_block_body) [109033 110621])
                    ("sort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110726 110730])
                            ("columns" variable nil (reparse-symbol function_parameters) [110732 110739])
                            ("axis" variable nil (reparse-symbol function_parameters) [110746 110750])
                            ("ascending" variable nil (reparse-symbol function_parameters) [110754 110763])
                            ("inplace" variable nil (reparse-symbol function_parameters) [110783 110790])
                            ("kind" variable nil (reparse-symbol function_parameters) [110798 110802])
                            ("na_position" variable nil (reparse-symbol function_parameters) [110816 110827]))                          
                        :documentation "
        Sort DataFrame either by labels (along either axis) or by the values in
        column(s)

        Parameters
        ----------
        columns : object
            Column name(s) in frame. Accepts a column name or a list
            for a nested sort. A tuple will be interpreted as the
            levels of a multi-index.
        ascending : boolean or list, default True
            Sort ascending vs. descending. Specify list for multiple sort
            orders
        axis : {0 or 'index', 1 or 'columns'}, default 0
            Sort index/rows versus columns
        inplace : boolean, default False
            Sort the DataFrame without creating a new instance
        kind : {'quicksort', 'mergesort', 'heapsort'}, optional
            This option is only applied when sorting on a single column or label.
        na_position : {'first', 'last'} (optional, default='last')
            'first' puts NaNs at the beginning
            'last' puts NaNs at the end

        Examples
        --------
        >>> result = df.sort(['A', 'B'], ascending=[1, 0])

        Returns
        -------
        sorted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [110717 112155])
                    ("sort_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112175 112179])
                            ("axis" variable nil (reparse-symbol function_parameters) [112181 112185])
                            ("by" variable nil (reparse-symbol function_parameters) [112189 112191])
                            ("ascending" variable nil (reparse-symbol function_parameters) [112198 112207])
                            ("inplace" variable nil (reparse-symbol function_parameters) [112214 112221])
                            ("kind" variable nil (reparse-symbol function_parameters) [112248 112252])
                            ("na_position" variable nil (reparse-symbol function_parameters) [112266 112277]))                          
                        :documentation "
        Sort DataFrame either by labels (along either axis) or by the values in
        a column

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            Sort index/rows versus columns
        by : object
            Column name(s) in frame. Accepts a column name or a list
            for a nested sort. A tuple will be interpreted as the
            levels of a multi-index.
        ascending : boolean or list, default True
            Sort ascending vs. descending. Specify list for multiple sort
            orders
        inplace : boolean, default False
            Sort the DataFrame without creating a new instance
        na_position : {'first', 'last'} (optional, default='last')
            'first' puts NaNs at the beginning
            'last' puts NaNs at the end
        kind : {'quicksort', 'mergesort', 'heapsort'}, optional
            This option is only applied when sorting on a single column or label.

        Examples
        --------
        >>> result = df.sort_index(by=['A', 'B'], ascending=[True, False])

        Returns
        -------
        sorted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [112160 116575])
                    ("sortlevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116594 116598])
                            ("level" variable nil (reparse-symbol function_parameters) [116600 116605])
                            ("axis" variable nil (reparse-symbol function_parameters) [116609 116613])
                            ("ascending" variable nil (reparse-symbol function_parameters) [116617 116626])
                            ("inplace" variable nil (reparse-symbol function_parameters) [116651 116658])
                            ("sort_remaining" variable nil (reparse-symbol function_parameters) [116666 116680]))                          
                        :documentation "
        Sort multilevel index by chosen axis and primary level. Data will be
        lexicographically sorted by the chosen level followed by the other
        levels (in order)

        Parameters
        ----------
        level : int
        axis : {0 or 'index', 1 or 'columns'}, default 0
        ascending : boolean, default True
        inplace : boolean, default False
            Sort the DataFrame without creating a new instance
        sort_remaining : boolean, default True
            Sort by the other levels too.

        Returns
        -------
        sorted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [116580 118271])
                    ("swaplevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118290 118294])
                            ("i" variable nil (reparse-symbol function_parameters) [118296 118297])
                            ("j" variable nil (reparse-symbol function_parameters) [118299 118300])
                            ("axis" variable nil (reparse-symbol function_parameters) [118302 118306]))                          
                        :documentation "
        Swap levels i and j in a MultiIndex on a particular axis

        Parameters
        ----------
        i, j : int, string (can be mixed)
            Level of index to be swapped. Can pass level name as string.

        Returns
        -------
        swapped : type of caller (new object)
        ")
                        (reparse-symbol indented_block_body) [118276 118880])
                    ("reorder_levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118904 118908])
                            ("order" variable nil (reparse-symbol function_parameters) [118910 118915])
                            ("axis" variable nil (reparse-symbol function_parameters) [118917 118921]))                          
                        :documentation "
        Rearrange index levels using input order.
        May not drop or duplicate levels

        Parameters
        ----------
        order : list of int or list of str
            List representing new level order. Reference level by number
            (position) or by key (label).
        axis : int
            Where to reorder levels.

        Returns
        -------
        type of caller (new object)
        ")
                        (reparse-symbol indented_block_body) [118885 119809])
                    ("_combine_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119949 119953])
                            ("other" variable nil (reparse-symbol function_parameters) [119955 119960])
                            ("func" variable nil (reparse-symbol function_parameters) [119962 119966])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [119968 119978])
                            ("level" variable nil (reparse-symbol function_parameters) [119985 119990]))                          )
                        (reparse-symbol indented_block_body) [119930 121814])
                    ("_combine_series" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121839 121843])
                            ("other" variable nil (reparse-symbol function_parameters) [121845 121850])
                            ("func" variable nil (reparse-symbol function_parameters) [121852 121856])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [121858 121868])
                            ("axis" variable nil (reparse-symbol function_parameters) [121875 121879])
                            ("level" variable nil (reparse-symbol function_parameters) [121910 121915]))                          )
                        (reparse-symbol indented_block_body) [121819 122336])
                    ("_combine_series_infer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122367 122371])
                            ("other" variable nil (reparse-symbol function_parameters) [122373 122378])
                            ("func" variable nil (reparse-symbol function_parameters) [122380 122384])
                            ("level" variable nil (reparse-symbol function_parameters) [122386 122391])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [122398 122408]))                          )
                        (reparse-symbol indented_block_body) [122341 123366])
                    ("_combine_match_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123396 123400])
                            ("other" variable nil (reparse-symbol function_parameters) [123402 123407])
                            ("func" variable nil (reparse-symbol function_parameters) [123409 123413])
                            ("level" variable nil (reparse-symbol function_parameters) [123415 123420])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [123427 123437]))                          )
                        (reparse-symbol indented_block_body) [123371 123876])
                    ("_combine_match_columns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123908 123912])
                            ("other" variable nil (reparse-symbol function_parameters) [123914 123919])
                            ("func" variable nil (reparse-symbol function_parameters) [123921 123925])
                            ("level" variable nil (reparse-symbol function_parameters) [123927 123932])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [123939 123949]))                          )
                        (reparse-symbol indented_block_body) [123881 124348])
                    ("_combine_const" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124372 124376])
                            ("other" variable nil (reparse-symbol function_parameters) [124378 124383])
                            ("func" variable nil (reparse-symbol function_parameters) [124385 124389])
                            ("raise_on_error" variable nil (reparse-symbol function_parameters) [124391 124405]))                          )
                        (reparse-symbol indented_block_body) [124353 124594])
                    ("_compare_frame_evaluate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124627 124631])
                            ("other" variable nil (reparse-symbol function_parameters) [124633 124638])
                            ("func" variable nil (reparse-symbol function_parameters) [124640 124644])
                            ("str_rep" variable nil (reparse-symbol function_parameters) [124646 124653]))                          )
                        (reparse-symbol indented_block_body) [124599 125505])
                    ("_compare_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125529 125533])
                            ("other" variable nil (reparse-symbol function_parameters) [125535 125540])
                            ("func" variable nil (reparse-symbol function_parameters) [125542 125546])
                            ("str_rep" variable nil (reparse-symbol function_parameters) [125548 125555]))                          )
                        (reparse-symbol indented_block_body) [125510 125785])
                    ("_flex_compare_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125814 125818])
                            ("other" variable nil (reparse-symbol function_parameters) [125820 125825])
                            ("func" variable nil (reparse-symbol function_parameters) [125827 125831])
                            ("str_rep" variable nil (reparse-symbol function_parameters) [125833 125840])
                            ("level" variable nil (reparse-symbol function_parameters) [125842 125847]))                          )
                        (reparse-symbol indented_block_body) [125790 126036])
                    ("combine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [126053 126057])
                            ("other" variable nil (reparse-symbol function_parameters) [126059 126064])
                            ("func" variable nil (reparse-symbol function_parameters) [126066 126070])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [126072 126082])
                            ("overwrite" variable nil (reparse-symbol function_parameters) [126089 126098]))                          
                        :documentation "
        Add two DataFrame objects and do not propagate NaN values, so if for a
        (column, time) one frame is missing a value, it will default to the
        other frame's value (which might be NaN as well)

        Parameters
        ----------
        other : DataFrame
        func : function
        fill_value : scalar value
        overwrite : boolean, default True
            If True then overwrite values for common keys in the calling frame

        Returns
        -------
        result : DataFrame
        ")
                        (reparse-symbol indented_block_body) [126041 129198])
                    ("combine_first" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129221 129225])
                            ("other" variable nil (reparse-symbol function_parameters) [129227 129232]))                          
                        :documentation "
        Combine two DataFrame objects and default to non-null values in frame
        calling the method. Result index columns will be the union of the
        respective indexes and columns

        Parameters
        ----------
        other : DataFrame

        Examples
        --------
        a's values prioritized, use values from b to fill holes:

        >>> a.combine_first(b)


        Returns
        -------
        combined : DataFrame
        ")
                        (reparse-symbol indented_block_body) [129203 130297])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130313 130317])
                            ("other" variable nil (reparse-symbol function_parameters) [130319 130324])
                            ("join" variable nil (reparse-symbol function_parameters) [130326 130330])
                            ("overwrite" variable nil (reparse-symbol function_parameters) [130339 130348])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [130355 130366])
                            ("raise_conflict" variable nil (reparse-symbol function_parameters) [130388 130402]))                          
                        :documentation "
        Modify DataFrame in place using non-NA values from passed
        DataFrame. Aligns on indices

        Parameters
        ----------
        other : DataFrame, or object coercible into a DataFrame
        join : {'left'}, default 'left'
        overwrite : boolean, default True
            If True then overwrite values for common keys in the calling frame
        filter_func : callable(1d-array) -> 1d-array<boolean>, default None
            Can choose to replace values other than NA. Return True for values
            that should be updated
        raise_conflict : boolean
            If True, will raise an error if the DataFrame and other both
            contain data in the same place.
        ")
                        (reparse-symbol indented_block_body) [130302 132239])
                    ("first_valid_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132362 132366]))                          
                        :documentation "
        Return label for first non-NA/null value
        ")
                        (reparse-symbol indented_block_body) [132340 132490])
                    ("last_valid_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132516 132520]))                          
                        :documentation "
        Return label for last non-NA/null value
        ")
                        (reparse-symbol indented_block_body) [132495 132644])
                    ("pivot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132757 132761])
                            ("index" variable nil (reparse-symbol function_parameters) [132763 132768])
                            ("columns" variable nil (reparse-symbol function_parameters) [132775 132782])
                            ("values" variable nil (reparse-symbol function_parameters) [132789 132795]))                          
                        :documentation "
        Reshape data (produce a \"pivot\" table) based on column values. Uses
        unique values from index / columns to form axes and return either
        DataFrame or Panel, depending on whether you request a single value
        column (DataFrame) or all columns (Panel)

        Parameters
        ----------
        index : string or object
            Column name to use to make new frame's index
        columns : string or object
            Column name to use to make new frame's columns
        values : string or object, optional
            Column name to use for populating new frame's values

        Notes
        -----
        For finer-tuned control, see hierarchical indexing documentation along
        with the related stack/unstack methods

        Examples
        --------
        >>> df
            foo   bar  baz
        0   one   A    1.
        1   one   B    2.
        2   one   C    3.
        3   two   A    4.
        4   two   B    5.
        5   two   C    6.

        >>> df.pivot('foo', 'bar', 'baz')
             A   B   C
        one  1   2   3
        two  4   5   6

        >>> df.pivot('foo', 'bar')['baz']
             A   B   C
        one  1   2   3
        two  4   5   6

        Returns
        -------
        pivoted : DataFrame
            If no values column specified, will have hierarchically indexed
            columns
        ")
                        (reparse-symbol indented_block_body) [132747 134322])
                    ("stack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134337 134341])
                            ("level" variable nil (reparse-symbol function_parameters) [134343 134348])
                            ("dropna" variable nil (reparse-symbol function_parameters) [134353 134359]))                          
                        :documentation "
        Pivot a level of the (possibly hierarchical) column labels, returning a
        DataFrame (or Series in the case of an object with a single level of
        column labels) having a hierarchical index with a new inner-most level
        of row labels.
        The level involved will automatically get sorted.

        Parameters
        ----------
        level : int, string, or list of these, default last level
            Level(s) to stack, can pass level name
        dropna : boolean, default True
            Whether to drop rows in the resulting Frame/Series with no valid
            values

        Examples
        ----------
        >>> s
             a   b
        one  1.  2.
        two  3.  4.

        >>> s.stack()
        one a    1
            b    2
        two a    3
            b    4

        Returns
        -------
        stacked : DataFrame or Series
        ")
                        (reparse-symbol indented_block_body) [134327 135516])
                    ("unstack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135533 135537])
                            ("level" variable nil (reparse-symbol function_parameters) [135539 135544]))                          
                        :documentation "
        Pivot a level of the (necessarily hierarchical) index labels, returning
        a DataFrame having a new level of column labels whose inner-most level
        consists of the pivoted index labels. If the index is not a MultiIndex,
        the output will be a Series (the analogue of stack when the columns are
        not a MultiIndex).
        The level involved will automatically get sorted.

        Parameters
        ----------
        level : int, string, or list of these, default -1 (last level)
            Level(s) of index to unstack, can pass level name

        See also
        --------
        DataFrame.pivot : Pivot a table based on column values.
        DataFrame.stack : Pivot a level of the column labels (inverse operation
            from `unstack`).

        Examples
        --------
        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),
        ...                                    ('two', 'a'), ('two', 'b')])
        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)
        >>> s
        one  a   1
             b   2
        two  a   3
             b   4
        dtype: float64

        >>> s.unstack(level=-1)
             a   b
        one  1  2
        two  3  4

        >>> s.unstack(level=0)
           one  two
        a  1   3
        b  2   4

        >>> df = s.unstack(level=0)
        >>> df.unstack()
        one  a  1.
             b  3.
        two  a  2.
             b  4.

        Returns
        -------
        unstacked : DataFrame or Series
        ")
                        (reparse-symbol indented_block_body) [135521 137186])
                    ("diff" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137303 137307])
                            ("periods" variable nil (reparse-symbol function_parameters) [137309 137316])
                            ("axis" variable nil (reparse-symbol function_parameters) [137320 137324]))                          
                        :documentation "
        1st discrete difference of object

        Parameters
        ----------
        periods : int, default 1
            Periods to shift for forming difference
        axis : {0 or 'index', 1 or 'columns'}, default 0

        Returns
        -------
        diffed : DataFrame
        ")
                        (reparse-symbol indented_block_body) [137294 137792])
                    ("apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137911 137915])
                            ("func" variable nil (reparse-symbol function_parameters) [137917 137921])
                            ("axis" variable nil (reparse-symbol function_parameters) [137923 137927])
                            ("broadcast" variable nil (reparse-symbol function_parameters) [137931 137940])
                            ("raw" variable nil (reparse-symbol function_parameters) [137948 137951])
                            ("reduce" variable nil (reparse-symbol function_parameters) [137959 137965])
                            ("args" variable nil (reparse-symbol function_parameters) [137986 137990])
                            ("kwds" variable nil (reparse-symbol function_parameters) [137995 138001]))                          
                        :documentation "
        Applies function along input axis of DataFrame.

        Objects passed to functions are Series objects having index
        either the DataFrame's index (axis=0) or the columns (axis=1).
        Return type depends on whether passed function aggregates, or the
        reduce argument if the DataFrame is empty.

        Parameters
        ----------
        func : function
            Function to apply to each column/row
        axis : {0 or 'index', 1 or 'columns'}, default 0
            * 0 or 'index': apply function to each column
            * 1 or 'columns': apply function to each row
        broadcast : boolean, default False
            For aggregation functions, return object of same size with values
            propagated
        reduce : boolean or None, default None
            Try to apply reduction procedures. If the DataFrame is empty,
            apply will use reduce to determine whether the result should be a
            Series or a DataFrame. If reduce is None (the default), apply's
            return value will be guessed by calling func an empty Series (note:
            while guessing, exceptions raised by func will be ignored). If
            reduce is True a Series will always be returned, and if False a
            DataFrame will always be returned.
        raw : boolean, default False
            If False, convert each row or column into a Series. If raw=True the
            passed function will receive ndarray objects instead. If you are
            just applying a NumPy reduction function this will achieve much
            better performance
        args : tuple
            Positional arguments to pass to function in addition to the
            array/series
        Additional keyword arguments will be passed as keywords to the function

        Notes
        -----
        In the current implementation apply calls func twice on the
        first column/row to decide whether it can take a fast or slow
        code path. This can lead to unexpected behavior if func has
        side-effects, as they will take effect twice for the first
        column/row.

        Examples
        --------
        >>> df.apply(numpy.sqrt) # returns DataFrame
        >>> df.apply(numpy.sum, axis=0) # equiv to df.sum(0)
        >>> df.apply(numpy.sum, axis=1) # equiv to df.sum(1)

        See also
        --------
        DataFrame.applymap: For elementwise operations

        Returns
        -------
        applied : Series or DataFrame
        ")
                        (reparse-symbol indented_block_body) [137901 141634])
                    ("_apply_empty_result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141663 141667])
                            ("func" variable nil (reparse-symbol function_parameters) [141669 141673])
                            ("axis" variable nil (reparse-symbol function_parameters) [141675 141679])
                            ("reduce" variable nil (reparse-symbol function_parameters) [141681 141687])
                            ("args" variable nil (reparse-symbol function_parameters) [141689 141694])
                            ("kwds" variable nil (reparse-symbol function_parameters) [141696 141702]))                          )
                        (reparse-symbol indented_block_body) [141639 142078])
                    ("_apply_raw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142098 142102])
                            ("func" variable nil (reparse-symbol function_parameters) [142104 142108])
                            ("axis" variable nil (reparse-symbol function_parameters) [142110 142114]))                          )
                        (reparse-symbol indented_block_body) [142083 142532])
                    ("_apply_standard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142557 142561])
                            ("func" variable nil (reparse-symbol function_parameters) [142563 142567])
                            ("axis" variable nil (reparse-symbol function_parameters) [142569 142573])
                            ("ignore_failures" variable nil (reparse-symbol function_parameters) [142575 142590])
                            ("reduce" variable nil (reparse-symbol function_parameters) [142598 142604]))                          )
                        (reparse-symbol indented_block_body) [142537 145740])
                    ("_apply_broadcast" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145766 145770])
                            ("func" variable nil (reparse-symbol function_parameters) [145772 145776])
                            ("axis" variable nil (reparse-symbol function_parameters) [145778 145782]))                          )
                        (reparse-symbol indented_block_body) [145745 146377])
                    ("applymap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146395 146399])
                            ("func" variable nil (reparse-symbol function_parameters) [146401 146405]))                          
                        :documentation "
        Apply a function to a DataFrame that is intended to operate
        elementwise, i.e. like doing map(func, series) for each series in the
        DataFrame

        Parameters
        ----------
        func : function
            Python function, returns a single value from a single value

        Returns
        -------
        applied : DataFrame

        See also
        --------
        DataFrame.apply : For operations on rows/columns

        ")
                        (reparse-symbol indented_block_body) [146382 147207])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147332 147336])
                            ("other" variable nil (reparse-symbol function_parameters) [147338 147343])
                            ("ignore_index" variable nil (reparse-symbol function_parameters) [147345 147357])
                            ("verify_integrity" variable nil (reparse-symbol function_parameters) [147365 147381]))                          
                        :documentation "
        Append rows of `other` to the end of this frame, returning a new
        object. Columns not in this frame are added as new columns.

        Parameters
        ----------
        other : DataFrame or Series/dict-like object, or list of these
            The data to append.
        ignore_index : boolean, default False
            If True, do not use the index labels.
        verify_integrity : boolean, default False
            If True, raise ValueError on creating index with duplicates.

        Returns
        -------
        appended : DataFrame

        Notes
        -----
        If a list of dict/series is passed and the keys are all contained in the
        DataFrame's index, the order of the columns in the resulting DataFrame
        will be unchanged.

        See also
        --------
        pandas.concat : General function to concatenate DataFrame, Series
            or Panel objects

        Examples
        --------

        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))
        >>> df
           A  B
        0  1  2
        1  3  4
        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))
        >>> df.append(df2)
           A  B
        0  1  2
        1  3  4
        0  5  6
        1  7  8

        With `ignore_index` set to True:

        >>> df.append(df2, ignore_index=True)
           A  B
        0  1  2
        1  3  4
        2  5  6
        3  7  8

        ")
                        (reparse-symbol indented_block_body) [147321 150230])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150244 150248])
                            ("other" variable nil (reparse-symbol function_parameters) [150250 150255])
                            ("on" variable nil (reparse-symbol function_parameters) [150257 150259])
                            ("how" variable nil (reparse-symbol function_parameters) [150266 150269])
                            ("lsuffix" variable nil (reparse-symbol function_parameters) [150278 150285])
                            ("rsuffix" variable nil (reparse-symbol function_parameters) [150290 150297])
                            ("sort" variable nil (reparse-symbol function_parameters) [150315 150319]))                          
                        :documentation "
        Join columns with other DataFrame either on index or on a key
        column. Efficiently Join multiple DataFrame objects by index at once by
        passing a list.

        Parameters
        ----------
        other : DataFrame, Series with name field set, or list of DataFrame
            Index should be similar to one of the columns in this one. If a
            Series is passed, its name attribute must be set, and that will be
            used as the column name in the resulting joined DataFrame
        on : column name, tuple/list of column names, or array-like
            Column(s) to use for joining, otherwise join on index. If multiples
            columns given, the passed DataFrame must have a MultiIndex. Can
            pass an array as the join key if not already contained in the
            calling DataFrame. Like an Excel VLOOKUP operation
        how : {'left', 'right', 'outer', 'inner'}
            How to handle indexes of the two objects. Default: 'left'
            for joining on index, None otherwise

            * left: use calling frame's index
            * right: use input frame's index
            * outer: form union of indexes
            * inner: use intersection of indexes
        lsuffix : string
            Suffix to use from left frame's overlapping columns
        rsuffix : string
            Suffix to use from right frame's overlapping columns
        sort : boolean, default False
            Order result DataFrame lexicographically by the join key. If False,
            preserves the index order of the calling (left) DataFrame

        Notes
        -----
        on, lsuffix, and rsuffix options are not supported when passing a list
        of DataFrame objects

        Returns
        -------
        joined : DataFrame
        ")
                        (reparse-symbol indented_block_body) [150235 152318])
                    ("_join_compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152340 152344])
                            ("other" variable nil (reparse-symbol function_parameters) [152346 152351])
                            ("on" variable nil (reparse-symbol function_parameters) [152353 152355])
                            ("how" variable nil (reparse-symbol function_parameters) [152362 152365])
                            ("lsuffix" variable nil (reparse-symbol function_parameters) [152374 152381])
                            ("rsuffix" variable nil (reparse-symbol function_parameters) [152386 152393])
                            ("sort" variable nil (reparse-symbol function_parameters) [152419 152423]))                          )
                        (reparse-symbol indented_block_body) [152323 153773])
                    ("" code nil (reparse-symbol indented_block_body) [153791 153795])
                    ("" code nil (reparse-symbol indented_block_body) [153809 153832])
                    ("merge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153847 153851])
                            ("right" variable nil (reparse-symbol function_parameters) [153853 153858])
                            ("how" variable nil (reparse-symbol function_parameters) [153860 153863])
                            ("on" variable nil (reparse-symbol function_parameters) [153873 153875])
                            ("left_on" variable nil (reparse-symbol function_parameters) [153882 153889])
                            ("right_on" variable nil (reparse-symbol function_parameters) [153896 153904])
                            ("left_index" variable nil (reparse-symbol function_parameters) [153925 153935])
                            ("right_index" variable nil (reparse-symbol function_parameters) [153943 153954])
                            ("sort" variable nil (reparse-symbol function_parameters) [153962 153966])
                            ("suffixes" variable nil (reparse-symbol function_parameters) [153988 153996])
                            ("copy" variable nil (reparse-symbol function_parameters) [154011 154015]))                          )
                        (reparse-symbol indented_block_body) [153837 154306])
                    ("corr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154429 154433])
                            ("method" variable nil (reparse-symbol function_parameters) [154435 154441])
                            ("min_periods" variable nil (reparse-symbol function_parameters) [154453 154464]))                          
                        :documentation "
        Compute pairwise correlation of columns, excluding NA/null values

        Parameters
        ----------
        method : {'pearson', 'kendall', 'spearman'}
            * pearson : standard correlation coefficient
            * kendall : Kendall Tau correlation coefficient
            * spearman : Spearman rank correlation
        min_periods : int, optional
            Minimum number of observations required per pair of columns
            to have a valid result. Currently only available for pearson
            and spearman correlation

        Returns
        -------
        y : DataFrame
        ")
                        (reparse-symbol indented_block_body) [154420 156318])
                    ("cov" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156331 156335])
                            ("min_periods" variable nil (reparse-symbol function_parameters) [156337 156348]))                          
                        :documentation "
        Compute pairwise covariance of columns, excluding NA/null values

        Parameters
        ----------
        min_periods : int, optional
            Minimum number of observations required per pair of columns
            to have a valid result.

        Returns
        -------
        y : DataFrame

        Notes
        -----
        `y` contains the covariance matrix of the DataFrame's time series.
        The covariance is normalized by N-1 (unbiased estimator).
        ")
                        (reparse-symbol indented_block_body) [156323 157505])
                    ("corrwith" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [157523 157527])
                            ("other" variable nil (reparse-symbol function_parameters) [157529 157534])
                            ("axis" variable nil (reparse-symbol function_parameters) [157536 157540])
                            ("drop" variable nil (reparse-symbol function_parameters) [157544 157548]))                          
                        :documentation "
        Compute pairwise correlation between rows or columns of two DataFrame
        objects.

        Parameters
        ----------
        other : DataFrame
        axis : {0 or 'index', 1 or 'columns'}, default 0
            0 or 'index' to compute column-wise, 1 or 'columns' for row-wise
        drop : boolean, default False
            Drop missing indices from result, default returns union of all

        Returns
        -------
        correls : Series
        ")
                        (reparse-symbol indented_block_body) [157510 158937])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159062 159066])
                            ("axis" variable nil (reparse-symbol function_parameters) [159068 159072])
                            ("level" variable nil (reparse-symbol function_parameters) [159076 159081])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [159088 159100]))                          
                        :documentation "
        Return Series with number of non-NA/null observations over requested
        axis. Works with non-floating point data as well (detects NaN and None)

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            0 or 'index' for row-wise, 1 or 'columns' for column-wise
        level : int or level name, default None
            If the axis is a MultiIndex (hierarchical), count along a
            particular level, collapsing into a DataFrame
        numeric_only : boolean, default False
            Include only float, int, boolean data

        Returns
        -------
        count : Series (or DataFrame if level specified)
        ")
                        (reparse-symbol indented_block_body) [159052 160545])
                    ("_count_level" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160567 160571])
                            ("level" variable nil (reparse-symbol function_parameters) [160573 160578])
                            ("axis" variable nil (reparse-symbol function_parameters) [160580 160584])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [160588 160600]))                          )
                        (reparse-symbol indented_block_body) [160550 162010])
                    ("_reduce" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162027 162031])
                            ("op" variable nil (reparse-symbol function_parameters) [162033 162035])
                            ("name" variable nil (reparse-symbol function_parameters) [162037 162041])
                            ("axis" variable nil (reparse-symbol function_parameters) [162043 162047])
                            ("skipna" variable nil (reparse-symbol function_parameters) [162051 162057])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [162064 162076])
                            ("filter_type" variable nil (reparse-symbol function_parameters) [162099 162110])
                            ("kwds" variable nil (reparse-symbol function_parameters) [162117 162123]))                          )
                        (reparse-symbol indented_block_body) [162015 165020])
                    ("idxmin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165036 165040])
                            ("axis" variable nil (reparse-symbol function_parameters) [165042 165046])
                            ("skipna" variable nil (reparse-symbol function_parameters) [165050 165056]))                          
                        :documentation "
        Return index of first occurrence of minimum over requested axis.
        NA/null values are excluded.

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            0 or 'index' for row-wise, 1 or 'columns' for column-wise
        skipna : boolean, default True
            Exclude NA/null values. If an entire row/column is NA, the result
            will be NA

        Returns
        -------
        idxmin : Series

        Notes
        -----
        This method is the DataFrame version of ``ndarray.argmin``.

        See Also
        --------
        Series.idxmin
        ")
                        (reparse-symbol indented_block_body) [165025 165994])
                    ("idxmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166010 166014])
                            ("axis" variable nil (reparse-symbol function_parameters) [166016 166020])
                            ("skipna" variable nil (reparse-symbol function_parameters) [166024 166030]))                          
                        :documentation "
        Return index of first occurrence of maximum over requested axis.
        NA/null values are excluded.

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            0 or 'index' for row-wise, 1 or 'columns' for column-wise
        skipna : boolean, default True
            Exclude NA/null values. If an entire row/column is NA, the result
            will be first index.

        Returns
        -------
        idxmax : Series

        Notes
        -----
        This method is the DataFrame version of ``ndarray.argmax``.

        See Also
        --------
        Series.idxmax
        ")
                        (reparse-symbol indented_block_body) [165999 166978])
                    ("_get_agg_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167001 167005])
                            ("axis_num" variable nil (reparse-symbol function_parameters) [167007 167015]))                          
                        :documentation " let's be explict about this ")
                        (reparse-symbol indented_block_body) [166983 167264])
                    ("mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167278 167282])
                            ("axis" variable nil (reparse-symbol function_parameters) [167284 167288])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [167292 167304]))                          
                        :documentation "
        Gets the mode(s) of each element along the axis selected. Empty if nothing
        has 2+ occurrences. Adds a row for each mode per label, fills in gaps
        with nan.

        Note that there could be multiple values returned for the selected
        axis (when more than one item share the maximum frequency), which is the
        reason why a dataframe is returned. If you want to impute missing values
        with the mode in a dataframe ``df``, you can just do this:
        ``df.fillna(df.mode().iloc[0])``

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            * 0 or 'index' : get mode of each column
            * 1 or 'columns' : get mode of each row
        numeric_only : boolean, default False
            if True, only apply to numeric columns

        Returns
        -------
        modes : DataFrame (sorted)

        Examples
        --------
        >>> df = pd.DataFrame({'A': [1, 2, 1, 2, 1, 2, 3]})
        >>> df.mode()
           A
        0  1
        1  2
        ")
                        (reparse-symbol indented_block_body) [167269 168525])
                    ("quantile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [168543 168547])
                            ("q" variable nil (reparse-symbol function_parameters) [168549 168550])
                            ("axis" variable nil (reparse-symbol function_parameters) [168556 168560])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [168564 168576]))                          
                        :documentation "
        Return values at the given quantile over requested axis, a la
        numpy.percentile.

        Parameters
        ----------
        q : float or array-like, default 0.5 (50% quantile)
            0 <= q <= 1, the quantile(s) to compute
        axis : {0, 1, 'index', 'columns'} (default 0)
            0 or 'index' for row-wise, 1 or 'columns' for column-wise 


        Returns
        -------
        quantiles : Series or DataFrame
            If ``q`` is an array, a DataFrame will be returned where the
            index is ``q``, the columns are the columns of self, and the
            values are the quantiles.
            If ``q`` is a float, a Series will be returned where the
            index is the columns of self and the values are the quantiles.

        Examples
        --------

        >>> df = DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),
                          columns=['a', 'b'])
        >>> df.quantile(.1)
        a    1.3
        b    3.7
        dtype: float64
        >>> df.quantile([.1, .5])
               a     b
        0.1  1.3   3.7
        0.5  2.5  55.0
        ")
                        (reparse-symbol indented_block_body) [168530 171244])
                    ("rank" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171258 171262])
                            ("axis" variable nil (reparse-symbol function_parameters) [171264 171268])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [171272 171284])
                            ("method" variable nil (reparse-symbol function_parameters) [171291 171297])
                            ("na_option" variable nil (reparse-symbol function_parameters) [171322 171331])
                            ("ascending" variable nil (reparse-symbol function_parameters) [171340 171349])
                            ("pct" variable nil (reparse-symbol function_parameters) [171356 171359]))                          
                        :documentation "
        Compute numerical data ranks (1 through n) along axis. Equal values are
        assigned a rank that is the average of the ranks of those values

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            Ranks over columns (0) or rows (1)
        numeric_only : boolean, default None
            Include only float, int, boolean data
        method : {'average', 'min', 'max', 'first', 'dense'}
            * average: average rank of group
            * min: lowest rank in group
            * max: highest rank in group
            * first: ranks assigned in order they appear in the array
            * dense: like 'min', but rank always increases by 1 between groups
        na_option : {'keep', 'top', 'bottom'}
            * keep: leave NA values where they are
            * top: smallest rank if ascending
            * bottom: smallest rank if descending
        ascending : boolean, default True
            False for ranks by high (1) to low (N)
        pct : boolean, default False
            Computes percentage rank of data

        Returns
        -------
        ranks : DataFrame
        ")
                        (reparse-symbol indented_block_body) [171249 173360])
                    ("to_timestamp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [173382 173386])
                            ("freq" variable nil (reparse-symbol function_parameters) [173388 173392])
                            ("how" variable nil (reparse-symbol function_parameters) [173399 173402])
                            ("axis" variable nil (reparse-symbol function_parameters) [173412 173416])
                            ("copy" variable nil (reparse-symbol function_parameters) [173420 173424]))                          
                        :documentation "
        Cast to DatetimeIndex of timestamps, at *beginning* of period

        Parameters
        ----------
        freq : string, default frequency of PeriodIndex
            Desired frequency
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end
        axis : {0 or 'index', 1 or 'columns'}, default 0
            The axis to convert (the index by default)
        copy : boolean, default True
            If false then underlying input data is not copied

        Returns
        -------
        df : DataFrame with DatetimeIndex
        ")
                        (reparse-symbol indented_block_body) [173365 174561])
                    ("to_period" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [174580 174584])
                            ("freq" variable nil (reparse-symbol function_parameters) [174586 174590])
                            ("axis" variable nil (reparse-symbol function_parameters) [174597 174601])
                            ("copy" variable nil (reparse-symbol function_parameters) [174605 174609]))                          
                        :documentation "
        Convert DataFrame from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed)

        Parameters
        ----------
        freq : string, default
        axis : {0 or 'index', 1 or 'columns'}, default 0
            The axis to convert (the index by default)
        copy : boolean, default True
            If False then underlying input data is not copied

        Returns
        -------
        ts : TimeSeries with PeriodIndex
        ")
                        (reparse-symbol indented_block_body) [174566 175587])
                    ("isin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [175601 175605])
                            ("values" variable nil (reparse-symbol function_parameters) [175607 175613]))                          
                        :documentation "
        Return boolean DataFrame showing whether each element in the
        DataFrame is contained in values.

        Parameters
        ----------
        values : iterable, Series, DataFrame or dictionary
            The result will only be true at a location if all the
            labels match. If `values` is a Series, that's the index. If
            `values` is a dictionary, the keys must be the column names,
            which must match. If `values` is a DataFrame,
            then both the index and column labels must match.

        Returns
        -------

        DataFrame of booleans

        Examples
        --------
        When ``values`` is a list:

        >>> df = DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})
        >>> df.isin([1, 3, 12, 'a'])
               A      B
        0   True   True
        1  False  False
        2   True  False

        When ``values`` is a dict:

        >>> df = DataFrame({'A': [1, 2, 3], 'B': [1, 4, 7]})
        >>> df.isin({'A': [1, 3], 'B': [4, 7, 12]})
               A      B
        0   True  False  # Note that B didn't match the 1 here.
        1  False   True
        2   True   True

        When ``values`` is a Series or DataFrame:

        >>> df = DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})
        >>> other = DataFrame({'A': [1, 3, 3, 2], 'B': ['e', 'f', 'f', 'e']})
        >>> df.isin(other)
               A      B
        0   True  False
        1  False  False  # Column A in `other` has a 3, but not at index 1.
        2   True   True
        ")
                        (reparse-symbol indented_block_body) [175592 178620])
                    ("combineAdd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [178740 178744])
                            ("other" variable nil (reparse-symbol function_parameters) [178746 178751]))                          
                        :documentation "
        Add two DataFrame objects and do not propagate
        NaN values, so if for a (column, time) one frame is missing a
        value, it will default to the other frame's value (which might
        be NaN as well)

        Parameters
        ----------
        other : DataFrame

        Returns
        -------
        DataFrame
        ")
                        (reparse-symbol indented_block_body) [178725 179160])
                    ("combineMult" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [179181 179185])
                            ("other" variable nil (reparse-symbol function_parameters) [179187 179192]))                          
                        :documentation "
        Multiply two DataFrame objects and do not propagate NaN values, so if
        for a (column, time) one frame is missing a value, it will default to
        the other frame's value (which might be NaN as well)

        Parameters
        ----------
        other : DataFrame

        Returns
        -------
        DataFrame
        ")
                        (reparse-symbol indented_block_body) [179165 179598]))                  
                :type "class")
                nil [5363 179598])
            ("DataFrame" code nil nil [179600 179736])
            ("DataFrame" code nil nil [179737 179772])
            ("_EMPTY_SERIES" variable nil nil [179774 179800])
            ("_arrays_to_mgr" function
               (:documentation "
    Segregate Series based on type and coerce into matrices.
    Needs to handle a lot of exceptional cases.
    "
                :arguments 
                  ( ("arrays" variable nil (reparse-symbol function_parameters) [179821 179827])
                    ("arr_names" variable nil (reparse-symbol function_parameters) [179829 179838])
                    ("index" variable nil (reparse-symbol function_parameters) [179840 179845])
                    ("columns" variable nil (reparse-symbol function_parameters) [179847 179854])
                    ("dtype" variable nil (reparse-symbol function_parameters) [179856 179861]))                  )
                nil [179802 180422])
            ("extract_index" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [180442 180446]))              ) nil [180424 182055])
            ("_prep_ndarray" function (:arguments 
              ( ("values" variable nil (reparse-symbol function_parameters) [182075 182081])
                ("copy" variable nil (reparse-symbol function_parameters) [182083 182087]))              ) nil [182057 183055])
            ("_to_arrays" function
               (:documentation "
    Return list of arrays, columns
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [183072 183076])
                    ("columns" variable nil (reparse-symbol function_parameters) [183078 183085])
                    ("coerce_float" variable nil (reparse-symbol function_parameters) [183087 183099])
                    ("dtype" variable nil (reparse-symbol function_parameters) [183107 183112]))                  )
                nil [183057 184952])
            ("_masked_rec_array_to_mgr" function
               (:documentation " extract from a masked rec array and create the manager "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [184983 184987])
                    ("index" variable nil (reparse-symbol function_parameters) [184989 184994])
                    ("columns" variable nil (reparse-symbol function_parameters) [184996 185003])
                    ("dtype" variable nil (reparse-symbol function_parameters) [185005 185010])
                    ("copy" variable nil (reparse-symbol function_parameters) [185012 185016]))                  )
                nil [184954 186065])
            ("_reorder_arrays" function (:arguments 
              ( ("arrays" variable nil (reparse-symbol function_parameters) [186087 186093])
                ("arr_columns" variable nil (reparse-symbol function_parameters) [186095 186106])
                ("columns" variable nil (reparse-symbol function_parameters) [186108 186115]))              ) nil [186067 186505])
            ("_list_to_arrays" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [186527 186531])
                ("columns" variable nil (reparse-symbol function_parameters) [186533 186540])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [186542 186554])
                ("dtype" variable nil (reparse-symbol function_parameters) [186562 186567]))              ) nil [186507 186897])
            ("_list_of_series_to_arrays" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [186929 186933])
                ("columns" variable nil (reparse-symbol function_parameters) [186935 186942])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [186944 186956])
                ("dtype" variable nil (reparse-symbol function_parameters) [186964 186969]))              ) nil [186899 187923])
            ("_list_of_dict_to_arrays" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [187953 187957])
                ("columns" variable nil (reparse-symbol function_parameters) [187959 187966])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [187968 187980])
                ("dtype" variable nil (reparse-symbol function_parameters) [187988 187993]))              ) nil [187925 188460])
            ("_convert_object_array" function (:arguments 
              ( ("content" variable nil (reparse-symbol function_parameters) [188488 188495])
                ("columns" variable nil (reparse-symbol function_parameters) [188497 188504])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [188506 188518])
                ("dtype" variable nil (reparse-symbol function_parameters) [188526 188531]))              ) nil [188462 189241])
            ("_get_names_from_index" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [189269 189273]))              ) nil [189243 189666])
            ("_homogenize" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [189684 189688])
                ("index" variable nil (reparse-symbol function_parameters) [189690 189695])
                ("dtype" variable nil (reparse-symbol function_parameters) [189697 189702]))              ) nil [189668 190509])
            ("_from_nested_dict" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [190533 190537]))              ) nil [190511 190822])
            ("_put_str" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [190837 190838])
                ("space" variable nil (reparse-symbol function_parameters) [190840 190845]))              ) nil [190824 190891])
            ("pandas.tools.plotting" include nil nil [191002 191037])
            ("DataFrame" variable nil nil [191039 191070])
            ("DataFrame" variable nil nil [191071 191102])
            ("" code nil nil [191114 191160])
            ("boxplot" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [191173 191177])
                    ("column" variable nil (reparse-symbol function_parameters) [191179 191185])
                    ("by" variable nil (reparse-symbol function_parameters) [191192 191194])
                    ("ax" variable nil (reparse-symbol function_parameters) [191201 191203])
                    ("fontsize" variable nil (reparse-symbol function_parameters) [191210 191218])
                    ("rot" variable nil (reparse-symbol function_parameters) [191237 191240])
                    ("grid" variable nil (reparse-symbol function_parameters) [191244 191248])
                    ("figsize" variable nil (reparse-symbol function_parameters) [191255 191262])
                    ("layout" variable nil (reparse-symbol function_parameters) [191269 191275])
                    ("return_type" variable nil (reparse-symbol function_parameters) [191282 191293])
                    ("kwds" variable nil (reparse-symbol function_parameters) [191312 191318]))                  )
                nil [191161 191674])
            ("DataFrame" variable nil nil [191675 191702])
            ("ops" code nil nil [191704 191770])
            ("ops" code nil nil [191771 191843])
            ("if" code nil nil [191845 191995]))          
      :file "frame.py"
      :pointmax 191995
      :fsize 191994
      :lastmodtime '(21882 1312 200470 107000)
      :unmatched-syntax '((NAME 170283 . 170287) (IF 170315 . 170317) (ELSE 170331 . 170335) (NAME 168392 . 168396) (IF 168404 . 168406) (ELSE 168424 . 168428) (INDENT_BLOCK 162647 . 163785) (NEWLINE 162607 . 162608) (COLON 162606 . 162607) (TRY 162496 . 162499) (AS 162602 . 162604) (NAME 158755 . 158760) (IF 158765 . 158767) (ELSE 158778 . 158782) (NAME 149182 . 149187) (IF 149195 . 149197) (ELSE 149217 . 149221) (INDENT_BLOCK 144894 . 145212) (NEWLINE 144893 . 144894) (COLON 144892 . 144893) (TRY 144722 . 144725) (AS 144888 . 144890) (NAME 143530 . 143535) (IF 143545 . 143547) (ELSE 143568 . 143572) (NAME 129840 . 129848) (IF 129860 . 129862) (ELSE 129884 . 129888) (NAME 129777 . 129785) (IF 129797 . 129799) (ELSE 129821 . 129825) (NAME 117728 . 117730) (IF 117741 . 117743) (ELSE 117754 . 117758) (NAME 104777 . 104781) (IF 104792 . 104794) (ELSE 104815 . 104819) (INDENT_BLOCK 88839 . 89083) (NEWLINE 88800 . 88801) (COLON 88799 . 88800) (TRY 88696 . 88699) (AS 88795 . 88797) (INDENT_BLOCK 15169 . 15345) (NEWLINE 15168 . 15169) (COLON 15167 . 15168) (TRY 15072 . 15075) (AS 15160 . 15162) (INDENT_BLOCK 10671 . 10853) (NEWLINE 10670 . 10671) (COLON 10669 . 10670) (TRY 10556 . 10559) (AS 10665 . 10667) (NAME 170283 . 170287) (IF 170315 . 170317) (ELSE 170331 . 170335) (NAME 168392 . 168396) (IF 168404 . 168406) (ELSE 168424 . 168428) (INDENT_BLOCK 162647 . 163785) (NEWLINE 162607 . 162608) (COLON 162606 . 162607) (TRY 162496 . 162499) (AS 162602 . 162604) (NAME 158755 . 158760) (IF 158765 . 158767) (ELSE 158778 . 158782) (NAME 149182 . 149187) (IF 149195 . 149197) (ELSE 149217 . 149221) (INDENT_BLOCK 144894 . 145212) (NEWLINE 144893 . 144894) (COLON 144892 . 144893) (TRY 144722 . 144725) (AS 144888 . 144890) (NAME 143530 . 143535) (IF 143545 . 143547) (ELSE 143568 . 143572) (NAME 129840 . 129848) (IF 129860 . 129862) (ELSE 129884 . 129888) (NAME 129777 . 129785) (IF 129797 . 129799) (ELSE 129821 . 129825) (NAME 117728 . 117730) (IF 117741 . 117743) (ELSE 117754 . 117758) (NAME 104777 . 104781) (IF 104792 . 104794) (ELSE 104815 . 104819) (INDENT_BLOCK 88839 . 89083) (NEWLINE 88800 . 88801) (COLON 88799 . 88800) (TRY 88696 . 88699) (AS 88795 . 88797) (INDENT_BLOCK 15169 . 15345) (NEWLINE 15168 . 15169) (COLON 15167 . 15168) (TRY 15072 . 15075) (AS 15160 . 15162) (INDENT_BLOCK 10671 . 10853) (NEWLINE 10670 . 10671) (COLON 10669 . 10670) (TRY 10556 . 10559) (AS 10665 . 10667))))
  :file "!home!amit!Drive!projects!git-cloned!pandas!pandas!core!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
