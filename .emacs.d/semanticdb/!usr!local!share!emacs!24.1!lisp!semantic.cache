;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "subr.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("custom-declare-variable-list" variable nil nil [924 1118])
            ("custom-declare-variable-early" function (:arguments ("arguments")) nil [1211 1351])
            ("declare-function" function (:arguments ("fn" "file" "arglist" "fileonly")) nil [1353 2870])
            ("defalias" code nil nil [2899 2920])
            ("noreturn" function (:arguments ("form")) nil [2922 3104])
            ("1value" function (:arguments ("form")) nil [3106 3322])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3324 3784])
            ("lambda" function (:arguments ("cdr")) nil [3786 4711])
            ("apply-partially" function (:arguments ("fun" "args")) nil [4713 5128])
            ("if" code nil nil [5130 5971])
            ("when" function (:arguments ("cond" "body")) nil [5973 6261])
            ("unless" function (:arguments ("cond" "body")) nil [6263 6549])
            ("if" code nil nil [6551 9867])
            ("ignore-errors" function (:arguments ("body")) nil [9869 10087])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [10118 10266])
            ("error" function (:arguments ("args")) nil [10323 10652])
            ("set-advertised-calling-convention" code nil nil [10653 10723])
            ("frame-configuration-p" function (:arguments ("object")) nil [10837 11092])
            ("caar" function (:arguments ("x")) nil [11117 11188])
            ("cadr" function (:arguments ("x")) nil [11190 11261])
            ("cdar" function (:arguments ("x")) nil [11263 11334])
            ("cddr" function (:arguments ("x")) nil [11336 11407])
            ("last" function (:arguments ("list" "n")) nil [11409 11826])
            ("butlast" function (:arguments ("list" "n")) nil [11828 11989])
            ("nbutlast" function (:arguments ("list" "n")) nil [11991 12219])
            ("delete-dups" function (:arguments ("list")) nil [12221 12574])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [12576 14400])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [14402 15151])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [15191 15991])
            ("make-obsolete" code nil nil [15993 16048])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [16049 16328])
            ("make-obsolete" code nil nil [16330 16395])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [16396 16621])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [16623 17058])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [17060 17544])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [17546 18039])
            ("remove" function (:arguments ("elt" "seq")) nil [18041 18394])
            ("remq" function (:arguments ("elt" "list")) nil [18396 18727])
            ("kbd" function (:arguments ("keys")) nil [18752 18957])
            ("undefined" function (:user-visible-flag t) nil [18959 19057])
            ("put" code nil nil [19152 19187])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [19189 19753])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [19755 20407])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [20409 22470])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [22472 23152])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [23154 23624])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [23678 24278])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [24280 24746])
            ("keymap-canonicalize" function (:arguments ("map")) nil [24748 26651])
            ("put" code nil nil [26653 26710])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [26712 27078])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [27109 27855])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [27857 28661])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [28663 28859])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [28861 29090])
            ("key-substitution-in-progress" variable nil nil [29146 29239])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [29241 30626])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [30628 32293])
            ("global-map" variable nil nil [32442 32616])
            ("esc-map" variable nil nil [32618 32758])
            ("ctl-x-map" variable nil nil [32760 32895])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [32897 32975])
            ("defalias" code nil nil [32976 33014])
            ("define-key" code nil nil [33015 33057])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [33059 33131])
            ("defalias" code nil nil [33132 33170])
            ("define-key" code nil nil [33171 33213])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [33253 33308])
            ("listify-key-sequence" function (:arguments ("key")) nil [33310 33548])
            ("eventp" function (:arguments ("obj")) nil [33550 33980])
            ("event-modifiers" function (:arguments ("event")) nil [33982 35276])
            ("event-basic-type" function (:arguments ("event")) nil [35278 36046])
            ("mouse-movement-p" function (:arguments ("object")) nil [36048 36181])
            ("mouse-event-p" function (:arguments ("object")) nil [36183 36401])
            ("event-start" function (:arguments ("event")) nil [36403 37108])
            ("event-end" function (:arguments ("event")) nil [37110 37924])
            ("event-click-count" function (:arguments ("event")) nil [37926 38136])
            ("posn-window" function (:arguments ("position")) nil [38193 38375])
            ("posn-area" function (:arguments ("position")) nil [38377 38701])
            ("posn-point" function (:arguments ("position")) nil [38703 38978])
            ("posn-set-point" function (:arguments ("position")) nil [38980 39300])
            ("posn-x-y" function (:arguments ("position")) nil [39302 39555])
            ("declare-function" code nil nil [39557 39623])
            ("posn-col-row" function (:arguments ("position")) nil [39625 41171])
            ("posn-actual-col-row" function (:arguments ("position")) nil [41173 41607])
            ("posn-timestamp" function (:arguments ("position")) nil [41609 41797])
            ("posn-string" function (:arguments ("position")) nil [41799 42051])
            ("posn-image" function (:arguments ("position")) nil [42053 42293])
            ("posn-object" function (:arguments ("position")) nil [42295 42664])
            ("posn-object-x-y" function (:arguments ("position")) nil [42666 42953])
            ("posn-object-width-height" function (:arguments ("position")) nil [42955 43215])
            ("define-obsolete-function-alias" code nil nil [43258 43323])
            ("define-obsolete-function-alias" code nil nil [43324 43397])
            ("define-obsolete-function-alias" code nil nil [43398 43462])
            ("define-obsolete-function-alias" code nil nil [43463 43534])
            ("define-obsolete-function-alias" code nil nil [43535 43608])
            ("define-obsolete-function-alias" code nil nil [43609 43681])
            ("make-obsolete" code nil nil [43683 43749])
            ("insert-string" function (:arguments ("args")) nil [43751 44032])
            ("make-obsolete" code nil nil [44033 44078])
            ("makehash" function (:arguments ("test")) nil [44080 44152])
            ("make-obsolete" code nil nil [44153 44202])
            ("defalias" code nil nil [44250 44284])
            ("make-obsolete" code nil nil [44285 44339])
            ("defalias" code nil nil [44340 44376])
            ("make-obsolete" code nil nil [44377 44433])
            ("make-obsolete" code nil nil [44434 44541])
            ("make-obsolete" code nil nil [44542 44603])
            ("set-advertised-calling-convention" code nil nil [44604 44678])
            ("set-advertised-calling-convention" code nil nil [44679 44780])
            ("set-advertised-calling-convention" code nil nil [44781 44849])
            ("make-obsolete-variable" code nil nil [45254 45329])
            ("make-obsolete-variable" code nil nil [45330 45409])
            ("make-obsolete-variable" code nil nil [45410 45477])
            ("make-obsolete-variable" code nil nil [45478 45543])
            ("make-obsolete-variable" code nil nil [45544 45605])
            ("make-obsolete-variable" code nil nil [45606 45677])
            ("make-obsolete-variable" code nil nil [45678 45743])
            ("make-obsolete-variable" code nil nil [45744 45805])
            ("make-obsolete-variable" code nil nil [45806 45881])
            ("make-obsolete-variable" code nil nil [45882 45959])
            ("make-obsolete-variable" code nil nil [45960 46039])
            ("make-obsolete-variable" code nil nil [46040 46117])
            ("make-obsolete-variable" code nil nil [46118 46197])
            ("make-obsolete-variable" code nil nil [46198 46287])
            ("make-obsolete-variable" code nil nil [46288 46363])
            ("make-obsolete-variable" code nil nil [46364 46445])
            ("make-obsolete-variable" code nil nil [46446 46529])
            ("make-obsolete-variable" code nil nil [46530 46625])
            ("make-obsolete-variable" code nil nil [46626 46713])
            ("make-obsolete-variable" code nil nil [46714 46795])
            ("make-obsolete-variable" code nil nil [46796 46883])
            ("make-obsolete-variable" code nil nil [46884 46975])
            ("make-obsolete-variable" code nil nil [46976 47041])
            ("make-obsolete-variable" code nil nil [47042 47107])
            ("make-obsolete-variable" code nil nil [47108 47183])
            ("make-obsolete-variable" code nil nil [47184 47287])
            ("make-obsolete-variable" code nil nil [47288 47381])
            ("make-obsolete-variable" code nil nil [47382 47445])
            ("make-obsolete-variable" code nil nil [47446 47586])
            ("make-obsolete-variable" code nil nil [47588 47652])
            ("make-obsolete-variable" code nil nil [47653 47736])
            ("make-obsolete-variable" code nil nil [47737 47809])
            ("make-obsolete-variable" code nil nil [47810 47886])
            ("make-obsolete" code nil nil [47887 47943])
            ("make-obsolete" code nil nil [47944 48004])
            ("make-obsolete" code nil nil [48006 48060])
            ("make-obsolete" code nil nil [48061 48117])
            ("make-obsolete-variable" code nil nil [48119 48215])
            ("make-obsolete-variable" code nil nil [48216 48418])
            ("define-obsolete-variable-alias" code nil nil [48457 48544])
            ("defvaralias" code nil nil [48546 48611])
            ("make-obsolete-variable" code nil nil [48612 48698])
            ("defvaralias" code nil nil [48699 48764])
            ("make-obsolete-variable" code nil nil [48765 48851])
            ("make-obsolete-variable" code nil nil [49097 49161])
            ("defvaralias" code nil nil [49163 49220])
            ("define-obsolete-variable-alias" code nil nil [49445 49531])
            ("define-obsolete-variable-alias" code nil nil [49532 49622])
            ("defalias" code nil nil [49696 49740])
            ("defalias" code nil nil [49741 49785])
            ("defalias" code nil nil [49786 49819])
            ("defalias" code nil nil [49820 49853])
            ("defalias" code nil nil [49854 49889])
            ("defalias" code nil nil [49890 49916])
            ("defalias" code nil nil [49917 49943])
            ("defalias" code nil nil [49944 49966])
            ("defalias" code nil nil [49992 50031])
            ("defalias" code nil nil [50032 50086])
            ("defalias" code nil nil [50087 50157])
            ("defalias" code nil nil [50158 50230])
            ("defalias" code nil nil [50231 50274])
            ("defalias" code nil nil [50275 50319])
            ("defalias" code nil nil [50320 50353])
            ("defalias" code nil nil [50354 50387])
            ("defalias" code nil nil [50419 50462])
            ("defalias" code nil nil [50463 50512])
            ("defalias" code nil nil [50514 50567])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [50606 52742])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [52744 54412])
            ("letrec" function (:arguments ("binders" "body")) nil [54414 55043])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [55045 57988])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [57990 59293])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [59296 60615])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [60617 61814])
            ("delay-mode-hooks" variable nil nil [61836 61930])
            ("delayed-mode-hooks" variable nil nil [61931 62012])
            ("make-variable-buffer-local" code nil nil [62013 62061])
            ("put" code nil nil [62062 62104])
            ("change-major-mode-after-body-hook" variable nil nil [62106 62220])
            ("after-change-major-mode-hook" variable nil nil [62222 62324])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [62326 63209])
            ("delay-mode-hooks" function (:arguments ("body")) nil [63211 63612])
            ("derived-mode-p" function (:arguments ("modes")) nil [63673 63986])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [64177 64370])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [64372 67057])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [67078 68316])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [68318 69724])
            ("load-history-regexp" function (:arguments ("file")) nil [69765 70401])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [70403 70839])
            ("put" code nil nil [70841 70887])
            ("eval-after-load" function (:arguments ("file" "form")) nil [70888 73840])
            ("after-load-functions" variable nil nil [73842 74015])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [74017 75017])
            ("eval-next-after-load" function (:arguments ("file")) nil [75019 75273])
            ("make-obsolete" code nil nil [75274 75335])
            ("display-delayed-warnings" function nil nil [75337 75604])
            ("collapse-delayed-warnings" function nil nil [75606 76285])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [76415 76755])
            ("process-lines" function (:arguments ("program" "args")) nil [76780 77385])
            ("process-live-p" function (:arguments ("process")) nil [77387 77627])
            ("make-obsolete" code nil nil [77647 77772])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [77773 78117])
            ("process-kill-buffer-query-function" function nil nil [78119 78538])
            ("add-hook" code nil nil [78540 78615])
            ("process-get" function (:arguments ("process" "propname")) nil [78646 78858])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [78860 79099])
            ("read-quoted-char-radix" variable
               (:user-visible-flag t
                :default-value 8)
                nil [79139 79285])
            ("custom-declare-variable-early" code nil nil [79287 79530])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [79532 79582])
            ("read-key-delay" variable (:default-value 0.01) nil [79584 79612])
            ("read-key" function (:arguments ("prompt")) nil [79661 82099])
            ("read-quoted-char" function (:arguments ("prompt")) nil [82101 84696])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [84698 87396])
            ("read-number" function (:arguments ("prompt" "default")) nil [87460 88326])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [88328 89955])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [89957 91464])
            ("set-advertised-calling-convention" code nil nil [91465 91544])
            ("y-or-n-p" function (:arguments ("prompt")) nil [91546 94422])
            ("atomic-change-group" function (:arguments ("body")) nil [94453 95659])
            ("prepare-change-group" function (:arguments ("buffer")) nil [95661 97137])
            ("activate-change-group" function (:arguments ("handle")) nil [97139 97377])
            ("accept-change-group" function (:arguments ("handle")) nil [97379 97664])
            ("cancel-change-group" function (:arguments ("handle")) nil [97666 98837])
            ("defalias" code nil nil [98895 98946])
            ("force-mode-line-update" function (:arguments ("all")) nil [98948 99322])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [99324 100777])
            ("copy-overlay" function (:arguments ("o")) nil [100806 101380])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [101382 102390])
            ("suspend-hook" variable nil nil [102412 102496])
            ("suspend-resume-hook" variable nil nil [102498 102596])
            ("temp-buffer-show-hook" variable nil nil [102598 102814])
            ("temp-buffer-setup-hook" variable nil nil [102816 103047])
            ("buffer-file-type" variable nil nil [103153 103403])
            ("put" code nil nil [103512 103565])
            ("put" code nil nil [103566 103637])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [103639 104014])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [104016 105008])
            ("find-tag-default" function nil nil [105041 105991])
            ("play-sound" function (:arguments ("sound")) nil [105993 106812])
            ("declare-function" code nil nil [106814 106870])
            ("shell-quote-argument" function (:arguments ("argument")) nil [106872 109017])
            ("string-or-null-p" function (:arguments ("object")) nil [109019 109156])
            ("booleanp" function (:arguments ("object")) nil [109158 109316])
            ("field-at-pos" function (:arguments ("pos")) nil [109318 109588])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [109590 109953])
            ("yank-excluded-properties" variable nil nil [110004 110037])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [110039 111384])
            ("yank-undo-function" variable nil nil [111386 111413])
            ("insert-for-yank" function (:arguments ("string")) nil [111415 111774])
            ("insert-for-yank-1" function (:arguments ("string")) nil [111776 114713])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [114715 115200])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [115202 115861])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [115899 116812])
            ("set-advertised-calling-convention" code nil nil [116813 116942])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [116944 117363])
            ("set-advertised-calling-convention" code nil nil [117364 117498])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [117500 118945])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [118947 119391])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [119446 119834])
            ("with-selected-window" function (:arguments ("window" "body")) nil [119836 121434])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [121436 122177])
            ("save-window-excursion" function (:arguments ("body")) nil [122179 122998])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [123000 125151])
            ("with-temp-file" function (:arguments ("file" "body")) nil [125153 125848])
            ("with-temp-message" function (:arguments ("message" "body")) nil [125850 126777])
            ("with-temp-buffer" function (:arguments ("body")) nil [126779 127338])
            ("with-silent-modifications" function (:arguments ("body")) nil [127340 128536])
            ("with-output-to-string" function (:arguments ("body")) nil [128538 128983])
            ("with-local-quit" function (:arguments ("body")) nil [128985 129740])
            ("while-no-input" function (:arguments ("body")) nil [129742 130242])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [130244 130749])
            ("define-obsolete-function-alias" code nil nil [130751 130846])
            ("with-demoted-errors" function (:arguments ("body")) nil [130848 131344])
            ("combine-after-change-calls" function (:arguments ("body")) nil [131346 132041])
            ("with-case-table" function (:arguments ("table" "body")) nil [132043 132564])
            ("save-match-data-internal" variable nil nil [132597 132630])
            ("save-match-data" function (:arguments ("body")) nil [132888 133568])
            ("match-string" function (:arguments ("num" "string")) nil [133570 134215])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [134217 134941])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [134944 135593])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [135596 136680])
            ("looking-at-p" function (:arguments ("regexp")) nil [136682 136860])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [136862 137082])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [137084 138994])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [139016 139369])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls")) nil [139631 141532])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [141534 142095])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [142097 142733])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [142767 143171])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [143173 145753])
            ("string-prefix-p" function (:arguments ("str1" "str2" "ignore-case")) nil [145756 146055])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [146057 146840])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [146868 147211])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [147213 147437])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [147461 148097])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [148099 148419])
            ("syntax-after" function (:arguments ("pos")) nil [148421 148782])
            ("syntax-class" function (:arguments ("syntax")) nil [148784 148952])
            ("text-clone-maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [148973 151003])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [151005 153192])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [153300 154878])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [155462 156229])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [156231 158076])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [158078 158577])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [158579 158696])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [158698 160404])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [160406 160561])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [160563 161667])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [161704 161863])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-_+ ]?alpha$" . -3) ("^[-_+]$" . -3) ("^[-_+ ]cvs$" . -3) ("^[-_+ ]?beta$" . -2) ("^[-_+ ]?\\(pre\\|rcc\\)$" . -1))))
                nil [161866 163091])
            ("version-to-list" function (:arguments ("ver")) nil [163094 165432])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [165435 166266])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [166269 167068])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [167071 167856])
            ("version-list-not-zero" function (:arguments ("lst")) nil [167858 168168])
            ("version<" function (:arguments ("v1" "v2")) nil [168171 168627])
            ("version<=" function (:arguments ("v1" "v2")) nil [168630 169100])
            ("version=" function (:arguments ("v1" "v2")) nil [169102 169548])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [169562 169624])
            ("when" code nil nil [169786 169911]))          
      :file "subr.el.gz"
      :pointmax 169935
      :fsize 50557
      :lastmodtime '(20400 62402)
      :unmatched-syntax nil)
    (semanticdb-table "files-x.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("read-file-local-variable" function (:arguments ("prompt")) nil [1138 1923])
            ("read-file-local-variable-value" function (:arguments ("variable")) nil [1925 3396])
            ("read-file-local-variable-mode" function nil nil [3398 4133])
            ("modify-file-local-variable" function (:arguments ("variable" "value" "op")) nil [4135 7359])
            ("add-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value"))
                nil [7376 8062])
            ("delete-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [8079 8336])
            ("modify-file-local-variable-prop-line" function (:arguments ("variable" "value" "op")) nil [8338 11828])
            ("add-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable" "value"))
                nil [11845 12436])
            ("delete-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [12453 12722])
            ("auto-insert" variable nil nil [12724 12744])
            ("modify-dir-local-variable" function (:arguments ("mode" "variable" "value" "op")) nil [12767 15848])
            ("add-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable" "value"))
                nil [15865 16273])
            ("delete-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable"))
                nil [16290 16595])
            ("copy-file-locals-to-dir-locals" function (:user-visible-flag t) nil [16612 16880])
            ("copy-dir-locals-to-file-locals" function (:user-visible-flag t) nil [16897 17111])
            ("copy-dir-locals-to-file-locals-prop-line" function (:user-visible-flag t) nil [17128 17350])
            ("files-x" package nil nil [17355 17373]))          
      :file "files-x.el.gz"
      :pointmax 17400
      :fsize 4348
      :lastmodtime '(20400 62402)
      :unmatched-syntax nil)
    (semanticdb-table "abbrev.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1030 1043])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1046 1160])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1162 1352])
            ("only-global-abbrevs" variable nil nil [1354 1605])
            ("define-minor-mode" code nil nil [1607 2035])
            ("put" code nil nil [2037 2086])
            ("edit-abbrevs-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote abbrev-edit-save-buffer)) (define-key map "" (quote abbrev-edit-save-to-file)) (define-key map "" (quote edit-abbrevs-redefine)) map)) nil [2090 2365])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2367 2538])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2540 2875])
            ("insert-abbrevs" function (:user-visible-flag t) nil [2877 3163])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3165 3463])
            ("abbrev-table-name" function (:arguments ("table")) nil [3465 3751])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3753 4440])
            ("edit-abbrevs-mode" function (:user-visible-flag t) nil [4442 4746])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4748 5410])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5412 5607])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5609 6607])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [6609 7126])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7128 7453])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7455 9214])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9216 9536])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [9538 9771])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9775 10315])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10317 10807])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [10809 11402])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11404 11835])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11837 12180])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12182 12793])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12795 13456])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13458 14145])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [14171 14324])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [14326 14551])
            ("defalias" code nil nil [14553 14642])
            ("defalias" code nil nil [14644 14813])
            ("abbrev-table-name-list" variable (:default-value (quote (fundamental-mode-abbrev-table global-abbrev-table))) nil [14869 15010])
            ("make-abbrev-table" function (:arguments ("props")) nil [15012 15803])
            ("abbrev-table-p" function (:arguments ("object")) nil [15805 15974])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [15976 16440])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [16442 16689])
            ("abbrev-minor-mode-table-alist" variable nil nil [16691 16946])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [16948 17223])
            ("abbrevs-changed" variable nil nil [17225 17373])
            ("abbrev-all-caps" variable nil nil [17375 17516])
            ("abbrev-start-location" variable nil nil [17518 17720])
            ("abbrev-start-location-buffer" variable nil nil [17722 17900])
            ("last-abbrev" variable nil nil [17902 17999])
            ("last-abbrev-text" variable nil nil [18001 18131])
            ("last-abbrev-location" variable nil nil [18133 18223])
            ("pre-abbrev-expand-hook" variable nil nil [18400 18675])
            ("make-obsolete-variable" code nil nil [18676 18756])
            ("clear-abbrev-table" function (:arguments ("table")) nil [18758 19377])
            ("define-abbrev" function (:arguments ("table" "name" "expansion" "hook" "props")) nil [19379 22411])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [22413 23153])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23155 23513])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23515 23937])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [23939 24986])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [24989 26323])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [26326 26586])
            ("abbrev--before-point" function nil nil [26589 29172])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [29174 32218])
            ("abbrev-expand-functions" variable nil nil [32220 32470])
            ("expand-abbrev" function (:user-visible-flag t) nil [32472 34028])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [34030 34928])
            ("abbrev--write" function (:arguments ("sym")) nil [34930 35385])
            ("abbrev--describe" function (:arguments ("sym")) nil [35387 35781])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [35783 36824])
            ("put" code nil nil [36826 36870])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [36871 38875])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [38877 39693])
            ("abbrev" package nil nil [39695 39712]))          
      :file "abbrev.el.gz"
      :pointmax 39738
      :fsize 11656
      :lastmodtime '(20400 62402)
      :unmatched-syntax '((close-paren 1043 . 1044) (symbol 1012 . 1029) (open-paren 1011 . 1012)))
    (semanticdb-table "files.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1094 1107])
            ("font-lock-keywords" variable nil nil [1110 1137])
            ("backup" customgroup (:user-visible-flag t) nil [1139 1210])
            ("find-file" customgroup (:user-visible-flag t) nil [1212 1271])
            ("delete-auto-save-files" variable (:default-value t) nil [1274 1524])
            ("directory-abbrev-alist" variable nil nil [1526 2491])
            ("make-backup-files" variable (:default-value t) nil [2493 3416])
            ("backup-inhibited" variable nil nil [3517 3730])
            ("put" code nil nil [3731 3773])
            ("backup-by-copying" variable nil nil [3775 3953])
            ("backup-by-copying-when-linked" variable nil nil [3955 4248])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4250 4738])
            ("put" code nil nil [4739 4796])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4798 5421])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5423 5642])
            ("buffer-offer-save" variable nil nil [5644 5863])
            ("make-variable-buffer-local" code nil nil [5864 5911])
            ("put" code nil nil [5912 5955])
            ("find-file-existing-other-name" variable (:default-value t) nil [5957 6250])
            ("find-file-visit-truename" variable nil nil [6252 6505])
            ("put" code nil nil [6506 6568])
            ("revert-without-query" variable nil nil [6570 6935])
            ("buffer-file-number" variable nil nil [6937 7206])
            ("make-variable-buffer-local" code nil nil [7207 7255])
            ("put" code nil nil [7256 7300])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7302 7447])
            ("buffer-file-read-only" variable nil nil [7449 7539])
            ("make-variable-buffer-local" code nil nil [7540 7591])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7593 8037])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8105 8174])
            ("declare-function" code nil nil [8176 8226])
            ("declare-function" code nil nil [8227 8276])
            ("declare-function" code nil nil [8277 8363])
            ("declare-function" code nil nil [8364 8409])
            ("declare-function" code nil nil [8410 8482])
            ("declare-function" code nil nil [8483 8539])
            ("declare-function" code nil nil [8540 8586])
            ("declare-function" code nil nil [8587 8646])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8648 9321])
            ("file-precious-flag" variable nil nil [9323 10163])
            ("break-hardlink-on-save" variable nil nil [10165 10862])
            ("version-control" variable nil nil [10864 11234])
            ("put" code nil nil [11235 11331])
            ("dired-kept-versions" variable (:default-value 2) nil [11333 11473])
            ("delete-old-versions" variable nil nil [11475 11741])
            ("kept-old-versions" variable (:default-value 2) nil [11743 11882])
            ("put" code nil nil [11883 11938])
            ("kept-new-versions" variable (:default-value 2) nil [11940 12117])
            ("put" code nil nil [12118 12173])
            ("require-final-newline" variable nil nil [12175 12928])
            ("mode-require-final-newline" variable (:default-value t) nil [12930 14065])
            ("auto-save-default" variable (:default-value t) nil [14067 14209])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14211 15639])
            ("save-abbrevs" variable (:default-value t) nil [15641 15852])
            ("find-file-run-dired" variable (:default-value t) nil [15854 16051])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16053 16381])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16442 16770])
            ("find-file-not-found-functions" variable nil nil [16878 17179])
            ("define-obsolete-variable-alias" code nil nil [17180 17281])
            ("define-obsolete-variable-alias" code nil nil [17379 17451])
            ("find-file-hook" variable nil nil [17452 17729])
            ("write-file-functions" variable nil nil [17731 18512])
            ("put" code nil nil [18513 18559])
            ("define-obsolete-variable-alias" code nil nil [18560 18639])
            ("local-write-file-hooks" variable nil nil [18641 18676])
            ("make-variable-buffer-local" code nil nil [18677 18729])
            ("put" code nil nil [18730 18778])
            ("make-obsolete-variable" code nil nil [18779 18856])
            ("write-contents-functions" variable nil nil [18858 19614])
            ("make-variable-buffer-local" code nil nil [19615 19669])
            ("define-obsolete-variable-alias" code nil nil [19670 19761])
            ("enable-local-variables" variable (:default-value t) nil [19763 21015])
            ("local-enable-local-variables" variable (:default-value t) nil [22378 22763])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [22765 23156])
            ("or" code nil nil [23221 23284])
            ("or" code nil nil [23285 23352])
            ("or" code nil nil [23353 23420])
            ("view-read-only" variable nil nil [23422 23774])
            ("file-name-history" variable nil nil [23776 23959])
            ("put" code nil nil [23962 24016])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [24017 24623])
            ("declare-function" code nil nil [24625 24697])
            ("declare-function" code nil nil [24698 24770])
            ("convert-standard-filename" function (:arguments ("filename")) nil [24772 26025])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [26027 27148])
            ("pwd" function (:user-visible-flag t) nil [27152 27271])
            ("cd-path" variable nil nil [27273 27403])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27405 28084])
            ("cd-absolute" function (:arguments ("dir")) nil [28086 28981])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [28983 30873])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [30875 31186])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [31188 32586])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [32588 35566])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [35568 35917])
            ("make-obsolete" code nil nil [35918 35994])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [35996 36600])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [38153 40393])
            ("executable-find" function (:arguments ("command")) nil [40396 40704])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [40706 41303])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [41305 43059])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [43061 44286])
            ("file-local-copy" function (:arguments ("file")) nil [44288 44677])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [44679 50419])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [50421 51824])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [51956 53073])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [53075 54666])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [54668 56905])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [56908 57521])
            ("confirm-nonexistent-file-or-buffer" function nil nil [57523 57964])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [57966 58792])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [58794 58908])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [58910 60154])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [60156 61086])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [61088 62012])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [62014 62449])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [62451 63152])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63154 63925])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63927 64693])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [64695 65644])
            ("kill-buffer-hook" variable nil nil [65646 65671])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65690 68786])
            ("create-file-buffer" function (:arguments ("filename")) nil [68789 69331])
            ("generate-new-buffer" function (:arguments ("name")) nil [69333 69538])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [69540 69692])
            ("abbreviated-home-dir" variable nil nil [69694 69801])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [69803 72154])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [72156 74083])
            ("find-file-wildcards" variable (:default-value t) nil [74086 74333])
            ("find-file-suppress-same-file-warnings" variable nil nil [74335 74661])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [74663 74942])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [74944 75418])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [75420 82379])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [82381 84917])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [84920 86159])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [86161 86858])
            ("insert-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [86860 87281])
            ("find-file-literally" variable nil nil [87283 87490])
            ("put" code nil nil [87491 87536])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [87538 88632])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [88635 91939])
            ("report-errors" function (:arguments ("format" "body")) nil [91941 92421])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [92423 94176])
            ("auto-mode-case-fold" variable (:default-value t) nil [94178 94616])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ck]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_profile\\|z?login\\|bash_login\\|z?logout\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_logout\\|shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.\\(sx[dmicw]\\|od[fgpst]\\|oxt\\)\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js\\'" . js-mode) ("\\.json\\'" . js-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("[]>:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gnokiirc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [94618 105625])
            ("put" code nil nil [105626 105672])
            ("conf-mode-maybe" function nil nil [105674 105924])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("perl" . perl-mode) ("perl5" . perl-mode) ("miniperl" . perl-mode) ("wish" . tcl-mode) ("wishx" . tcl-mode) ("tcl" . tcl-mode) ("tclsh" . tcl-mode) ("scm" . scheme-mode) ("ash" . sh-mode) ("bash" . sh-mode) ("bash2" . sh-mode) ("csh" . sh-mode) ("dtksh" . sh-mode) ("es" . sh-mode) ("itcsh" . sh-mode) ("jsh" . sh-mode) ("ksh" . sh-mode) ("oash" . sh-mode) ("pdksh" . sh-mode) ("rbash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh" . sh-mode) ("sh5" . sh-mode) ("tcsh" . sh-mode) ("wksh" . sh-mode) ("wsh" . sh-mode) ("zsh" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [105926 107507])
            ("define-obsolete-variable-alias" code nil nil [107509 107622])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [107821 108639])
            ("define-obsolete-variable-alias" code nil nil [108641 108751])
            ("inhibit-local-variables-suffixes" variable nil nil [108753 109003])
            ("inhibit-local-variables-p" function nil nil [109048 109729])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [109731 110249])
            ("magic-mode-alist" variable nil nil [110251 110785])
            ("put" code nil nil [110786 110833])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [110835 112376])
            ("put" code nil nil [112377 112433])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [112435 112577])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [112579 118765])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [119018 119425])
            ("set-auto-mode-1" function nil nil [119427 120934])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [120972 121178])
            ("put" code nil nil [121179 121233])
            ("hack-local-variables-hook" variable nil nil [121235 121468])
            ("safe-local-variable-values" variable nil nil [121470 121730])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp))))) nil [121732 122321])
            ("mapc" code nil nil [122349 122966])
            ("dolist" code nil nil [123608 124296])
            ("put" code nil nil [124298 124412])
            ("put" code nil nil [124414 124460])
            ("file-local-variables-alist" variable nil nil [124462 124817])
            ("make-variable-buffer-local" code nil nil [124818 124874])
            ("put" code nil nil [124875 124927])
            ("dir-local-variables-alist" variable nil nil [124929 125311])
            ("make-variable-buffer-local" code nil nil [125312 125367])
            ("before-hack-local-variables-hook" variable nil nil [125369 125787])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [125789 128398])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [128400 130778])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [130780 133085])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [133087 138542])
            ("hack-local-variables-apply" function nil nil [138544 139345])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [139347 140035])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [140037 140940])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [140942 141046])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [141048 141236])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [141238 143058])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [143060 144032])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [144098 144213])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [144215 144795])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [144797 144930])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [144932 145577])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [145579 147590])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [147592 148356])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [148358 149821])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [149823 150005])
            ("dir-locals-find-file" function (:arguments ("file")) nil [150007 153071])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [153073 153945])
            ("hack-dir-local-variables" function nil nil [153947 155126])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [155128 155434])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [155438 155875])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [155877 160854])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [160856 162733])
            ("backup-buffer" function nil nil [162736 166662])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "context")) nil [166664 167789])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [167791 168084])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [168086 168785])
            ("file-ownership-preserved-p" function (:arguments ("file")) nil [168787 169586])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [169588 170283])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [170285 171102])
            ("make-backup-file-name-function" variable nil nil [171104 171590])
            ("backup-directory-alist" variable nil nil [171592 172629])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [172631 173499])
            ("make-backup-file-name" function (:arguments ("file")) nil [173501 174518])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [174520 176584])
            ("backup-file-name-p" function (:arguments ("file")) nil [176586 176847])
            ("backup-extract-version-start" variable nil nil [176849 176886])
            ("backup-extract-version" function (:arguments ("fn")) nil [177061 177513])
            ("find-backup-file-name" function (:arguments ("fn")) nil [177515 179636])
            ("file-nlinks" function (:arguments ("filename")) nil [179638 179755])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [181731 184445])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [184448 186848])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [186850 187421])
            ("auto-save-hook" variable nil nil [187423 187495])
            ("before-save-hook" variable nil nil [187497 187667])
            ("after-save-hook" variable nil nil [187669 187860])
            ("save-buffer-coding-system" variable nil nil [187862 188234])
            ("make-variable-buffer-local" code nil nil [188236 188291])
            ("put" code nil nil [188292 188343])
            ("basic-save-buffer" function (:user-visible-flag t) nil [188345 192122])
            ("basic-save-buffer-1" function nil nil [192396 192787])
            ("basic-save-buffer-2" function nil nil [192868 197338])
            ("declare-function" code nil nil [197340 197426])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [197428 198594])
            ("put" code nil nil [198595 198656])
            ("buffer-save-without-query" variable nil nil [198658 198774])
            ("make-variable-buffer-local" code nil nil [198775 198830])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [198832 202290])
            ("not-modified" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [202293 202744])
            ("toggle-read-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [202746 204165])
            ("insert-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [204167 204563])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [204565 205176])
            ("file-newest-backup" function (:arguments ("filename")) nil [205178 206101])
            ("rename-uniquely" function (:user-visible-flag t) nil [206103 207119])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [207121 208693])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [208695 208841])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [208843 211304])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [211306 211866])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [211868 212806])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [212808 215995])
            ("put" code nil nil [215998 216046])
            ("revert-buffer-function" variable nil nil [216047 216269])
            ("put" code nil nil [216271 216340])
            ("revert-buffer-insert-file-contents-function" variable nil nil [216341 216637])
            ("buffer-stale-function" variable nil nil [216639 217427])
            ("before-revert-hook" variable nil nil [217429 217621])
            ("after-revert-hook" variable nil nil [217623 217967])
            ("revert-buffer-in-progress-p" variable nil nil [217969 218146])
            ("revert-buffer-internal-hook" variable nil nil [218148 218184])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [218186 224466])
            ("recover-this-file" function (:user-visible-flag t) nil [224468 224619])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [224621 226646])
            ("recover-session" function (:user-visible-flag t) nil [226648 228176])
            ("recover-session-finish" function (:user-visible-flag t) nil [228178 230581])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [230583 230834])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [230836 231439])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [231441 231969])
            ("rename-auto-save-file" function nil nil [231973 232537])
            ("make-auto-save-file-name" function nil nil [232539 236768])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [236770 236994])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [236997 239180])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [239183 239344])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [239346 239512])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [239514 241235])
            ("files" package nil nil [241309 241345])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [241347 242693])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [242695 244523])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [244526 244653])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [244655 245192])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [245194 245381])
            ("get-free-disk-space" function (:arguments ("dir")) nil [245383 246978])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [247050 249439])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [249441 249486])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [250560 260588])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [260590 261156])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [261158 261642])
            ("kill-emacs-query-functions" variable nil nil [261644 261950])
            ("confirm-kill-emacs" variable nil nil [261952 262347])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [262349 263756])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [263758 264259])
            ("setq" code nil nil [264369 264490])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [264691 267299])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [267342 267809])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [267811 268660])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [268662 269816])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [269818 270885])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [270887 271952])
            ("trash-directory" variable nil nil [271978 272381])
            ("trash--hexify-table" variable nil nil [272383 272411])
            ("declare-function" code nil nil [272413 272479])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [272481 277901])
            ("define-key" code nil nil [277905 277945])
            ("define-key" code nil nil [277946 277996])
            ("define-key" code nil nil [277997 278047])
            ("define-key" code nil nil [278048 278090])
            ("define-key" code nil nil [278091 278136])
            ("define-key" code nil nil [278137 278178])
            ("define-key" code nil nil [278179 278218])
            ("define-key" code nil nil [278219 278257])
            ("define-key" code nil nil [278258 278303])
            ("define-key" code nil nil [278304 278361])
            ("define-key" code nil nil [278362 278409])
            ("define-key" code nil nil [278411 278463])
            ("define-key" code nil nil [278464 278526])
            ("define-key" code nil nil [278527 278582])
            ("define-key" code nil nil [278583 278642])
            ("define-key" code nil nil [278643 278690])
            ("define-key" code nil nil [278692 278750])
            ("define-key" code nil nil [278751 278802])
            ("define-key" code nil nil [278803 278857])
            ("define-key" code nil nil [278858 278919])
            ("define-key" code nil nil [278920 278979]))          
      :file "files.el.gz"
      :pointmax 279004
      :fsize 80672
      :lastmodtime '(20400 62402)
      :unmatched-syntax '((close-paren 1107 . 1108) (symbol 1076 . 1093) (open-paren 1075 . 1076)))
    (semanticdb-table "simple.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1007 1020])
            ("declare-function" code nil nil [1053 1115])
            ("declare-function" code nil nil [1116 1156])
            ("compilation-current-error" variable nil nil [1178 1212])
            ("compilation-context-lines" variable nil nil [1213 1247])
            ("idle-update-delay" variable (:default-value 0.5) nil [1249 1546])
            ("killing" customgroup (:user-visible-flag t) nil [1548 1622])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1624 1726])
            ("next-error" customgroup (:user-visible-flag t) nil [1763 1864])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1866 1997])
            ("next-error-highlight" variable (:default-value 0.5) nil [1999 2754])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2756 3449])
            ("next-error-recenter" variable nil nil [3451 3813])
            ("next-error-hook" variable nil nil [3815 3956])
            ("next-error-highlight-timer" variable nil nil [3958 3997])
            ("next-error-overlay-arrow-position" variable nil nil [3999 4045])
            ("put" code nil nil [4046 4124])
            ("add-to-list" code nil nil [4125 4202])
            ("next-error-last-buffer" variable nil nil [4204 4431])
            ("next-error-function" variable nil nil [4433 4891])
            ("make-variable-buffer-local" code nil nil [4892 4941])
            ("next-error-move-function" variable nil nil [4943 5256])
            ("make-variable-buffer-local" code nil nil [5257 5311])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5313 6356])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6358 8640])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8642 10411])
            ("next-error-internal" function nil nil [10413 10834])
            ("defalias" code nil nil [10836 10875])
            ("defalias" code nil nil [10876 10910])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10912 11229])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11231 11499])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11501 11953])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11955 12333])
            ("next-error-follow-last-line" variable nil nil [12404 12444])
            ("define-minor-mode" code nil nil [12446 13154])
            ("next-error-follow-mode-post-command-hook" function nil nil [13270 13603])
            ("fundamental-mode" function (:user-visible-flag t) nil [13612 13876])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) (define-key map "z" (quote kill-this-buffer)) map)) nil [13954 14430])
            ("put" code nil nil [14432 14472])
            ("define-derived-mode" code nil nil [14473 14618])
            ("prog-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [134217745] (quote prog-indent-sexp)) map)) nil [14680 14836])
            ("prog-indent-sexp" function (:user-visible-flag t) nil [14838 15036])
            ("define-derived-mode" code nil nil [15038 15406])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [15439 15572])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15574 17822])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [17824 18172])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18174 18886])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18888 19689])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19691 20404])
            ("defalias" code nil nil [20406 20448])
            ("delete-blank-lines" function (:user-visible-flag t) nil [20467 21894])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [21896 23463])
            ("newline-and-indent" function (:user-visible-flag t) nil [23465 23892])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [23894 25120])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25122 27035])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27037 27230])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27232 27431])
            ("back-to-indentation" function (:user-visible-flag t) nil [27433 27723])
            ("fixup-whitespace" function (:user-visible-flag t) nil [27725 28064])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [28066 28504])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [28506 29115])
            ("beginning-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29118 30019])
            ("end-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30021 31188])
            ("delete-active-region" variable (:default-value t) nil [31190 31727])
            ("delete-backward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [31729 33127])
            ("delete-forward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [33129 34037])
            ("mark-whole-buffer" function (:user-visible-flag t) nil [34039 34443])
            ("goto-line" function
               (:user-visible-flag t
                :arguments ("line" "buffer"))
                nil [34487 36838])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [36840 37241])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [37243 38053])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [38055 38380])
            ("define-obsolete-function-alias" code nil nil [38382 38461])
            ("what-line" function (:user-visible-flag t) nil [38463 38814])
            ("count-lines" function (:arguments ("start" "end")) nil [38816 39653])
            ("line-number-at-pos" function (:arguments ("pos")) nil [39655 40115])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [40117 44454])
            ("let" code nil nil [44519 44820])
            ("minibuffer-completing-symbol" variable nil nil [44822 44925])
            ("make-obsolete-variable" code nil nil [44926 44996])
            ("minibuffer-default" variable nil nil [44998 45191])
            ("eval-expression-print-level" variable (:default-value 4) nil [45193 45423])
            ("eval-expression-print-length" variable (:default-value 12) nil [45425 45658])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [45660 45869])
            ("eval-expression-print-format" function (:arguments ("value")) nil [45871 46685])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("eval-expression-arg" "eval-expression-insert-value"))
                nil [46815 48697])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [48699 49626])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49628 51206])
            ("read-extended-command" function nil nil [51208 52732])
            ("minibuffer-history" variable nil nil [52736 52989])
            ("minibuffer-history-sexp-flag" variable nil nil [52990 53305])
            ("setq" code nil nil [53306 53360])
            ("setq" code nil nil [53361 53399])
            ("minibuffer-history-search-history" variable nil nil [53425 53471])
            ("minibuffer-text-before-history" variable nil nil [53473 53673])
            ("add-hook" code nil nil [53675 53739])
            ("minibuffer-history-initialize" function nil nil [53741 53825])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [53827 53989])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [53991 54381])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [54383 57179])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [57181 58230])
            ("minibuffer-temporary-goal-position" variable nil nil [58232 58279])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [58281 58921])
            ("minibuffer-default-add-done" variable nil nil [58923 59246])
            ("make-variable-buffer-local" code nil nil [59248 59305])
            ("minibuffer-default-add-completions" function nil nil [59307 59761])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [59763 61915])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [61917 62168])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [62170 62428])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [62430 63086])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [63088 63373])
            ("minibuffer-prompt-width" function nil nil [63432 63721])
            ("add-hook" code nil nil [63754 63821])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [63823 63874])
            ("make-variable-buffer-local" code nil nil [63875 63947])
            ("minibuffer-history-isearch-setup" function nil nil [63949 64589])
            ("minibuffer-history-isearch-end" function nil nil [64591 64821])
            ("minibuffer-history-isearch-search" function nil nil [64823 66977])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [66979 68363])
            ("minibuffer-history-isearch-wrap" function nil nil [68365 69013])
            ("minibuffer-history-isearch-push-state" function nil nil [69015 69325])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [69327 69539])
            ("define-obsolete-function-alias" code nil nil [69617 69679])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [69681 69924])
            ("undo-in-region" variable nil nil [69926 70030])
            ("undo-no-redo" variable nil nil [70032 70107])
            ("pending-undo-list" variable nil nil [70109 70260])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [70262 74355])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [74357 74638])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [74640 74902])
            ("undo-in-progress" variable nil nil [74904 75035])
            ("undo-more" function (:arguments ("n")) nil [75037 75708])
            ("undo-copy-list" function (:arguments ("list")) nil [75733 75831])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [75833 75942])
            ("undo-start" function (:arguments ("beg" "end")) nil [75944 76527])
            ("undo-adjusted-markers" variable nil nil [76529 76559])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [76561 79277])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [79279 80452])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [80454 80962])
            ("undo-delta" function (:arguments ("undo-elt")) nil [81133 81466])
            ("undo-ask-before-discard" variable nil nil [81468 82234])
            ("undo-extra-outer-limit" variable nil nil [82236 82512])
            ("make-variable-buffer-local" code nil nil [82513 82565])
            ("setq" code nil nil [82850 82909])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [82910 84599])
            ("shell-command-history" variable nil nil [84602 84792])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [84794 84908])
            ("shell-command-default-error-buffer" variable (:user-visible-flag t) nil [84910 85226])
            ("declare-function" code nil nil [85228 85294])
            ("declare-function" code nil nil [85295 85381])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [85383 86087])
            ("declare-function" code nil nil [86089 86140])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [86142 86387])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [86389 87018])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [87020 87889])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [87891 94449])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "not-this-window" "frame")) nil [94451 96874])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [96970 97181])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer"))
                nil [97183 104527])
            ("shell-command-to-string" function (:arguments ("command")) nil [104529 104789])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [104791 106241])
            ("process-file-side-effects" variable (:default-value t) nil [106243 106669])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [106671 107556])
            ("tabulated-list-format" variable nil nil [107578 107608])
            ("tabulated-list-entries" variable nil nil [107609 107640])
            ("tabulated-list-sort-key" variable nil nil [107641 107673])
            ("declare-function" code nil nil [107674 107740])
            ("declare-function" code nil nil [107741 107840])
            ("process-menu-query-only" variable nil nil [107842 107878])
            ("define-derived-mode" code nil nil [107880 108376])
            ("list-processes--refresh" function nil nil [108378 109960])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [109962 110059])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [110061 110853])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [t] (quote universal-argument-other-key)) (define-key map (vector meta-prefix-char t) (quote universal-argument-other-key)) (define-key map [switch-frame] nil) (define-key map [21] (quote universal-argument-more)) (define-key map [45] (quote universal-argument-minus)) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] (quote universal-argument-minus)) map)) nil [110856 112190])
            ("universal-argument-num-events" variable nil nil [112192 112431])
            ("saved-overriding-map" variable (:default-value t) nil [112433 112602])
            ("save&set-overriding-map" function (:arguments ("map")) nil [112604 112833])
            ("restore-overriding-map" function nil nil [112835 113024])
            ("universal-argument" function (:user-visible-flag t) nil [113026 113825])
            ("universal-argument-more" function (:arguments ("arg")) nil [113966 114266])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [114268 114692])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [114694 115410])
            ("universal-argument-minus" function (:arguments ("arg")) nil [115530 115679])
            ("universal-argument-other-key" function (:arguments ("arg")) nil [115779 116117])
            ("filter-buffer-substring-functions" variable nil nil [116121 117206])
            ("buffer-substring-filters" variable nil nil [117208 117859])
            ("make-obsolete-variable" code nil nil [117860 117976])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [117978 119199])
            ("interprogram-cut-function" variable nil nil [119243 119725])
            ("interprogram-paste-function" variable nil nil [119727 121023])
            ("kill-ring" variable nil nil [121064 121519])
            ("kill-ring-max" variable (:default-value 60) nil [121521 121656])
            ("kill-ring-yank-pointer" variable nil nil [121658 121759])
            ("save-interprogram-paste-before-kill" variable nil nil [121761 122263])
            ("kill-do-not-save-duplicates" variable nil nil [122265 122494])
            ("kill-new" function (:arguments ("string" "replace" "yank-handler")) nil [122496 124780])
            ("set-advertised-calling-convention" code nil nil [124781 124862])
            ("kill-append" function (:arguments ("string" "before-p" "yank-handler")) nil [124864 125330])
            ("set-advertised-calling-convention" code nil nil [125331 125405])
            ("yank-pop-change-selection" variable nil nil [125407 125577])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [125579 127237])
            ("kill-read-only-ok" variable nil nil [127288 127424])
            ("put" code nil nil [127426 127511])
            ("put" code nil nil [127512 127579])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "yank-handler"))
                nil [127581 130046])
            ("set-advertised-calling-convention" code nil nil [130047 130113])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [130307 130813])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [130815 132717])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [132719 133148])
            ("yank-excluded-properties" variable (:default-value (quote (read-only invisible intangible field mouse-face help-echo local-map keymap yank-handler follow-link fontified))) nil [133235 133633])
            ("yank-window-start" variable nil nil [133635 133665])
            ("yank-undo-function" variable nil nil [133666 133997])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [133999 135729])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [135731 137126])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [137128 137318])
            ("kill-forward-chars" function (:arguments ("arg")) nil [137383 137528])
            ("kill-backward-chars" function (:arguments ("arg")) nil [137577 137723])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [137725 138200])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [138202 139554])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [139556 140165])
            ("kill-whole-line" variable nil nil [140202 140345])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [140347 142556])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [142558 144188])
            ("forward-visible-line" function (:arguments ("arg")) nil [144190 146680])
            ("end-of-visible-line" function nil nil [146682 147448])
            ("insert-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [147451 148112])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [148114 149014])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [149016 149558])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [149560 150129])
            ("put" code nil nil [150132 150193])
            ("put" code nil nil [150194 150269])
            ("activate-mark-hook" variable nil nil [150271 150460])
            ("deactivate-mark-hook" variable nil nil [150462 150540])
            ("mark" function (:arguments ("force")) nil [150542 151166])
            ("deactivate-mark" function (:arguments ("force")) nil [151168 152945])
            ("activate-mark" function nil nil [152947 153111])
            ("set-mark" function (:arguments ("pos")) nil [153113 154210])
            ("use-empty-active-region" variable nil nil [154212 154708])
            ("use-region-p" function nil nil [154710 155316])
            ("region-active-p" function nil nil [155318 155686])
            ("mark-ring" variable nil nil [155688 155781])
            ("make-variable-buffer-local" code nil nil [155782 155821])
            ("put" code nil nil [155822 155857])
            ("mark-ring-max" variable (:default-value 16) nil [155859 156004])
            ("global-mark-ring" variable nil nil [156006 156090])
            ("global-mark-ring-max" variable (:default-value 16) nil [156092 156253])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [156255 156564])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [156566 157035])
            ("set-mark-command-repeat-pop" variable nil nil [157037 157496])
            ("set-mark-default-inactive" variable nil nil [157498 157787])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [157789 160190])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [160192 161746])
            ("pop-mark" function nil nil [161748 162167])
            ("define-obsolete-function-alias" code nil nil [162169 162258])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [162259 163218])
            ("shift-select-mode" variable (:default-value t) nil [163220 163792])
            ("handle-shift-selection" function nil nil [163794 164963])
            ("define-minor-mode" code nil nil [164965 166287])
            ("widen-automatically" variable (:default-value t) nil [166289 166623])
            ("non-essential" variable nil nil [166625 167023])
            ("pop-global-mark" function (:user-visible-flag t) nil [167025 167840])
            ("next-line-add-newlines" variable nil nil [167843 168017])
            ("next-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [168019 170090])
            ("previous-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [170092 171641])
            ("track-eol" variable nil nil [171643 171968])
            ("goal-column" variable nil nil [171970 172224])
            ("make-variable-buffer-local" code nil nil [172225 172266])
            ("temporary-goal-column" variable nil nil [172268 172772])
            ("line-move-ignore-invisible" variable (:default-value t) nil [172774 172958])
            ("line-move-visual" variable (:default-value t) nil [172960 173536])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [173583 175411])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [175735 176520])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [176668 178286])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [178440 183113])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [183115 186252])
            ("line-move-to-column" function (:arguments ("col")) nil [186254 187633])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [187635 188990])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [188992 190514])
            ("put" code nil nil [190644 190678])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [190680 191681])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [191749 192313])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [192315 192906])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [192908 194323])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [194325 194694])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [194696 195075])
            ("visual-line" customgroup (:user-visible-flag t) nil [195077 195178])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [195180 195668])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [195670 196857])
            ("visual-line--saved-state" variable nil nil [196859 196896])
            ("define-minor-mode" code nil nil [196898 198539])
            ("turn-on-visual-line-mode" function nil nil [198541 198599])
            ("define-globalized-minor-mode" code nil nil [198601 198716])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [198720 199154])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [199156 199600])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [199602 201073])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [201075 201682])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [201833 203031])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [203033 203784])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [203787 203983])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [203985 204737])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [204739 204951])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [204953 205144])
            ("current-word" function (:arguments ("strict" "really-word")) nil [205146 206626])
            ("fill-prefix" variable nil nil [206629 206795])
            ("make-variable-buffer-local" code nil nil [206796 206837])
            ("put" code nil nil [206838 206895])
            ("auto-fill-inhibit-regexp" variable nil nil [206897 207063])
            ("do-auto-fill" function nil nil [207065 210365])
            ("comment-line-break-function" variable
               (:user-visible-flag t
                :default-value (quote comment-indent-new-line))
                nil [210367 210694])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [210696 211803])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [211805 211961])
            ("put" code nil nil [211963 212025])
            ("put" code nil nil [212199 212251])
            ("define-minor-mode" code nil nil [212253 212912])
            ("auto-fill-function" function nil nil [212979 213086])
            ("turn-on-auto-fill" function nil nil [213088 213181])
            ("turn-off-auto-fill" function nil nil [213183 213279])
            ("custom-add-option" code nil nil [213281 213335])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [213337 214175])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [214178 214986])
            ("defvaralias" code nil nil [214988 215046])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [215048 215828])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [215830 216374])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [216376 216493])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [216494 216621])
            ("define-minor-mode" code nil nil [216623 217302])
            ("define-minor-mode" code nil nil [217304 218178])
            ("define-minor-mode" code nil nil [218180 218656])
            ("define-minor-mode" code nil nil [218658 218962])
            ("define-minor-mode" code nil nil [218964 219272])
            ("define-minor-mode" code nil nil [219274 220270])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [220273 220404])
            ("blink-matching-paren" variable (:default-value t) nil [220406 220555])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [220557 220956])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [220958 221283])
            ("blink-matching-delay" variable (:default-value 1) nil [221285 221421])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [221423 221691])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [221693 222678])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [222680 223046])
            ("blink-matching-open" function (:user-visible-flag t) nil [223048 227079])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [227081 227270])
            ("blink-paren-post-self-insert-function" function nil nil [227272 227799])
            ("add-hook" code nil nil [227801 228098])
            ("keyboard-quit" function (:user-visible-flag t) nil [228276 228769])
            ("buffer-quit-function" variable nil nil [228771 229021])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [229023 229849])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [229851 230246])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [230250 230767])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [230769 232313])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [232315 232640])
            ("rfc822-goto-eoh" function nil nil [232642 233046])
            ("mail-encode-mml" variable nil nil [233088 233227])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [233229 235915])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [235917 236308])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [236310 236698])
            ("set-variable-value-history" variable nil nil [236702 236887])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [236889 239637])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote mouse-choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [239692 240235])
            ("put" code nil nil [240303 240351])
            ("completion-reference-buffer" variable nil nil [240353 240582])
            ("completion-no-auto-exit" variable nil nil [240584 240765])
            ("completion-base-position" variable nil nil [240767 241137])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [241139 241438])
            ("completion-base-size" variable nil nil [241440 241895])
            ("make-obsolete-variable" code nil nil [241896 241975])
            ("delete-completion-window" function (:user-visible-flag t) nil [241977 242391])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [242393 242524])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [242526 243776])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [243778 246024])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [246108 246946])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [246948 247072])
            ("make-obsolete" code nil nil [247073 247185])
            ("choose-completion-string-functions" variable nil nil [247187 247907])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [247909 251201])
            ("define-derived-mode" code nil nil [251203 251628])
            ("completion-list-mode-finish" function nil nil [251630 251821])
            ("add-hook" code nil nil [251823 251885])
            ("completion-show-help" variable (:default-value t) nil [251949 252100])
            ("completion-setup-function" function nil nil [252231 253773])
            ("add-hook" code nil nil [253775 253835])
            ("define-key" code nil nil [253837 253912])
            ("define-key" code nil nil [253913 253988])
            ("switch-to-completions" function (:user-visible-flag t) nil [253990 254531])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [254693 254936])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [254937 255190])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [255191 255444])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [255445 255698])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [255699 255956])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [255957 256205])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [256207 257271])
            ("define-key" code nil nil [257273 257344])
            ("define-key" code nil nil [257345 257416])
            ("define-key" code nil nil [257417 257487])
            ("define-key" code nil nil [257488 257557])
            ("define-key" code nil nil [257558 257629])
            ("define-key" code nil nil [257630 257703])
            ("mapc" code nil nil [257993 258743])
            ("clone-buffer-hook" variable nil nil [258795 258896])
            ("clone-indirect-buffer-hook" variable nil nil [258898 259017])
            ("clone-process" function (:arguments ("process" "newname")) nil [259019 260528])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [260631 263594])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [263597 265189])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [265192 265675])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [265723 267263])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [267265 268336])
            ("define-minor-mode" code nil nil [268338 271705])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [271708 271831])
            ("define-minor-mode" code nil nil [271833 272603])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [273561 275040])
            ("bad-package-check" function (:arguments ("package")) nil [275042 275547])
            ("mapc" code nil nil [275549 275667])
            ("simple" package nil nil [275670 275687]))          
      :file "simple.el.gz"
      :pointmax 275713
      :fsize 74350
      :lastmodtime '(20420 48847)
      :unmatched-syntax '((close-paren 1020 . 1021) (symbol 989 . 1006) (open-paren 988 . 989)))
    (semanticdb-table "ansi-color.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("comint-last-output-start" variable nil nil [2745 2778])
            ("ansi-colors" customgroup (:user-visible-flag t) nil [2798 3250])
            ("ansi-color-faces-vector" variable (:default-value [default bold default italic underline bold bold-italic modeline]) nil [3252 4226])
            ("ansi-color-names-vector" variable (:default-value ["black" "red" "green" "yellow" "blue" "magenta" "cyan" "white"]) nil [4228 5438])
            ("ansi-color-regexp" variable
               (:constant-flag t
                :default-value "\\[\\([0-9;]*m\\)")
                nil [5440 5539])
            ("ansi-color-drop-regexp" variable
               (:constant-flag t
                :default-value "\\[\\([ABCDsuK]\\|2J\\|=[0-9]+[hI]\\|[0-9;]*[Hf]\\)")
                nil [5541 5699])
            ("ansi-color-parameter-regexp" variable
               (:constant-flag t
                :default-value "\\([0-9]*\\)[m;]")
                nil [5701 5815])
            ("ansi-color-for-comint-mode" variable (:default-value t) nil [5879 6626])
            ("ansi-color-apply-face-function" variable (:default-value (quote ansi-color-apply-overlay-face)) nil [6628 6892])
            ("ansi-color-for-comint-mode-on" function (:user-visible-flag t) nil [6909 7046])
            ("ansi-color-for-comint-mode-off" function (:user-visible-flag t) nil [7048 7190])
            ("ansi-color-for-comint-mode-filter" function (:user-visible-flag t) nil [7192 7353])
            ("ansi-color-process-output" function (:arguments ("ignored")) nil [7370 8465])
            ("defalias" code nil nil [8467 8542])
            ("make-obsolete" code nil nil [8543 8616])
            ("ansi-color-context" variable nil nil [8642 8962])
            ("make-variable-buffer-local" code nil nil [8963 9011])
            ("ansi-color-filter-apply" function (:arguments ("string")) nil [9013 10255])
            ("ansi-color-apply" function (:arguments ("string")) nil [10257 12652])
            ("ansi-color-context-region" variable nil nil [12679 13010])
            ("make-variable-buffer-local" code nil nil [13011 13066])
            ("ansi-color-filter-region" function (:arguments ("begin" "end")) nil [13068 14170])
            ("ansi-color-apply-on-region" function (:arguments ("begin" "end")) nil [14172 16590])
            ("ansi-color-apply-overlay-face" function (:arguments ("beg" "end" "face")) nil [16592 16825])
            ("ansi-color-make-face" function (:arguments ("property" "color")) nil [17805 18467])
            ("ansi-color-make-extent" function (:arguments ("from" "to" "object")) nil [18469 19292])
            ("ansi-color-freeze-overlay" function (:arguments ("overlay" "is-after" "begin" "end" "len")) nil [19294 19706])
            ("ansi-color-set-extent-face" function (:arguments ("extent" "face")) nil [19708 19959])
            ("ansi-color-apply-sequence" function (:arguments ("escape-sequence" "faces")) nil [19982 20970])
            ("ansi-color-make-color-map" function nil nil [20972 22189])
            ("ansi-color-map" variable (:default-value (ansi-color-make-color-map)) nil [22191 22676])
            ("ansi-color-map-update" function (:arguments ("symbol" "value")) nil [22678 23043])
            ("ansi-color-get-face-1" function (:arguments ("ansi-code")) nil [23045 23269])
            ("ansi-color-get-face" function (:arguments ("escape-seq")) nil [23271 24022])
            ("ansi-color" package nil nil [24024 24045]))          
      :file "ansi-color.el.gz"
      :pointmax 24075
      :fsize 6911
      :lastmodtime '(20391 15703)
      :unmatched-syntax nil)
    (semanticdb-table "autorevert.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("timer" include nil nil [3981 3997])
            ("cl" include nil nil [4018 4031])
            ("auto-revert" customgroup (:user-visible-flag t) nil [4149 4376])
            ("auto-revert-mode" variable nil nil [4510 4662])
            ("put" code nil nil [4663 4705])
            ("auto-revert-tail-mode" variable nil nil [4707 4874])
            ("put" code nil nil [4875 4922])
            ("auto-revert-timer" variable nil nil [4924 4990])
            ("auto-revert-interval" variable (:default-value 5) nil [4992 5727])
            ("auto-revert-stop-on-user-input" variable (:default-value t) nil [5729 6261])
            ("auto-revert-verbose" variable (:default-value t) nil [6263 6464])
            ("auto-revert-mode-text" variable (:default-value " ARev") nil [6466 6757])
            ("auto-revert-tail-mode-text" variable (:default-value " Tail") nil [6759 7011])
            ("auto-revert-mode-hook" variable nil nil [7013 7210])
            ("global-auto-revert-mode-text" variable nil nil [7212 7519])
            ("global-auto-revert-mode-hook" variable nil nil [7521 7660])
            ("global-auto-revert-non-file-buffers" variable nil nil [7662 8591])
            ("global-auto-revert-ignore-modes" variable nil nil [8593 8750])
            ("auto-revert-load-hook" variable nil nil [8752 8904])
            ("auto-revert-check-vc-info" variable nil nil [8906 9952])
            ("global-auto-revert-ignore-buffer" variable nil nil [9954 10130])
            ("make-variable-buffer-local" code nil nil [10131 10193])
            ("auto-revert-buffer-list" variable nil nil [10219 10481])
            ("auto-revert-remaining-buffers" variable nil nil [10483 10583])
            ("auto-revert-tail-pos" variable nil nil [10585 10656])
            ("add-hook" code nil nil [10658 10803])
            ("define-minor-mode" code nil nil [10835 11839])
            ("turn-on-auto-revert-mode" function nil nil [11857 12059])
            ("define-minor-mode" code nil nil [12077 14771])
            ("turn-on-auto-revert-tail-mode" function nil nil [14789 15020])
            ("define-minor-mode" code nil nil [15038 16070])
            ("auto-revert-set-timer" function (:user-visible-flag t) nil [16073 16687])
            ("auto-revert-active-p" function nil nil [16689 16996])
            ("auto-revert-handler" function nil nil [16998 19223])
            ("auto-revert-tail-handler" function (:arguments ("size")) nil [19225 19886])
            ("auto-revert-buffers" function nil nil [19888 22420])
            ("autorevert" package nil nil [22435 22456])
            ("run-hooks" code nil nil [22458 22492]))          
      :file "autorevert.el.gz"
      :pointmax 22522
      :fsize 6978
      :lastmodtime '(20400 62402)
      :unmatched-syntax '((close-paren 4031 . 4032) (symbol 4000 . 4017) (open-paren 3999 . 4000)))
    (semanticdb-table "font-core.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock-defaults" variable nil nil [1082 3606])
            ("put" code nil nil [3622 3671])
            ("make-variable-buffer-local" code nil nil [3672 3720])
            ("font-lock-function" variable (:default-value (quote font-lock-default-function)) nil [3722 3922])
            ("font-lock-major-mode" variable nil nil [3989 4018])
            ("define-minor-mode" code nil nil [4020 6892])
            ("font-lock-change-mode" function nil nil [6987 7041])
            ("font-lock-defontify" function nil nil [7043 7477])
            ("font-lock-set-defaults" variable nil nil [7479 7510])
            ("font-lock-default-function" function (:arguments ("mode")) nil [7511 8591])
            ("turn-on-font-lock" function nil nil [8593 8734])
            ("font-lock-global-modes" variable (:default-value t) nil [11659 12504])
            ("turn-on-font-lock-if-desired" function nil nil [12506 12820])
            ("define-globalized-minor-mode" code nil nil [12822 13133])
            ("font-core" package nil nil [13170 13190]))          
      :file "font-core.el.gz"
      :pointmax 13219
      :fsize 4832
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "hilit-chg.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("wid-edit" include nil nil [6710 6729])
            ("highlight-changes" customgroup (:user-visible-flag t) nil [6795 6889])
            ("highlight-changes" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1")) (((class color)) (:foreground "red")) (t (:inverse-video t))))
                :type "face")
                nil [7284 7509])
            ("define-obsolete-face-alias" code nil nil [7510 7590])
            ("highlight-changes-delete" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1" :underline t)) (((class color)) (:foreground "red" :underline t)) (t (:inverse-video t))))
                :type "face")
                nil [7669 7928])
            ("define-obsolete-face-alias" code nil nil [7929 8023])
            ("define-obsolete-variable-alias" code nil nil [8089 8213])
            ("highlight-changes-colors" variable (:default-value (if (eq (frame-parameter nil (quote background-mode)) (quote light)) (quote ("magenta" "blue" "darkgreen" "chocolate" "sienna4" "NavyBlue")) (quote ("yellow" "magenta" "blue" "maroon" "firebrick" "green4" "DarkOrchid")))) nil [8215 8998])
            ("define-obsolete-variable-alias" code nil nil [9099 9217])
            ("highlight-changes-visibility-initial-state" variable (:default-value t) nil [9219 9595])
            ("define-obsolete-variable-alias" code nil nil [9731 9839])
            ("highlight-changes-visible-string" variable (:default-value " +Chg") nil [9841 10142])
            ("define-obsolete-variable-alias" code nil nil [10144 10255])
            ("highlight-changes-invisible-string" variable (:default-value " -Chg") nil [10257 10559])
            ("highlight-changes-global-modes" variable (:default-value t) nil [10561 11678])
            ("highlight-changes-global-changes-existing-buffers" variable nil nil [11680 12190])
            ("hilit-chg-list" variable nil nil [12224 12251])
            ("hilit-chg-string" variable (:default-value " ??") nil [12252 12283])
            ("make-variable-buffer-local" code nil nil [12285 12331])
            ("define-minor-mode" code nil nil [12368 14147])
            ("define-minor-mode" code nil nil [14165 14849])
            ("hilit-chg-cust-fix-changes-face-list" function (:arguments ("w" "_wc" "event")) nil [14852 16463])
            ("highlight-changes-face-list" variable nil nil [16466 17125])
            ("hilit-chg-map-changes" function (:arguments ("func" "start-position" "end-position")) nil [17128 17762])
            ("hilit-chg-display-changes" function (:arguments ("beg" "end")) nil [17765 18104])
            ("hilit-chg-make-ov" function (:arguments ("prop" "start" "end")) nil [18107 18942])
            ("hilit-chg-hide-changes" function (:arguments ("beg" "end")) nil [18944 19442])
            ("hilit-chg-fixup" function (:arguments ("beg" "end")) nil [19445 19765])
            ("highlight-save-buffer-state" function (:arguments ("body")) nil [19842 20378])
            ("highlight-changes-remove-highlight" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [20395 20723])
            ("hilit-chg-set-face-on-change" function (:arguments ("beg" "end" "leng-before" "no-property-change")) nil [20725 23241])
            ("hilit-chg-update" function nil nil [23243 23674])
            ("hilit-chg-set" function nil nil [23676 24086])
            ("hilit-chg-clear" function nil nil [24088 24797])
            ("highlight-changes-next-change" function (:user-visible-flag t) nil [24815 25378])
            ("highlight-changes-previous-change" function (:user-visible-flag t) nil [25396 26225])
            ("hilit-chg-make-list" function (:arguments ("force")) nil [26304 27622])
            ("hilit-chg-bump-change" function (:arguments ("prop" "start" "end")) nil [27624 28025])
            ("highlight-changes-rotate-faces" function (:user-visible-flag t) nil [28042 30169])
            ("highlight-markup-buffers" function (:arguments ("buf-a" "file-a" "buf-b" "file-b" "markup-a-only")) nil [30319 32682])
            ("highlight-compare-buffers" function
               (:user-visible-flag t
                :arguments ("buf-a" "buf-b"))
                nil [32699 33585])
            ("highlight-compare-with-file" function
               (:user-visible-flag t
                :arguments ("file-b"))
                nil [33602 34987])
            ("hilit-chg-get-diff-info" function (:arguments ("buf-a" "file-a" "buf-b" "file-b")) nil [34990 35411])
            ("hilit-chg-get-diff-list-hk" function nil nil [35414 36877])
            ("define-globalized-minor-mode" code nil nil [36967 37083])
            ("define-obsolete-function-alias" code nil nil [37085 37184])
            ("highlight-changes-mode-turn-on" function nil nil [37186 37951])
            ("hilit-chg-desktop-restore" function (:arguments ("desktop-buffer-locals")) nil [38051 38204])
            ("add-to-list" code nil nil [38206 38315])
            ("add-to-list" code nil nil [38317 38378])
            ("hilit-chg" package nil nil [38760 38780]))          
      :file "hilit-chg.el.gz"
      :pointmax 38809
      :fsize 11185
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "hl-line.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("hl-line-overlay" variable nil nil [2818 2910])
            ("make-variable-buffer-local" code nil nil [2911 2956])
            ("global-hl-line-overlay" variable nil nil [2958 3064])
            ("hl-line" customgroup (:user-visible-flag t) nil [3066 3160])
            ("hl-line" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [3162 3311])
            ("hl-line-face" variable (:default-value (quote hl-line)) nil [3313 3742])
            ("hl-line-sticky-flag" variable (:default-value t) nil [3744 4180])
            ("global-hl-line-sticky-flag" variable nil nil [4182 4551])
            ("hl-line-range-function" variable nil nil [4553 4940])
            ("define-minor-mode" code nil nil [4957 6433])
            ("hl-line-highlight" function nil nil [6435 6927])
            ("hl-line-unhighlight" function nil nil [6929 7077])
            ("define-minor-mode" code nil nil [7094 7996])
            ("global-hl-line-highlight" function nil nil [7998 8549])
            ("global-hl-line-unhighlight" function nil nil [8551 8727])
            ("hl-line-move" function (:arguments ("overlay")) nil [8729 9271])
            ("hl-line-unload-function" function nil nil [9273 9535])
            ("hl-line" package nil nil [9537 9555]))          
      :file "hl-line.el.gz"
      :pointmax 9582
      :fsize 2931
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "linum.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("linum-version" variable
               (:constant-flag t
                :default-value "0.9x")
                nil [1132 1163])
            ("linum-overlays" variable nil nil [1165 1224])
            ("linum-available" variable nil nil [1225 1285])
            ("linum-before-numbering-hook" variable nil nil [1286 1389])
            ("mapc" code nil nil [1391 1460])
            ("linum" customgroup (:user-visible-flag t) nil [1462 1546])
            ("linum-format" variable (:default-value (quote dynamic)) nil [1563 1906])
            ("linum" variable
               (:default-value (quote ((t :inherit (shadow default))))
                :type "face")
                nil [1908 2034])
            ("linum-eager" variable (:default-value t) nil [2036 2299])
            ("linum-delay" variable nil nil [2301 2421])
            ("define-minor-mode" code nil nil [2438 4280])
            ("define-globalized-minor-mode" code nil nil [4297 4365])
            ("linum-on" function nil nil [4367 4430])
            ("linum-delete-overlays" function nil nil [4432 4715])
            ("linum-update-current" function nil nil [4717 4830])
            ("linum-update" function (:arguments ("buffer")) nil [4832 5247])
            ("linum-update-window" function (:arguments ("win")) nil [5249 7307])
            ("linum-after-change" function (:arguments ("beg" "end" "_len")) nil [7309 7577])
            ("linum-after-scroll" function (:arguments ("win" "_start")) nil [7579 7655])
            ("linum-schedule" function nil nil [7720 7874])
            ("linum-unload-function" function nil nil [7989 8115])
            ("linum" package nil nil [8117 8133]))          
      :file "linum.el.gz"
      :pointmax 8158
      :fsize 2791
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "hi-lock.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock" include nil nil [3599 3619])
            ("hi-lock" customgroup (:user-visible-flag t) nil [3621 3796])
            ("hi-lock-file-patterns-range" variable (:default-value 10000) nil [3798 4125])
            ("hi-lock-highlight-range" variable (:default-value 200000) nil [4127 4582])
            ("hi-lock-exclude-modes" variable (:default-value (quote (rmail-mode mime/viewer-mode gnus-article-mode))) nil [4584 4840])
            ("hi-lock-file-patterns-policy" variable (:default-value (quote ask)) nil [4842 5398])
            ("put" code nil nil [5433 5492])
            ("hi-lock-faces" customgroup (:user-visible-flag t) nil [5494 5579])
            ("hi-yellow" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "yellow1" :foreground "black")) (((background dark)) (:background "yellow" :foreground "black")) (((min-colors 88)) (:background "yellow1")) (t (:background "yellow"))))
                :type "face")
                nil [5581 5899])
            ("hi-pink" variable
               (:default-value (quote ((((background dark)) (:background "pink" :foreground "black")) (t (:background "pink"))))
                :type "face")
                nil [5901 6066])
            ("hi-green" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "green1" :foreground "black")) (((background dark)) (:background "green" :foreground "black")) (((min-colors 88)) (:background "green1")) (t (:background "green"))))
                :type "face")
                nil [6068 6373])
            ("hi-blue" variable
               (:default-value (quote ((((background dark)) (:background "light blue" :foreground "black")) (t (:background "light blue"))))
                :type "face")
                nil [6375 6552])
            ("hi-black-b" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [6554 6649])
            ("hi-blue-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "blue1")) (t (:weight bold :foreground "blue"))))
                :type "face")
                nil [6651 6823])
            ("hi-green-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "green1")) (t (:weight bold :foreground "green"))))
                :type "face")
                nil [6825 7000])
            ("hi-red-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "red1")) (t (:weight bold :foreground "red"))))
                :type "face")
                nil [7002 7171])
            ("hi-black-hb" variable
               (:default-value (quote ((t (:weight bold :height 1.67 :inherit variable-pitch))))
                :type "face")
                nil [7173 7306])
            ("hi-lock-file-patterns" variable nil nil [7308 7406])
            ("hi-lock-interactive-patterns" variable nil nil [7408 7515])
            ("hi-lock-face-defaults" variable (:default-value (quote ("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))) nil [7517 7715])
            ("define-obsolete-variable-alias" code nil nil [7799 7947])
            ("define-obsolete-variable-alias" code nil nil [7949 8092])
            ("hi-lock-file-patterns-prefix" variable (:default-value "Hi-lock") nil [8094 8204])
            ("hi-lock-archaic-interface-message-used" variable nil nil [8206 8546])
            ("hi-lock-archaic-interface-deduce" variable nil nil [8548 8774])
            ("make-variable-buffer-local" code nil nil [8776 8834])
            ("put" code nil nil [8835 8889])
            ("make-variable-buffer-local" code nil nil [8890 8941])
            ("put" code nil nil [8942 8989])
            ("hi-lock-menu" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key-after map [highlight-regexp] (quote (menu-item "Highlight Regexp..." highlight-regexp :help "Highlight text matching PATTERN (a regexp)."))) (define-key-after map [highlight-phrase] (quote (menu-item "Highlight Phrase..." highlight-phrase :help "Highlight text matching PATTERN (a regexp processed to match phrases)."))) (define-key-after map [highlight-lines-matching-regexp] (quote (menu-item "Highlight Lines..." highlight-lines-matching-regexp :help "Highlight lines containing match of PATTERN (a regexp)."))) (define-key-after map [unhighlight-regexp] (quote (menu-item "Remove Highlighting..." unhighlight-regexp :help "Remove previously entered highlighting pattern." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-write-interactive-patterns] (quote (menu-item "Patterns to Buffer" hi-lock-write-interactive-patterns :help "Insert interactively added REGEXPs into buffer at point." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-find-patterns] (quote (menu-item "Patterns from Buffer" hi-lock-find-patterns :help "Use patterns (if any) near top of buffer."))) map)) nil [8991 10309])
            ("hi-lock-map" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key map "wi" (quote hi-lock-find-patterns)) (define-key map "wl" (quote highlight-lines-matching-regexp)) (define-key map "wp" (quote highlight-phrase)) (define-key map "wh" (quote highlight-regexp)) (define-key map "wr" (quote unhighlight-regexp)) (define-key map "wb" (quote hi-lock-write-interactive-patterns)) map)) nil [10311 10739])
            ("define-minor-mode" code nil nil [10778 14958])
            ("define-globalized-minor-mode" code nil nil [14975 15085])
            ("turn-on-hi-lock-if-enabled" function nil nil [15087 15246])
            ("defalias" code nil nil [15263 15332])
            ("hi-lock-line-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [15348 16230])
            ("defalias" code nil nil [16248 16297])
            ("hi-lock-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [16313 16995])
            ("defalias" code nil nil [17012 17068])
            ("hi-lock-face-phrase-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [17084 17599])
            ("declare-function" code nil nil [17601 17657])
            ("defalias" code nil nil [17674 17727])
            ("hi-lock-unface-buffer" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [17743 19831])
            ("hi-lock-write-interactive-patterns" function (:user-visible-flag t) nil [19848 20606])
            ("hi-lock-process-phrase" function (:arguments ("phrase")) nil [20637 21126])
            ("hi-lock-regexp-okay" function (:arguments ("regexp")) nil [21128 21410])
            ("hi-lock-read-face-name" function nil nil [21412 22066])
            ("hi-lock-set-pattern" function (:arguments ("regexp" "face")) nil [22068 23326])
            ("hi-lock-set-file-patterns" function (:arguments ("patterns")) nil [23328 23665])
            ("hi-lock-find-patterns" function (:user-visible-flag t) nil [23667 25070])
            ("hi-lock-font-lock-hook" function nil nil [25072 25296])
            ("hi-lock-string-serialize-hash" variable (:default-value (make-hash-table :test (quote equal))) nil [25298 25426])
            ("hi-lock-string-serialize-serial" variable (:default-value 1) nil [25428 25651])
            ("hi-lock-string-serialize" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [25653 26052])
            ("hi-lock-unload-function" function nil nil [26054 26186])
            ("hi-lock" package nil nil [26188 26206]))          
      :file "hi-lock.el.gz"
      :pointmax 26233
      :fsize 7410
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "whitespace.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("whitespace" customgroup (:user-visible-flag t) nil [12983 13172])
            ("whitespace-style" variable (:default-value (quote (face tabs spaces trailing lines space-before-tab newline indentation empty space-after-tab space-mark tab-mark newline-mark))) nil [13175 18727])
            ("whitespace-space" variable (:default-value (quote whitespace-space)) nil [18730 18911])
            ("whitespace-space" variable
               (:default-value (quote ((((class color) (background dark)) (:background "grey20" :foreground "darkgray")) (((class color) (background light)) (:background "LightYellow" :foreground "lightgray")) (t (:inverse-video t))))
                :type "face")
                nil [18914 19217])
            ("whitespace-hspace" variable (:default-value (quote whitespace-hspace)) nil [19220 19408])
            ("whitespace-hspace" variable
               (:default-value (quote ((((class color) (background dark)) (:background "grey24" :foreground "darkgray")) (((class color) (background light)) (:background "LemonChiffon3" :foreground "lightgray")) (t (:inverse-video t))))
                :type "face")
                nil [19411 19742])
            ("whitespace-tab" variable (:default-value (quote whitespace-tab)) nil [19745 19918])
            ("whitespace-tab" variable
               (:default-value (quote ((((class color) (background dark)) (:background "grey22" :foreground "darkgray")) (((class color) (background light)) (:background "beige" :foreground "lightgray")) (t (:inverse-video t))))
                :type "face")
                nil [19921 20210])
            ("whitespace-newline" variable (:default-value (quote whitespace-newline)) nil [20213 20470])
            ("whitespace-newline" variable
               (:default-value (quote ((((class color) (background dark)) (:foreground "darkgray" :bold nil)) (((class color) (min-colors 88) (background light)) (:foreground "lightgray" :bold nil)) (((class color) (background light)) (:foreground "brown" :bold nil)) (t (:underline t :bold nil))))
                :type "face")
                nil [20473 21030])
            ("whitespace-trailing" variable (:default-value (quote whitespace-trailing)) nil [21033 21232])
            ("whitespace-trailing" variable
               (:default-value (quote ((((class mono)) (:inverse-video t :bold t :underline t)) (t (:background "red1" :foreground "yellow" :bold t))))
                :type "face")
                nil [21235 21473])
            ("whitespace-line" variable (:default-value (quote whitespace-line)) nil [21476 21693])
            ("whitespace-line" variable
               (:default-value (quote ((((class mono)) (:inverse-video t :bold t :underline t)) (t (:background "gray20" :foreground "violet"))))
                :type "face")
                nil [21696 21930])
            ("whitespace-space-before-tab" variable (:default-value (quote whitespace-space-before-tab)) nil [21933 22158])
            ("whitespace-space-before-tab" variable
               (:default-value (quote ((((class mono)) (:inverse-video t :bold t :underline t)) (t (:background "DarkOrange" :foreground "firebrick"))))
                :type "face")
                nil [22161 22386])
            ("whitespace-indentation" variable (:default-value (quote whitespace-indentation)) nil [22389 22619])
            ("whitespace-indentation" variable
               (:default-value (quote ((((class mono)) (:inverse-video t :bold t :underline t)) (t (:background "yellow" :foreground "firebrick"))))
                :type "face")
                nil [22622 22858])
            ("whitespace-empty" variable (:default-value (quote whitespace-empty)) nil [22861 23081])
            ("whitespace-empty" variable
               (:default-value (quote ((((class mono)) (:inverse-video t :bold t :underline t)) (t (:background "yellow" :foreground "firebrick"))))
                :type "face")
                nil [23084 23322])
            ("whitespace-space-after-tab" variable (:default-value (quote whitespace-space-after-tab)) nil [23325 23556])
            ("whitespace-space-after-tab" variable
               (:default-value (quote ((((class mono)) (:inverse-video t :bold t :underline t)) (t (:background "yellow" :foreground "firebrick"))))
                :type "face")
                nil [23559 23788])
            ("whitespace-hspace-regexp" variable (:default-value "\\(\\(\240\\|\340\242\240\\|\340\244\240\\|\340\270\240\\|\340\274\240\\)+\\)") nil [23791 24652])
            ("whitespace-space-regexp" variable (:default-value "\\( +\\)") nil [24655 25348])
            ("whitespace-tab-regexp" variable (:default-value "\\(	+\\)") nil [25351 26037])
            ("whitespace-trailing-regexp" variable (:default-value "\\([	 \302\240]+\\)$") nil [26040 26525])
            ("whitespace-space-before-tab-regexp" variable (:default-value "\\( +\\)\\(	+\\)") nil [26528 26996])
            ("whitespace-indentation-regexp" variable (:default-value (quote ("^	*\\(\\( \\{%d\\}\\)+\\)[^
	]" . "^ *\\(	+\\)[^
]"))) nil [26999 27682])
            ("whitespace-empty-at-bob-regexp" variable (:default-value "^\\(\\([ 	]*
\\)+\\)") nil [27685 28126])
            ("whitespace-empty-at-eob-regexp" variable (:default-value "^\\([ 	
]+\\)") nil [28129 28551])
            ("whitespace-space-after-tab-regexp" variable (:default-value (quote ("	+\\(\\( \\{%d\\}\\)+\\)" . "\\(	+\\) +"))) nil [28554 29177])
            ("whitespace-line-column" variable (:default-value 80) nil [29180 29554])
            ("whitespace-display-mappings" variable (:default-value (quote ((space-mark 32 [183] [46]) (space-mark 160 [164] [95]) (space-mark 2208 [2212] [95]) (space-mark 2336 [2340] [95]) (space-mark 3616 [3620] [95]) (space-mark 3872 [3876] [95]) (newline-mark 10 [36 10]) (tab-mark 9 [187 9] [92 9])))) nil [29614 32046])
            ("whitespace-global-modes" variable (:default-value t) nil [32049 32956])
            ("whitespace-action" variable nil nil [32959 34199])
            ("define-minor-mode" code nil nil [34323 34986])
            ("define-minor-mode" code nil nil [35004 35836])
            ("define-minor-mode" code nil nil [35961 37210])
            ("whitespace-turn-on-if-enabled" function nil nil [37213 38052])
            ("define-minor-mode" code nil nil [38070 38990])
            ("whitespace-style-value-list" variable
               (:constant-flag t
                :default-value (quote (face tabs spaces trailing lines lines-tail newline empty indentation indentation::tab indentation::space space-after-tab space-after-tab::tab space-after-tab::space space-before-tab space-before-tab::tab space-before-tab::space help-newline tab-mark space-mark newline-mark)))
                nil [39095 39596])
            ("whitespace-toggle-option-alist" variable
               (:constant-flag t
                :default-value (quote ((102 . face) (116 . tabs) (115 . spaces) (114 . trailing) (108 . lines) (76 . lines-tail) (110 . newline) (101 . empty) (9 . indentation) (73 . indentation::tab) (105 . indentation::space) (1 . space-after-tab) (65 . space-after-tab::tab) (97 . space-after-tab::space) (2 . space-before-tab) (66 . space-before-tab::tab) (98 . space-before-tab::space) (84 . tab-mark) (83 . space-mark) (78 . newline-mark) (120 . whitespace-style))))
                nil [39599 40437])
            ("whitespace-active-style" variable nil nil [40440 40527])
            ("whitespace-indent-tabs-mode" variable (:default-value indent-tabs-mode) nil [40529 40633])
            ("whitespace-tab-width" variable (:default-value tab-width) nil [40635 40718])
            ("whitespace-point" variable (:default-value (point)) nil [40720 40858])
            ("whitespace-font-lock-refontify" variable nil nil [40860 41020])
            ("whitespace-bob-marker" variable nil nil [41022 41164])
            ("whitespace-eob-marker" variable nil nil [41166 41308])
            ("whitespace-buffer-changed" variable nil nil [41310 41490])
            ("whitespace-toggle-options" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [41508 44382])
            ("whitespace-toggle-style" variable nil nil [44385 44477])
            ("global-whitespace-toggle-options" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [44495 47453])
            ("whitespace-cleanup" function (:user-visible-flag t) nil [47574 50990])
            ("whitespace-cleanup-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [51008 55787])
            ("whitespace-replace-action" function (:arguments ("action" "rstart" "rend" "regexp" "index")) nil [55817 56204])
            ("whitespace-regexp" function (:arguments ("regexp" "kind")) nil [56308 56608])
            ("whitespace-indentation-regexp" function (:arguments ("kind")) nil [56611 56800])
            ("whitespace-space-after-tab-regexp" function (:arguments ("kind")) nil [56803 57004])
            ("whitespace-report-list" variable
               (:constant-flag t
                :default-value (list (cons (quote empty) whitespace-empty-at-bob-regexp) (cons (quote empty) whitespace-empty-at-eob-regexp) (cons (quote trailing) whitespace-trailing-regexp) (cons (quote indentation) nil) (cons (quote indentation::tab) nil) (cons (quote indentation::space) nil) (cons (quote space-before-tab) whitespace-space-before-tab-regexp) (cons (quote space-before-tab::tab) whitespace-space-before-tab-regexp) (cons (quote space-before-tab::space) whitespace-space-before-tab-regexp) (cons (quote space-after-tab) nil) (cons (quote space-after-tab::tab) nil) (cons (quote space-after-tab::space) nil)))
                nil [57007 57754])
            ("whitespace-report-text" variable
               (:constant-flag t
                :default-value (quote (" Whitespace Report

 Current Setting                       Whitespace Problem

 empty                    []     []  empty lines at beginning of buffer
 empty                    []     []  empty lines at end of buffer
 trailing                 []     []  SPACEs or TABs at end of line
 indentation              []     []  8 or more SPACEs at beginning of line
 indentation::tab         []     []  8 or more SPACEs at beginning of line
 indentation::space       []     []  TABs at beginning of line
 space-before-tab         []     []  SPACEs before TAB
 space-before-tab::tab    []     []  SPACEs before TAB: SPACEs
 space-before-tab::space  []     []  SPACEs before TAB: TABs
 space-after-tab          []     []  8 or more SPACEs after TAB
 space-after-tab::tab     []     []  8 or more SPACEs after TAB: SPACEs
 space-after-tab::space   []     []  8 or more SPACEs after TAB: TABs

 indent-tabs-mode =
 tab-width        = 

" . " Whitespace Report

 Current Setting                       Whitespace Problem

 empty                    []     []  empty lines at beginning of buffer
 empty                    []     []  empty lines at end of buffer
 trailing                 []     []  SPACEs or TABs at end of line
 indentation              []     []  TABs at beginning of line
 indentation::tab         []     []  8 or more SPACEs at beginning of line
 indentation::space       []     []  TABs at beginning of line
 space-before-tab         []     []  SPACEs before TAB
 space-before-tab::tab    []     []  SPACEs before TAB: SPACEs
 space-before-tab::space  []     []  SPACEs before TAB: TABs
 space-after-tab          []     []  8 or more SPACEs after TAB
 space-after-tab::tab     []     []  8 or more SPACEs after TAB: SPACEs
 space-after-tab::space   []     []  8 or more SPACEs after TAB: TABs

 indent-tabs-mode =
 tab-width        = 

")))
                nil [57757 59922])
            ("whitespace-report-buffer-name" variable
               (:constant-flag t
                :default-value "*Whitespace Report*")
                nil [59925 60036])
            ("whitespace-report" function
               (:user-visible-flag t
                :arguments ("force" "report-if-bogus"))
                nil [60054 61517])
            ("whitespace-report-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "force" "report-if-bogus"))
                nil [61535 65177])
            ("whitespace-font-lock-mode" variable nil nil [65278 65384])
            ("whitespace-font-lock" variable nil nil [65386 65492])
            ("whitespace-font-lock-keywords" variable nil nil [65494 65589])
            ("whitespace-help-text" variable
               (:constant-flag t
                :default-value " Whitespace Toggle Options                  | scroll up  :  SPC   or > |
                                            | scroll down:  M-SPC or < |
 FACES                                      \\__________________________/
 []  f   - toggle face visualization
 []  t   - toggle TAB visualization
 []  s   - toggle SPACE and HARD SPACE visualization
 []  r   - toggle trailing blanks visualization
 []  l   - toggle \"long lines\" visualization
 []  L   - toggle \"long lines\" tail visualization
 []  n   - toggle NEWLINE visualization
 []  e   - toggle empty line at bob and/or eob visualization
 []  C-i - toggle indentation SPACEs visualization (via `indent-tabs-mode')
 []  I   - toggle indentation SPACEs visualization
 []  i   - toggle indentation TABs visualization
 []  C-a - toggle SPACEs after TAB visualization (via `indent-tabs-mode')
 []  A   - toggle SPACEs after TAB: SPACEs visualization
 []  a   - toggle SPACEs after TAB: TABs visualization
 []  C-b - toggle SPACEs before TAB visualization (via `indent-tabs-mode')
 []  B   - toggle SPACEs before TAB: SPACEs visualization
 []  b   - toggle SPACEs before TAB: TABs visualization

 DISPLAY TABLE
 []  T - toggle TAB visualization
 []  S - toggle SPACE and HARD SPACE visualization
 []  N - toggle NEWLINE visualization

      x - restore `whitespace-style' value

      ? - display this text

")
                nil [65592 67030])
            ("whitespace-help-buffer-name" variable
               (:constant-flag t
                :default-value "*Whitespace Toggle Options*")
                nil [67033 67152])
            ("whitespace-insert-value" function (:arguments ("value")) nil [67155 67312])
            ("whitespace-mark-x" function (:arguments ("nchars" "condition")) nil [67315 67487])
            ("whitespace-insert-option-mark" function (:arguments ("the-list" "the-value")) nil [67490 67808])
            ("whitespace-help-on" function (:arguments ("style")) nil [67811 68223])
            ("whitespace-display-window" function (:arguments ("buffer")) nil [68226 68650])
            ("whitespace-kill-buffer" function (:arguments ("buffer-name")) nil [68653 68876])
            ("whitespace-help-off" function nil nil [68879 69031])
            ("whitespace-help-scroll" function (:arguments ("up")) nil [69034 69448])
            ("whitespace-interactive-char" function (:arguments ("local-p")) nil [69451 71912])
            ("whitespace-toggle-list" function (:arguments ("local-p" "arg" "the-list")) nil [71949 72848])
            ("whitespace-display-table" variable nil nil [72851 72928])
            ("whitespace-display-table-was-local" variable nil nil [72930 73052])
            ("whitespace-turn-on" function nil nil [73055 73983])
            ("whitespace-turn-off" function nil nil [73986 74217])
            ("whitespace-style-face-p" function nil nil [74220 75321])
            ("whitespace-color-on" function nil nil [75324 80341])
            ("whitespace-color-off" function nil nil [80344 80847])
            ("whitespace-trailing-regexp" function (:arguments ("limit")) nil [80850 81180])
            ("whitespace-empty-at-bob-regexp" function (:arguments ("limit")) nil [81183 82174])
            ("whitespace-looking-back" function (:arguments ("regexp" "limit")) nil [82177 82365])
            ("whitespace-empty-at-eob-regexp" function (:arguments ("limit")) nil [82368 83684])
            ("whitespace-buffer-changed" function (:arguments ("_beg" "_end")) nil [83687 83820])
            ("whitespace-post-command-hook" function nil nil [83823 85254])
            ("whitespace-style-mark-p" function nil nil [85387 85638])
            ("whitespace-char-valid-p" function (:arguments ("char")) nil [85641 85764])
            ("whitespace-display-vector-p" function (:arguments ("vec")) nil [85767 86021])
            ("whitespace-display-char-on" function nil nil [86024 87562])
            ("whitespace-display-char-off" function nil nil [87565 87859])
            ("whitespace-action-when-on" function nil nil [87946 88189])
            ("whitespace-write-file-hook" function nil nil [88192 88572])
            ("whitespace-warn-read-only" function (:arguments ("msg")) nil [88606 88791])
            ("whitespace-unload-function" function nil nil [88868 89136])
            ("whitespace" package nil nil [89173 89194])
            ("run-hooks" code nil nil [89197 89230]))          
      :file "whitespace.el.gz"
      :pointmax 89261
      :fsize 17127
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "reveal.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("reveal" customgroup (:user-visible-flag t) nil [1864 1942])
            ("reveal-around-mark" variable (:default-value t) nil [1944 2054])
            ("reveal-open-spots" variable nil nil [2056 2180])
            ("make-variable-buffer-local" code nil nil [2181 2228])
            ("reveal-last-tick" variable nil nil [2230 2259])
            ("make-variable-buffer-local" code nil nil [2260 2306])
            ("reveal-post-command" function nil nil [2324 3748])
            ("reveal-open-new-overlays" function (:arguments ("old-ols")) nil [3750 5939])
            ("reveal-close-old-overlays" function (:arguments ("old-ols")) nil [5941 8172])
            ("reveal-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap move-beginning-of-line] (quote beginning-of-line)) (define-key map [remap move-end-of-line] (quote end-of-line)) map)) nil [8174 8489])
            ("define-minor-mode" code nil nil [8506 9194])
            ("define-minor-mode" code nil nil [9211 9830])
            ("reveal" package nil nil [9832 9849]))          
      :file "reveal.el.gz"
      :pointmax 9875
      :fsize 3185
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "menu-bar.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1025 1060])
            ("cua-enable-cua-keys" variable nil nil [1104 1132])
            ("or" code nil nil [1246 1356])
            ("if" code nil nil [1358 2263])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [2391 2454])
            ("define-obsolete-variable-alias" code nil nil [2522 2604])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (define-key menu [exit-emacs] (\` (menu-item (\, (purecopy "Quit")) save-buffers-kill-terminal :help (\, (purecopy "Save unsaved buffers, then exit"))))) (define-key menu [separator-exit] menu-bar-separator) (define-key menu [delete-this-frame] (\` (menu-item (\, (purecopy "Delete Frame")) delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help (\, (purecopy "Delete currently selected frame"))))) (define-key menu [make-frame-on-display] (\` (menu-item (\, (purecopy "New Frame on Display...")) make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help (\, (purecopy "Open a new frame on another display"))))) (define-key menu [make-frame] (\` (menu-item (\, (purecopy "New Frame")) make-frame-command :visible (fboundp (quote make-frame-command)) :help (\, (purecopy "Open a new frame"))))) (define-key menu [separator-frame] menu-bar-separator) (define-key menu [one-window] (\` (menu-item (\, (purecopy "Remove Other Windows")) delete-other-windows :enable (not (one-window-p t nil)) :help (\, (purecopy "Make selected window fill whole frame"))))) (define-key menu [new-window-on-right] (\` (menu-item (\, (purecopy "New Window on Right")) split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help (\, (purecopy "Make new window on right of selected one"))))) (define-key menu [new-window-below] (\` (menu-item (\, (purecopy "New Window Below")) split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help (\, (purecopy "Make new window below selected one"))))) (define-key menu [separator-window] menu-bar-separator) (define-key menu [ps-print-region] (\` (menu-item (\, (purecopy "PostScript Print Region (B+W)")) ps-print-region :enable mark-active :help (\, (purecopy "Pretty-print marked region in black and white to PostScript printer"))))) (define-key menu [ps-print-buffer] (\` (menu-item (\, (purecopy "PostScript Print Buffer (B+W)")) ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help (\, (purecopy "Pretty-print current buffer in black and white to PostScript printer"))))) (define-key menu [ps-print-region-faces] (\` (menu-item (\, (purecopy "PostScript Print Region")) ps-print-region-with-faces :enable mark-active :help (\, (purecopy "Pretty-print marked region to PostScript printer"))))) (define-key menu [ps-print-buffer-faces] (\` (menu-item (\, (purecopy "PostScript Print Buffer")) ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help (\, (purecopy "Pretty-print current buffer to PostScript printer"))))) (define-key menu [print-region] (\` (menu-item (\, (purecopy "Print Region")) print-region :enable mark-active :help (\, (purecopy "Print region between mark and current position"))))) (define-key menu [print-buffer] (\` (menu-item (\, (purecopy "Print Buffer")) print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help (\, (purecopy "Print current buffer with page headings"))))) (define-key menu [separator-print] menu-bar-separator) (define-key menu [recover-session] (\` (menu-item (\, (purecopy "Recover Crashed Session")) recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help (\, (purecopy "Recover edits from a crashed session"))))) (define-key menu [revert-buffer] (\` (menu-item (\, (purecopy "Revert Buffer")) revert-buffer :enable (or revert-buffer-function revert-buffer-insert-file-contents-function (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help (\, (purecopy "Re-read current buffer from its file"))))) (define-key menu [write-file] (\` (menu-item (\, (purecopy "Save As...")) write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help (\, (purecopy "Write current buffer to another file"))))) (define-key menu [save-buffer] (\` (menu-item (\, (purecopy "Save")) save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help (\, (purecopy "Save current buffer to its file"))))) (define-key menu [separator-save] menu-bar-separator) (define-key menu [kill-buffer] (\` (menu-item (\, (purecopy "Close")) kill-this-buffer :enable (kill-this-buffer-enabled-p) :help (\, (purecopy "Discard (kill) current buffer"))))) (define-key menu [insert-file] (\` (menu-item (\, (purecopy "Insert File...")) insert-file :enable (menu-bar-non-minibuffer-window-p) :help (\, (purecopy "Insert another file into current buffer"))))) (define-key menu [dired] (\` (menu-item (\, (purecopy "Open Directory...")) dired :enable (menu-bar-non-minibuffer-window-p) :help (\, (purecopy "Read a directory, to operate on its files"))))) (define-key menu [open-file] (\` (menu-item (\, (purecopy "Open File...")) menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help (\, (purecopy "Read an existing file into an Emacs buffer"))))) (define-key menu [new-file] (\` (menu-item (\, (purecopy "Visit New File...")) find-file :enable (menu-bar-non-minibuffer-window-p) :help (\, (purecopy "Specify a new file's name, to edit the file"))))) menu)) nil [2605 9736])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [9738 10068])
            ("menu-bar-last-search-type" variable nil nil [10100 10208])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [10210 10606])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [10608 11008])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11010 11323])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11325 11650])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11652 11991])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11993 12344])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (define-key menu [isearch-backward-regexp] (\` (menu-item (\, (purecopy "Backward Regexp...")) isearch-backward-regexp :help (\, (purecopy "Search backwards for a regular expression as you type it"))))) (define-key menu [isearch-forward-regexp] (\` (menu-item (\, (purecopy "Forward Regexp...")) isearch-forward-regexp :help (\, (purecopy "Search forward for a regular expression as you type it"))))) (define-key menu [isearch-backward] (\` (menu-item (\, (purecopy "Backward String...")) isearch-backward :help (\, (purecopy "Search backwards for a string as you type it"))))) (define-key menu [isearch-forward] (\` (menu-item (\, (purecopy "Forward String...")) isearch-forward :help (\, (purecopy "Search forward for a string as you type it"))))) menu)) nil [12391 13296])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (define-key menu [i-search] (\` (menu-item (\, (purecopy "Incremental Search")) (\, menu-bar-i-search-menu)))) (define-key menu [separator-tag-isearch] menu-bar-separator) (define-key menu [tags-continue] (\` (menu-item (\, (purecopy "Continue Tags Search")) tags-loop-continue :help (\, (purecopy "Continue last tags search operation"))))) (define-key menu [tags-srch] (\` (menu-item (\, (purecopy "Search Tagged Files...")) tags-search :help (\, (purecopy "Search for a regexp in all tagged files"))))) (define-key menu [separator-tag-search] menu-bar-separator) (define-key menu [repeat-search-back] (\` (menu-item (\, (purecopy "Repeat Backwards")) nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help (\, (purecopy "Repeat last search backwards"))))) (define-key menu [repeat-search-fwd] (\` (menu-item (\, (purecopy "Repeat Forward")) nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help (\, (purecopy "Repeat last search forward"))))) (define-key menu [separator-repeat-search] menu-bar-separator) (define-key menu [re-search-backward] (\` (menu-item (\, (purecopy "Regexp Backwards...")) nonincremental-re-search-backward :help (\, (purecopy "Search backwards for a regular expression"))))) (define-key menu [re-search-forward] (\` (menu-item (\, (purecopy "Regexp Forward...")) nonincremental-re-search-forward :help (\, (purecopy "Search forward for a regular expression"))))) (define-key menu [search-backward] (\` (menu-item (\, (purecopy "String Backwards...")) nonincremental-search-backward :help (\, (purecopy "Search backwards for a string"))))) (define-key menu [search-forward] (\` (menu-item (\, (purecopy "String Forward...")) nonincremental-search-forward :help (\, (purecopy "Search forward for a string"))))) menu)) nil [13298 15872])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (define-key menu [tags-repl-continue] (\` (menu-item (\, (purecopy "Continue Replace")) tags-loop-continue :help (\, (purecopy "Continue last tags replace operation"))))) (define-key menu [tags-repl] (\` (menu-item (\, (purecopy "Replace in Tagged Files...")) tags-query-replace :help (\, (purecopy "Interactively replace a regexp in all tagged files"))))) (define-key menu [separator-replace-tags] menu-bar-separator) (define-key menu [query-replace-regexp] (\` (menu-item (\, (purecopy "Replace Regexp...")) query-replace-regexp :enable (not buffer-read-only) :help (\, (purecopy "Replace regular expression interactively, ask about each occurrence"))))) (define-key menu [query-replace] (\` (menu-item (\, (purecopy "Replace String...")) query-replace :enable (not buffer-read-only) :help (\, (purecopy "Replace string interactively, ask about each occurrence"))))) menu)) nil [15904 16973])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (define-key menu [set-tags-name] (\` (menu-item (\, (purecopy "Set Tags File Name...")) visit-tags-table :help (\, (purecopy "Tell Tags commands which tag table file to use"))))) (define-key menu [separator-tag-file] menu-bar-separator) (define-key menu [apropos-tags] (\` (menu-item (\, (purecopy "Tags Apropos...")) tags-apropos :help (\, (purecopy "Find function/variables whose names match regexp"))))) (define-key menu [next-tag-otherw] (\` (menu-item (\, (purecopy "Next Tag in Other Window")) menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help (\, (purecopy "Find next function/variable matching last tag name in another window"))))) (define-key menu [next-tag] (\` (menu-item (\, (purecopy "Find Next Tag")) menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help (\, (purecopy "Find next function/variable matching last tag name"))))) (define-key menu [find-tag-otherw] (\` (menu-item (\, (purecopy "Find Tag in Other Window...")) find-tag-other-window :help (\, (purecopy "Find function/variable definition in another window"))))) (define-key menu [find-tag] (\` (menu-item (\, (purecopy "Find Tag...")) find-tag :help (\, (purecopy "Find definition of function or variable"))))) (define-key menu [separator-tags] menu-bar-separator) (define-key menu [end-of-buf] (\` (menu-item (\, (purecopy "Goto End of Buffer")) end-of-buffer))) (define-key menu [beg-of-buf] (\` (menu-item (\, (purecopy "Goto Beginning of Buffer")) beginning-of-buffer))) (define-key menu [go-to-pos] (\` (menu-item (\, (purecopy "Goto Buffer Position...")) goto-char :help (\, (purecopy "Read a number N and go to buffer position N"))))) (define-key menu [go-to-line] (\` (menu-item (\, (purecopy "Goto Line...")) goto-line :help (\, (purecopy "Read a line number and go to that line"))))) menu)) nil [17019 19286])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [19289 19343])
            ("fset" code nil nil [19344 19386])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (define-key menu [props] (\` (menu-item (\, (purecopy "Text Properties")) facemenu-menu))) (if (featurep (quote ns)) (define-key menu [spell] (\` (menu-item (\, (purecopy "Spell")) ispell-menu-map)))) (define-key menu [fill] (\` (menu-item (\, (purecopy "Fill")) fill-region :enable (and mark-active (not buffer-read-only)) :help (\, (purecopy "Fill text in region to fit between left and right margin"))))) (define-key menu [separator-bookmark] menu-bar-separator) (define-key menu [bookmark] (\` (menu-item (\, (purecopy "Bookmarks")) menu-bar-bookmark-map))) (define-key menu [goto] (\` (menu-item (\, (purecopy "Go To")) (\, menu-bar-goto-menu)))) (define-key menu [replace] (\` (menu-item (\, (purecopy "Replace")) (\, menu-bar-replace-menu)))) (define-key menu [search] (\` (menu-item (\, (purecopy "Search")) (\, menu-bar-search-menu)))) (define-key menu [separator-search] menu-bar-separator) (define-key menu [mark-whole-buffer] (\` (menu-item (\, (purecopy "Select All")) mark-whole-buffer :help (\, (purecopy "Mark the whole buffer for a subsequent cut/copy"))))) (define-key menu [clear] (\` (menu-item (\, (purecopy "Clear")) delete-region :enable (and mark-active (not buffer-read-only)) :help (\, (purecopy "Delete the text in region between mark and current position"))))) (define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (purecopy (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu"))) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help (\, (purecopy "Choose a string from the kill ring and paste it"))))) (define-key menu [paste] (\` (menu-item (\, (purecopy "Paste")) yank :enable (and (or (and (fboundp (quote x-selection-exists-p)) (x-selection-exists-p (quote CLIPBOARD))) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)) :help (\, (purecopy "Paste (yank) text most recently cut/copied"))))) (define-key menu [copy] (\` (menu-item (\, (purecopy "Copy")) (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help (\, (purecopy "Copy text in region between mark and current position")) :keys (\, (purecopy (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]")))))) (define-key menu [cut] (\` (menu-item (\, (purecopy "Cut")) kill-region :enable (and mark-active (not buffer-read-only)) :help (\, (purecopy "Cut (kill) text in region between mark and current position"))))) (if (featurep (quote ns)) (define-key menu [separator-undo] menu-bar-separator)) (define-key menu [undo] (\` (menu-item (\, (purecopy "Undo")) undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help (\, (purecopy "Undo last operation"))))) menu)) nil [19388 23704])
            ("menu-bar-next-tag-other-window" function (:user-visible-flag t) nil [23706 23854])
            ("menu-bar-next-tag" function (:user-visible-flag t) nil [23856 23978])
            ("define-obsolete-function-alias" code nil nil [23980 24062])
            ("put" code nil nil [24206 24294])
            ("put" code nil nil [24295 24352])
            ("put" code nil nil [24353 24543])
            ("clipboard-yank" function (:user-visible-flag t) nil [24545 24712])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [24714 24904])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [24906 25084])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [25086 25709])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (define-key menu [customize-apropos-faces] (\` (menu-item (\, (purecopy "Faces Matching...")) customize-apropos-faces :help (\, (purecopy "Browse faces matching a regexp or word list"))))) (define-key menu [customize-apropos-options] (\` (menu-item (\, (purecopy "Options Matching...")) customize-apropos-options :help (\, (purecopy "Browse options matching a regexp or word list"))))) (define-key menu [customize-apropos] (\` (menu-item (\, (purecopy "All Settings Matching...")) customize-apropos :help (\, (purecopy "Browse customizable settings matching a regexp or word list"))))) (define-key menu [separator-1] menu-bar-separator) (define-key menu [customize-group] (\` (menu-item (\, (purecopy "Specific Group...")) customize-group :help (\, (purecopy "Customize settings of specific group"))))) (define-key menu [customize-face] (\` (menu-item (\, (purecopy "Specific Face...")) customize-face :help (\, (purecopy "Customize attributes of specific face"))))) (define-key menu [customize-option] (\` (menu-item (\, (purecopy "Specific Option...")) customize-option :help (\, (purecopy "Customize value of specific option"))))) (define-key menu [separator-2] menu-bar-separator) (define-key menu [customize-changed-options] (\` (menu-item (\, (purecopy "New Options...")) customize-changed-options :help (\, (purecopy "Options added or changed in recent Emacs versions"))))) (define-key menu [customize-saved] (\` (menu-item (\, (purecopy "Saved Options")) customize-saved :help (\, (purecopy "Customize previously saved options"))))) (define-key menu [separator-3] menu-bar-separator) (define-key menu [customize-browse] (\` (menu-item (\, (purecopy "Browse Customization Groups")) customize-browse :help (\, (purecopy "Browse all customization groups"))))) (define-key menu [customize] (\` (menu-item (\, (purecopy "Top-level Customization Group")) customize :help (\, (purecopy "The master group called `Emacs'"))))) (define-key menu [customize-themes] (\` (menu-item (\, (purecopy "Custom Themes")) customize-themes :help (\, (purecopy "Choose a pre-defined customization theme"))))) menu)) nil [25741 28130])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [28203 28699])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [28701 29942])
            ("menu-set-font" function (:user-visible-flag t) nil [29990 30196])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [30198 32283])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [32392 32572])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [32574 32799])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [32801 33012])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [33014 33199])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [33201 33383])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [33385 33555])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (define-key menu [customize] (\` (menu-item (\, (purecopy "Other (Customize)")) menu-bar-showhide-fringe-ind-customize :help (\, (purecopy "Additional choices available through Custom buffer")) :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (define-key menu [mixed] (\` (menu-item (\, (purecopy "Opposite, Arrows Right")) menu-bar-showhide-fringe-ind-mixed :help (\, (purecopy "Show top/bottom indicators in opposite fringes, arrows in right")) :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (define-key menu [box] (\` (menu-item (\, (purecopy "Opposite, No Arrows")) menu-bar-showhide-fringe-ind-box :help (\, (purecopy "Show top/bottom indicators in opposite fringes, no arrows")) :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (define-key menu [right] (\` (menu-item (\, (purecopy "In Right Fringe")) menu-bar-showhide-fringe-ind-right :help (\, (purecopy "Show buffer boundaries and arrows in right fringe")) :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (define-key menu [left] (\` (menu-item (\, (purecopy "In Left Fringe")) menu-bar-showhide-fringe-ind-left :help (\, (purecopy "Show buffer boundaries and arrows in left fringe")) :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (define-key menu [none] (\` (menu-item (\, (purecopy "No Indicators")) menu-bar-showhide-fringe-ind-none :help (\, (purecopy "Hide all buffer boundary indicators and arrows")) :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [33557 36053])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [36055 36206])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [36208 36394])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [36396 36593])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [36595 36790])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [36792 36963])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (define-key menu [showhide-fringe-ind] (\` (menu-item (\, (purecopy "Buffer Boundaries")) (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help (\, (purecopy "Indicate buffer boundaries in fringe"))))) (define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (define-key menu [customize] (\` (menu-item (\, (purecopy "Customize Fringe")) menu-bar-showhide-fringe-menu-customize :help (\, (purecopy "Detailed customization of fringe")) :visible (display-graphic-p)))) (define-key menu [default] (\` (menu-item (\, (purecopy "Default")) menu-bar-showhide-fringe-menu-customize-reset :help (\, (purecopy "Default width fringe on both left and right side")) :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (define-key menu [right] (\` (menu-item (\, (purecopy "On the Right")) menu-bar-showhide-fringe-menu-customize-right :help (\, (purecopy "Fringe only on the right side")) :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (define-key menu [left] (\` (menu-item (\, (purecopy "On the Left")) menu-bar-showhide-fringe-menu-customize-left :help (\, (purecopy "Fringe only on the left side")) :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (define-key menu [none] (\` (menu-item (\, (purecopy "None")) menu-bar-showhide-fringe-menu-customize-disable :help (\, (purecopy "Turn off fringe")) :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [36965 39063])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [39065 39221])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [39223 39376])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [39378 39501])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll-bar"))) (define-key menu [right] (\` (menu-item (\, (purecopy "On the Right")) menu-bar-right-scroll-bar :help (\, (purecopy "Scroll-bar on the right side")) :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))))) (define-key menu [left] (\` (menu-item (\, (purecopy "On the Left")) menu-bar-left-scroll-bar :help (\, (purecopy "Scroll-bar on the left side")) :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))))) (define-key menu [none] (\` (menu-item (\, (purecopy "None")) menu-bar-no-scroll-bar :help (\, (purecopy "Turn off scroll-bar")) :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)))) menu)) nil [39503 40743])
            ("menu-bar-frame-for-menubar" function nil nil [40745 40928])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [40930 41051])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [41053 41201])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [41202 41354])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [41355 41516])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [41517 41681])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [41682 41840])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [41841 42008])
            ("when" code nil nil [42010 44859])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers" "Show the current column number in the mode line")) (define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers" "Show the current line number in the mode line")) (define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (define-key menu [linecolumn-separator] menu-bar-separator) (define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (define-key menu [datetime-separator] menu-bar-separator) (define-key menu [showhide-speedbar] (\` (menu-item (\, (purecopy "Speedbar")) speedbar-frame-mode :help (\, (purecopy "Display a Speedbar quick-navigation frame")) :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (define-key menu [showhide-fringe] (\` (menu-item (\, (purecopy "Fringe")) (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (define-key menu [showhide-scroll-bar] (\` (menu-item (\, (purecopy "Scroll-bar")) (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (define-key menu [showhide-tooltip-mode] (\` (menu-item (\, (purecopy "Tooltips")) tooltip-mode :help (\, (purecopy "Turn tooltips on/off")) :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (define-key menu [menu-bar-mode] (\` (menu-item (\, (purecopy "Menu-bar")) toggle-menu-bar-mode-from-frame :help (\, (purecopy "Turn menu-bar on/off")) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (define-key menu [showhide-tool-bar] (\` (menu-item (\, (purecopy "Tool-bar")) (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (define-key menu [showhide-tool-bar] (\` (menu-item (\, (purecopy "Tool-bar")) toggle-tool-bar-mode-from-frame :help (\, (purecopy "Turn tool-bar on/off")) :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [44861 48500])
            ("menu-bar-text-mode-auto-fill" function nil nil [48502 48786])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (define-key menu [word-wrap] (\` (menu-item (\, (purecopy "Word Wrap (Visual Line mode)")) (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message (\, (purecopy "Visual-Line mode enabled")))) :help (\, (purecopy "Wrap long lines at word boundaries")) :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (define-key menu [truncate] (\` (menu-item (\, (purecopy "Truncate Long Lines")) (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1)) :help (\, (purecopy "Truncate long lines at window edge")) :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (define-key menu [window-wrap] (\` (menu-item (\, (purecopy "Wrap at Window Edge")) (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1))) :help (\, (purecopy "Wrap long lines at window edge")) :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [48789 50703])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (define-key menu [customize] (\` (menu-item (\, (purecopy "Customize Emacs")) (\, menu-bar-custom-menu)))) (define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (define-key menu [save] (\` (menu-item (\, (purecopy "Save Options")) menu-bar-options-save :help (\, (purecopy "Save options set from the menu above"))))) (define-key menu [custom-separator] menu-bar-separator) (define-key menu [menu-set-font] (\` (menu-item (\, (purecopy "Set Default Font...")) menu-set-font :visible (display-multi-font-p) :help (\, (purecopy "Select a default font"))))) (if (featurep (quote system-font-setting)) (define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (define-key menu [showhide] (\` (menu-item (\, (purecopy "Show/Hide")) (\, menu-bar-showhide-menu)))) (define-key menu [showhide-separator] menu-bar-separator) (define-key menu [mule] (\` (menu-item (\, (purecopy "Multilingual Environment")) (\, mule-menu-keymap)))) (define-key menu [mule-separator] menu-bar-separator) (define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (define-key menu [debugger-separator] menu-bar-separator) (define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (define-key menu [cursor-separator] menu-bar-separator) (define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place) (not (symbol-value (quote save-place)))))) (define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (require (quote uniquify)) (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote forward))))) (define-key menu [edit-options-separator] menu-bar-separator) (define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case for Search" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) (define-key menu [auto-fill-mode] (\` (menu-item (\, (purecopy "Auto Fill in Text Modes")) menu-bar-text-mode-auto-fill :help (\, (purecopy "Automatically fill text while typing (Auto Fill mode)")) :button (:toggle if (listp text-mode-hook) (member (quote turn-on-auto-fill) text-mode-hook) (eq (quote turn-on-auto-fill) text-mode-hook))))) (define-key menu [line-wrapping] (\` (menu-item (\, (purecopy "Line Wrapping in This Buffer")) (\, menu-bar-line-wrapping-menu)))) (define-key menu [highlight-separator] menu-bar-separator) (define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [50705 56359])
            ("send-mail-item-name" function nil nil [56390 56855])
            ("read-mail-item-name" function nil nil [56857 57101])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (define-key menu [zone] (\` (menu-item (\, (purecopy "Zone Out")) zone :help (\, (purecopy "Play tricks with Emacs display when Emacs is idle"))))) (define-key menu [tetris] (\` (menu-item (\, (purecopy "Tetris")) tetris :help (\, (purecopy "Falling blocks game"))))) (define-key menu [solitaire] (\` (menu-item (\, (purecopy "Solitaire")) solitaire :help (\, (purecopy "Get rid of all the stones"))))) (define-key menu [snake] (\` (menu-item (\, (purecopy "Snake")) snake :help (\, (purecopy "Move snake around avoiding collisions"))))) (define-key menu [pong] (\` (menu-item (\, (purecopy "Pong")) pong :help (\, (purecopy "Bounce the ball to your opponent"))))) (define-key menu [mult] (\` (menu-item (\, (purecopy "Multiplication Puzzle")) mpuz :help (\, (purecopy "Exercise brain with multiplication"))))) (define-key menu [life] (\` (menu-item (\, (purecopy "Life")) life :help (\, (purecopy "Watch how John Conway's cellular automaton evolves"))))) (define-key menu [land] (\` (menu-item (\, (purecopy "Landmark")) landmark :help (\, (purecopy "Watch a neural-network robot learn landmarks"))))) (define-key menu [hanoi] (\` (menu-item (\, (purecopy "Towers of Hanoi")) hanoi :help (\, (purecopy "Watch Towers-of-Hanoi puzzle solved by Emacs"))))) (define-key menu [gomoku] (\` (menu-item (\, (purecopy "Gomoku")) gomoku :help (\, (purecopy "Mark 5 contiguous squares (like tic-tac-toe)"))))) (define-key menu [bubbles] (\` (menu-item (\, (purecopy "Bubbles")) bubbles :help (\, (purecopy "Remove all bubbles using the fewest moves"))))) (define-key menu [black-box] (\` (menu-item (\, (purecopy "Blackbox")) blackbox :help (\, (purecopy "Find balls in a black box by shooting rays"))))) (define-key menu [adventure] (\` (menu-item (\, (purecopy "Adventure")) dunnet :help (\, (purecopy "Dunnet, a text Adventure game for Emacs"))))) (define-key menu [5x5] (\` (menu-item (\, (purecopy "5x5")) 5x5 :help (\, (purecopy "Fill in all the squares on a 5x5 board"))))) menu)) nil [57103 59391])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (define-key menu [insert-keys] (\` (menu-item (\, (purecopy "Insert Keys")) epa-insert-keys :help (\, (purecopy "Insert public keys after the current point"))))) (define-key menu [export-keys] (\` (menu-item (\, (purecopy "Export Keys")) epa-export-keys :help (\, (purecopy "Export public keys to a file"))))) (define-key menu [import-keys-region] (\` (menu-item (\, (purecopy "Import Keys from Region")) epa-import-keys-region :help (\, (purecopy "Import public keys from the current region"))))) (define-key menu [import-keys] (\` (menu-item (\, (purecopy "Import Keys from File...")) epa-import-keys :help (\, (purecopy "Import public keys from a file"))))) (define-key menu [list-keys] (\` (menu-item (\, (purecopy "List Keys")) epa-list-keys :help (\, (purecopy "Browse your public keyring"))))) (define-key menu [separator-keys] menu-bar-separator) (define-key menu [sign-region] (\` (menu-item (\, (purecopy "Sign Region")) epa-sign-region :help (\, (purecopy "Create digital signature of the current region"))))) (define-key menu [verify-region] (\` (menu-item (\, (purecopy "Verify Region")) epa-verify-region :help (\, (purecopy "Verify digital signature of the current region"))))) (define-key menu [encrypt-region] (\` (menu-item (\, (purecopy "Encrypt Region")) epa-encrypt-region :help (\, (purecopy "Encrypt the current region"))))) (define-key menu [decrypt-region] (\` (menu-item (\, (purecopy "Decrypt Region")) epa-decrypt-region :help (\, (purecopy "Decrypt the current region"))))) (define-key menu [separator-file] menu-bar-separator) (define-key menu [sign-file] (\` (menu-item (\, (purecopy "Sign File...")) epa-sign-file :help (\, (purecopy "Create digital signature of a file"))))) (define-key menu [verify-file] (\` (menu-item (\, (purecopy "Verify File...")) epa-verify-file :help (\, (purecopy "Verify digital signature of a file"))))) (define-key menu [encrypt-file] (\` (menu-item (\, (purecopy "Encrypt File...")) epa-encrypt-file :help (\, (purecopy "Encrypt a file"))))) (define-key menu [decrypt-file] (\` (menu-item (\, (purecopy "Decrypt File...")) epa-decrypt-file :help (\, (purecopy "Decrypt a file"))))) menu)) nil [59393 61896])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [61898 62025])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (define-key menu [games] (\` (menu-item (\, (purecopy "Games")) (\, menu-bar-games-menu)))) (define-key menu [separator-games] menu-bar-separator) (define-key menu [encryption-decryption] (\` (menu-item (\, (purecopy "Encryption/Decryption")) (\, menu-bar-encryption-decryption-menu)))) (define-key menu [separator-encryption-decryption] menu-bar-separator) (define-key menu [simple-calculator] (\` (menu-item (\, (purecopy "Simple Calculator")) calculator :help (\, (purecopy "Invoke the Emacs built-in quick calculator"))))) (define-key menu [calc] (\` (menu-item (\, (purecopy "Programmable Calculator")) calc :help (\, (purecopy "Invoke the Emacs built-in full scientific calculator"))))) (define-key menu [calendar] (\` (menu-item (\, (purecopy "Calendar")) calendar :help (\, (purecopy "Invoke the Emacs built-in calendar"))))) (define-key menu [separator-net] menu-bar-separator) (define-key menu [directory-search] (\` (menu-item (\, (purecopy "Directory Search")) eudc-tools-menu))) (define-key menu [compose-mail] (\` (menu-item (format "Send Mail (with %s)" (send-mail-item-name)) compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help (\, (purecopy "Send a mail message"))))) (define-key menu [rmail] (\` (menu-item (format "Read Mail (with %s)" (read-mail-item-name)) menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help (\, (purecopy "Read your mail and reply to it"))))) (define-key menu [gnus] (\` (menu-item (\, (purecopy "Read Net News (Gnus)")) gnus :help (\, (purecopy "Read network news groups"))))) (define-key menu [separator-vc] menu-bar-separator) (define-key menu [pcl-cvs] (\` (menu-item (\, (purecopy "PCL-CVS")) cvs-global-menu))) (define-key menu [vc] nil) (define-key menu [separator-compare] menu-bar-separator) (define-key menu [epatch] (\` (menu-item (\, (purecopy "Apply Patch")) menu-bar-epatch-menu))) (define-key menu [ediff-merge] (\` (menu-item (\, (purecopy "Merge")) menu-bar-ediff-merge-menu))) (define-key menu [compare] (\` (menu-item (\, (purecopy "Compare (Ediff)")) menu-bar-ediff-menu))) (define-key menu [separator-spell] menu-bar-separator) (define-key menu [spell] (\` (menu-item (\, (purecopy "Spell Checking")) ispell-menu-map))) (define-key menu [separator-prog] menu-bar-separator) (define-key menu [semantic] (\` (menu-item (\, (purecopy "Source Code Parsers (Semantic)")) semantic-mode :help (\, (purecopy "Toggle automatic parsing in source code buffers (Semantic mode)")) :button (:toggle bound-and-true-p semantic-mode)))) (define-key menu [ede] (\` (menu-item (\, (purecopy "Project support (EDE)")) global-ede-mode :help (\, (purecopy "Toggle the Emacs Development Environment (Global EDE mode)")) :button (:toggle bound-and-true-p global-ede-mode)))) (define-key menu [gdb] (\` (menu-item (\, (purecopy "Debugger (GDB)...")) gdb :help (\, (purecopy "Debug a program from within Emacs with GDB"))))) (define-key menu [shell-on-region] (\` (menu-item (\, (purecopy "Shell Command on Region...")) shell-command-on-region :enable mark-active :help (\, (purecopy "Pass marked region to a shell command"))))) (define-key menu [shell] (\` (menu-item (\, (purecopy "Shell Command...")) shell-command :help (\, (purecopy "Invoke a shell command and catch its output"))))) (define-key menu [compile] (\` (menu-item (\, (purecopy "Compile...")) compile :help (\, (purecopy "Invoke compiler or Make, view compilation errors"))))) (define-key menu [grep] (\` (menu-item (\, (purecopy "Search Files (Grep)...")) grep :help (\, (purecopy "Search files for strings or regexps (with Grep)"))))) menu)) nil [62027 66259])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (define-key menu [mule-diag] (\` (menu-item (\, (purecopy "Show All of Mule Status")) mule-diag :visible (default-value (quote enable-multibyte-characters)) :help (\, (purecopy "Display multilingual environment settings"))))) (define-key menu [describe-coding-system-briefly] (\` (menu-item (\, (purecopy "Describe Coding System (Briefly)")) describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (define-key menu [describe-coding-system] (\` (menu-item (\, (purecopy "Describe Coding System...")) describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (define-key menu [describe-input-method] (\` (menu-item (\, (purecopy "Describe Input Method...")) describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help (\, (purecopy "Keyboard layout for specific input method"))))) (define-key menu [describe-language-environment] (\` (menu-item (\, (purecopy "Describe Language Environment")) (\, describe-language-environment-map)))) (define-key menu [separator-desc-mule] menu-bar-separator) (define-key menu [list-keybindings] (\` (menu-item (\, (purecopy "List Key Bindings")) describe-bindings :help (\, (purecopy "Display all current key bindings (keyboard shortcuts)"))))) (define-key menu [describe-current-display-table] (\` (menu-item (\, (purecopy "Describe Display Table")) describe-current-display-table :help (\, (purecopy "Describe the current display table"))))) (define-key menu [describe-package] (\` (menu-item (\, (purecopy "Describe Package...")) describe-package :help (\, (purecopy "Display documentation of a Lisp package"))))) (define-key menu [describe-face] (\` (menu-item (\, (purecopy "Describe Face...")) describe-face :help (\, (purecopy "Display the properties of a face"))))) (define-key menu [describe-variable] (\` (menu-item (\, (purecopy "Describe Variable...")) describe-variable :help (\, (purecopy "Display documentation of variable/option"))))) (define-key menu [describe-function] (\` (menu-item (\, (purecopy "Describe Function...")) describe-function :help (\, (purecopy "Display documentation of function/command"))))) (define-key menu [describe-key-1] (\` (menu-item (\, (purecopy "Describe Key or Mouse Operation...")) describe-key :help (\, (purecopy "Display documentation of command bound to a key, a click, or a menu-item"))))) (define-key menu [describe-mode] (\` (menu-item (\, (purecopy "Describe Buffer Modes")) describe-mode :help (\, (purecopy "Describe this buffer's major and minor mode"))))) menu)) nil [66288 69264])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [69266 69389])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [69391 69527])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [69529 69668])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [69670 69841])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [69843 70024])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (define-key menu [search-documentation-strings] (\` (menu-item (\, (purecopy "Search Documentation Strings...")) apropos-documentation :help (\, (purecopy "Find functions and variables whose doc strings match a regexp"))))) (define-key menu [find-any-object-by-name] (\` (menu-item (\, (purecopy "Find Any Object by Name...")) apropos :help (\, (purecopy "Find symbols of any kind whose names match a regexp"))))) (define-key menu [find-option-by-value] (\` (menu-item (\, (purecopy "Find Options by Value...")) apropos-value :help (\, (purecopy "Find variables whose values match a regexp"))))) (define-key menu [find-options-by-name] (\` (menu-item (\, (purecopy "Find Options by Name...")) apropos-variable :help (\, (purecopy "Find variables whose names match a regexp"))))) (define-key menu [find-commands-by-name] (\` (menu-item (\, (purecopy "Find Commands by Name...")) apropos-command :help (\, (purecopy "Find commands whose names match a regexp"))))) (define-key menu [sep1] menu-bar-separator) (define-key menu [lookup-command-in-manual] (\` (menu-item (\, (purecopy "Look Up Command in User Manual...")) Info-goto-emacs-command-node :help (\, (purecopy "Display manual section that describes a command"))))) (define-key menu [lookup-key-in-manual] (\` (menu-item (\, (purecopy "Look Up Key in User Manual...")) Info-goto-emacs-key-command-node :help (\, (purecopy "Display manual section that describes a key"))))) (define-key menu [lookup-subject-in-elisp-manual] (\` (menu-item (\, (purecopy "Look Up Subject in ELisp Manual...")) elisp-index-search :help (\, (purecopy "Find description of a subject in Emacs Lisp manual"))))) (define-key menu [lookup-subject-in-emacs-manual] (\` (menu-item (\, (purecopy "Look Up Subject in User Manual...")) emacs-index-search :help (\, (purecopy "Find description of a subject in Emacs User manual"))))) (define-key menu [emacs-terminology] (\` (menu-item (\, (purecopy "Emacs Terminology")) search-emacs-glossary :help (\, (purecopy "Display the Glossary section of the Emacs manual"))))) menu)) nil [70026 72371])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (define-key menu [man] (\` (menu-item (\, (purecopy "Read Man Page...")) manual-entry :help (\, (purecopy "Man-page docs for external commands and libraries"))))) (define-key menu [sep2] menu-bar-separator) (define-key menu [order-emacs-manuals] (\` (menu-item (\, (purecopy "Ordering Manuals")) view-order-manuals :help (\, (purecopy "How to order manuals from the Free Software Foundation"))))) (define-key menu [lookup-subject-in-all-manuals] (\` (menu-item (\, (purecopy "Lookup Subject in all Manuals...")) info-apropos :help (\, (purecopy "Find description of a subject in all installed manuals"))))) (define-key menu [other-manuals] (\` (menu-item (\, (purecopy "All Other Manuals (Info)")) Info-directory :help (\, (purecopy "Read any of the installed manuals"))))) (define-key menu [emacs-lisp-reference] (\` (menu-item (\, (purecopy "Emacs Lisp Reference")) menu-bar-read-lispref :help (\, (purecopy "Read the Emacs Lisp Reference manual"))))) (define-key menu [emacs-lisp-intro] (\` (menu-item (\, (purecopy "Introduction to Emacs Lisp")) menu-bar-read-lispintro :help (\, (purecopy "Read the Introduction to Emacs Lisp Programming"))))) menu)) nil [72373 73721])
            ("menu-bar-help-extra-packages" function (:user-visible-flag t) nil [73723 73974])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [73976 74124])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (define-key menu [about-gnu-project] (\` (menu-item (\, (purecopy "About GNU")) describe-gnu-project :help (\, (purecopy "About the GNU System, GNU Project, and GNU/Linux"))))) (define-key menu [about-emacs] (\` (menu-item (\, (purecopy "About Emacs")) about-emacs :help (\, (purecopy "Display version number, copyright info, and basic help"))))) (define-key menu [sep4] menu-bar-separator) (define-key menu [describe-no-warranty] (\` (menu-item (\, (purecopy "(Non)Warranty")) describe-no-warranty :help (\, (purecopy "Explain that Emacs has NO WARRANTY"))))) (define-key menu [describe-copying] (\` (menu-item (\, (purecopy "Copying Conditions")) describe-copying :help (\, (purecopy "Show the Emacs license (GPL)"))))) (define-key menu [getting-new-versions] (\` (menu-item (\, (purecopy "Getting New Versions")) describe-distribution :help (\, (purecopy "How to get the latest version of Emacs"))))) (define-key menu [sep2] menu-bar-separator) (define-key menu [external-packages] (\` (menu-item (\, (purecopy "Finding Extra Packages")) menu-bar-help-extra-packages :help (\, (purecopy "Lisp packages distributed separately for use in Emacs"))))) (define-key menu [find-emacs-packages] (\` (menu-item (\, (purecopy "Search Built-in Packages")) finder-by-keyword :help (\, (purecopy "Find built-in packages and features by keyword"))))) (define-key menu [more-manuals] (\` (menu-item (\, (purecopy "More Manuals")) (\, menu-bar-manuals-menu)))) (define-key menu [emacs-manual] (\` (menu-item (\, (purecopy "Read the Emacs Manual")) info-emacs-manual :help (\, (purecopy "Full documentation of Emacs features"))))) (define-key menu [describe] (\` (menu-item (\, (purecopy "Describe")) (\, menu-bar-describe-menu)))) (define-key menu [search-documentation] (\` (menu-item (\, (purecopy "Search Documentation")) (\, menu-bar-search-documentation-menu)))) (define-key menu [sep1] menu-bar-separator) (define-key menu [emacs-psychotherapist] (\` (menu-item (\, (purecopy "Emacs Psychotherapist")) doctor :help (\, (purecopy "Our doctor will help you feel better"))))) (define-key menu [send-emacs-bug-report] (\` (menu-item (\, (purecopy "Send Bug Report...")) report-emacs-bug :help (\, (purecopy "Send e-mail to Emacs maintainers"))))) (define-key menu [emacs-known-problems] (\` (menu-item (\, (purecopy "Emacs Known Problems")) view-emacs-problems :help (\, (purecopy "Read about known problems with Emacs"))))) (define-key menu [emacs-news] (\` (menu-item (\, (purecopy "Emacs News")) view-emacs-news :help (\, (purecopy "New features of this version"))))) (define-key menu [emacs-faq] (\` (menu-item (\, (purecopy "Emacs FAQ")) view-emacs-FAQ :help (\, (purecopy "Frequently asked (and answered) questions about Emacs"))))) (define-key menu [emacs-tutorial-language-specific] (\` (menu-item (\, (purecopy "Emacs Tutorial (choose language)...")) help-with-tutorial-spec-language :help (\, (purecopy "Learn how to use Emacs (choose a language)"))))) (define-key menu [emacs-tutorial] (\` (menu-item (\, (purecopy "Emacs Tutorial")) help-with-tutorial :help (\, (purecopy "Learn how to use Emacs"))))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (define-key menu [info-panel] (\` (menu-item (\, (purecopy "About Emacs...")) ns-do-emacs-info-panel)))) menu)) nil [74126 77903])
            ("define-key" code nil nil [77905 77993])
            ("define-key" code nil nil [77994 78089])
            ("define-key" code nil nil [78090 78184])
            ("define-key" code nil nil [78185 78270])
            ("define-key" code nil nil [78271 78356])
            ("if" code nil nil [78488 78753])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [78755 79059])
            ("menu-bar-non-minibuffer-window-p" function nil nil [79061 79422])
            ("kill-this-buffer" function (:user-visible-flag t) nil [79424 79708])
            ("kill-this-buffer-enabled-p" function nil nil [79710 80178])
            ("put" code nil nil [80180 80241])
            ("delete-frame-enabled-p" function nil nil [80316 80601])
            ("yank-menu-length" variable (:default-value 20) nil [80603 80714])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [80716 81707])
            ("put" code nil nil [81709 81755])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [81756 81996])
            ("buffers-menu-max-size" variable (:default-value 10) nil [82018 82362])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [82364 82713])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [82715 83459])
            ("buffers-menu-show-status" variable (:default-value t) nil [83461 83834])
            ("list-buffers-directory" variable nil nil [83836 83945])
            ("make-variable-buffer-local" code nil nil [83946 83998])
            ("menu-bar-select-buffer" function nil nil [84000 84089])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [84091 84202])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [84204 85074])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [85143 85193])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [85195 85383])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [85385 89556])
            ("add-hook" code nil nil [89558 89615])
            ("menu-bar-update-buffers" code nil nil [89617 89642])
            ("dolist" code nil nil [90265 90562])
            ("let" code nil nil [90564 91095])
            ("let" code nil nil [91097 92262])
            ("define-minor-mode" code nil nil [92265 93624])
            ("put" code nil nil [94068 94109])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [94111 94517])
            ("declare-function" code nil nil [94519 94584])
            ("declare-function" code nil nil [94585 94654])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [94656 95267])
            ("global-set-key" code nil nil [95269 95306])
            ("menu-bar" package nil nil [95308 95327]))          
      :file "menu-bar.el.gz"
      :pointmax 95355
      :fsize 20102
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "composite.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1126 1139])
            ("reference-point-alist" variable
               (:constant-flag t
                :default-value (quote ((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5))))
                nil [1142 3351])
            ("encode-composition-rule" function (:arguments ("rule")) nil [3369 4564])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4771 5437])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5772 6244])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6701 7011])
            ("compose-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [7013 9232])
            ("decompose-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9234 9606])
            ("compose-string" function (:arguments ("string" "start" "end" "components" "modification-func")) nil [9608 10572])
            ("decompose-string" function (:arguments ("string")) nil [10574 10746])
            ("compose-chars" function (:arguments ("args")) nil [10748 11626])
            ("find-composition" function (:arguments ("pos" "limit" "string" "detail-p")) nil [11628 13576])
            ("compose-chars-after" function (:arguments ("pos" "limit" "object")) nil [13580 15024])
            ("compose-last-chars" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [15026 15938])
            ("global-set-key" code nil nil [15940 15997])
            ("lgstring-header" function (:arguments ("gstring")) nil [16118 16171])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16172 16243])
            ("lgstring-font" function (:arguments ("gstring")) nil [16244 16313])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16314 16390])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16391 16469])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16470 16525])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16526 16585])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16586 16646])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16647 16709])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16710 16786])
            ("lglyph-from" function (:arguments ("glyph")) nil [16788 16833])
            ("lglyph-to" function (:arguments ("glyph")) nil [16834 16877])
            ("lglyph-char" function (:arguments ("glyph")) nil [16878 16923])
            ("lglyph-code" function (:arguments ("glyph")) nil [16924 16969])
            ("lglyph-width" function (:arguments ("glyph")) nil [16970 17016])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [17017 17066])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17067 17116])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17117 17164])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17165 17213])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17214 17265])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17267 17360])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17361 17420])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17421 17480])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17481 17543])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17544 17677])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17679 17731])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17733 18232])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [18234 18807])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [18809 20023])
            ("compose-gstring-for-graphic" function (:arguments ("gstring")) nil [20025 24342])
            ("let" code nil nil [24344 24624])
            ("compose-gstring-for-terminal" function (:arguments ("gstring")) nil [24626 26569])
            ("auto-compose-chars" function (:arguments ("func" "from" "to" "font-object" "string")) nil [26572 27511])
            ("put" code nil nil [27513 27560])
            ("make-variable-buffer-local" code nil nil [27562 27617])
            ("setq-default" code nil nil [27618 27678])
            ("define-minor-mode" code nil nil [27695 28296])
            ("make-variable-buffer-local" code nil nil [28348 28399])
            ("define-minor-mode" code nil nil [28416 28784])
            ("defalias" code nil nil [28786 28844]))          
      :file "composite.el.gz"
      :pointmax 28876
      :fsize 8065
      :lastmodtime '(20352 65510)
      :unmatched-syntax '((close-paren 1139 . 1140) (symbol 1108 . 1125) (open-paren 1107 . 1108)))
    (semanticdb-table "term.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("term-protocol-version" variable
               (:constant-flag t
                :default-value "0.96")
                nil [14740 14779])
            ("cl" include nil nil [14824 14837])
            ("ange-ftp" include nil nil [14802 14821])
            ("ring" include nil nil [14839 14854])
            ("ehelp" include nil nil [14855 14871])
            ("term" customgroup (:user-visible-flag t) nil [14873 14957])
            ("term-input-ring-size" variable (:default-value 32) nil [15438 15500])
            ("term-height" variable nil nil [16235 16255])
            ("term-width" variable nil nil [16304 16323])
            ("term-home-marker" variable nil nil [16375 16400])
            ("term-saved-home-marker" variable nil nil [16452 16582])
            ("term-start-line-column" variable nil nil [16583 16681])
            ("term-current-column" variable nil nil [16682 16757])
            ("term-current-row" variable nil nil [16758 16855])
            ("term-insert-mode" variable nil nil [16856 16885])
            ("term-vertical-motion" variable nil nil [16886 16915])
            ("term-terminal-state" variable nil nil [16916 17315])
            ("term-kill-echo-list" variable nil nil [17316 17402])
            ("term-terminal-parameter" variable nil nil [17403 17435])
            ("term-terminal-previous-parameter" variable nil nil [17436 17477])
            ("term-current-face" variable (:default-value (quote default)) nil [17478 17513])
            ("term-scroll-start" variable nil nil [17514 17591])
            ("term-scroll-end" variable nil nil [17592 17616])
            ("term-pager-count" variable nil nil [17671 17772])
            ("term-saved-cursor" variable nil nil [17773 17803])
            ("term-command-hook" variable nil nil [17804 17830])
            ("term-log-buffer" variable nil nil [17831 17859])
            ("term-scroll-with-delete" variable nil nil [17860 18141])
            ("term-pending-delete-marker" variable nil nil [18142 18177])
            ("term-old-mode-map" variable nil nil [18349 18421])
            ("term-old-mode-line-format" variable nil nil [18422 18456])
            ("term-pager-old-local-map" variable nil nil [18500 18570])
            ("term-pager-old-filter" variable nil nil [18571 18601])
            ("explicit-shell-file-name" variable nil nil [18640 18807])
            ("term-prompt-regexp" variable (:default-value "^") nil [18809 19246])
            ("term-delimiter-argument-list" variable nil nil [19248 19677])
            ("term-input-autoexpand" variable nil nil [19679 20197])
            ("term-input-ignoredups" variable nil nil [20199 20413])
            ("term-input-ring-file-name" variable nil nil [20415 20685])
            ("term-scroll-to-bottom-on-output" variable nil nil [20687 21120])
            ("term-scroll-show-maximum-output" variable nil nil [21122 21412])
            ("term-pending-frame" variable nil nil [21583 21614])
            ("term-get-old-input" variable (:default-value (function term-get-old-input-default)) nil [21656 22036])
            ("term-dynamic-complete-functions" variable (:default-value (quote (term-replace-by-expanded-history term-dynamic-complete-filename))) nil [22038 22338])
            ("term-input-filter" variable (:default-value (function (lambda (str) (not (string-match "\\`\\s *\\'" str))))) nil [22340 22626])
            ("term-input-filter-functions" variable (:default-value (quote nil)) nil [22628 22831])
            ("term-input-sender" variable (:default-value (function term-simple-send)) nil [22833 23185])
            ("term-eol-on-send" variable (:default-value t) nil [23187 23338])
            ("term-mode-hook" variable (:default-value (quote nil)) nil [23340 23483])
            ("term-exec-hook" variable (:default-value (quote nil)) nil [23485 23865])
            ("term-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote term-previous-input)) (define-key map "n" (quote term-next-input)) (define-key map "r" (quote term-previous-matching-input)) (define-key map "s" (quote term-next-matching-input)) (unless (featurep (quote xemacs)) (define-key map [138412146] (quote term-previous-matching-input-from-input)) (define-key map [138412147] (quote term-next-matching-input-from-input))) (define-key map "" (quote term-show-output)) (define-key map "" (quote term-send-input)) (define-key map "" (quote term-delchar-or-maybe-eof)) (define-key map "" (quote term-bol)) (define-key map "" (quote term-kill-input)) (define-key map "" (quote backward-kill-word)) (define-key map "" (quote term-interrupt-subjob)) (define-key map "" (quote term-stop-subjob)) (define-key map "" (quote term-quit-subjob)) (define-key map "" (quote term-copy-old-input)) (define-key map "" (quote term-kill-output)) (define-key map "" (quote term-show-output)) (define-key map "" (quote term-show-maximum-output)) (define-key map "" (quote term-dynamic-list-input-ring)) (define-key map "" (quote term-next-prompt)) (define-key map "" (quote term-previous-prompt)) (define-key map "" (quote term-send-eof)) (define-key map "" (quote term-char-mode)) (define-key map "
" (quote term-line-mode)) (define-key map "" (quote term-pager-toggle)) map)) nil [23867 26139])
            ("term-raw-map" variable nil nil [26141 26240])
            ("term-escape-char" variable nil nil [26241 26386])
            ("term-raw-escape-map" variable nil nil [26387 26419])
            ("term-pager-break-map" variable nil nil [26421 26454])
            ("term-ptyp" variable (:default-value t) nil [26456 26602])
            ("term-last-input-match" variable nil nil [26604 26735])
            ("term-input-ring" variable nil nil [26737 26765])
            ("term-last-input-start" variable nil nil [26766 26796])
            ("term-last-input-end" variable nil nil [26797 26825])
            ("term-input-ring-index" variable nil nil [26826 26903])
            ("term-matching-input-from-input-string" variable nil nil [26904 27003])
            ("term-pager-filter" variable (:default-value t) nil [27118 27146])
            ("put" code nil nil [27148 27223])
            ("put" code nil nil [27224 27265])
            ("put" code nil nil [27266 27313])
            ("put" code nil nil [27314 27361])
            ("put" code nil nil [27362 27415])
            ("put" code nil nil [27416 27473])
            ("put" code nil nil [27474 27531])
            ("put" code nil nil [27532 27567])
            ("term-in-char-mode" function nil nil [27569 27639])
            ("term-in-line-mode" function nil nil [27640 27698])
            ("term-pager-enabled" function nil nil [27742 27792])
            ("term-handling-pager" function nil nil [27793 27852])
            ("term-using-alternate-sub-buffer" function nil nil [27853 27922])
            ("term-signals-menu" variable nil nil [27924 27950])
            ("term-terminal-menu" variable nil nil [27951 27978])
            ("term-ansi-at-host" variable nil nil [28019 28049])
            ("term-ansi-at-dir" variable nil nil [28050 28079])
            ("term-ansi-at-user" variable nil nil [28080 28110])
            ("term-ansi-at-message" variable nil nil [28111 28144])
            ("term-ansi-at-save-user" variable nil nil [28145 28180])
            ("term-ansi-at-save-pwd" variable nil nil [28181 28215])
            ("term-ansi-at-save-anon" variable nil nil [28216 28251])
            ("term-ansi-current-bold" variable nil nil [28252 28287])
            ("term-ansi-current-color" variable nil nil [28288 28322])
            ("term-ansi-face-already-done" variable nil nil [28323 28363])
            ("term-ansi-current-bg-color" variable nil nil [28364 28401])
            ("term-ansi-current-underline" variable nil nil [28402 28442])
            ("term-ansi-current-reverse" variable nil nil [28443 28481])
            ("term-ansi-current-invisible" variable nil nil [28482 28522])
            ("term-terminal-more-parameters" variable nil nil [28582 28622])
            ("term-terminal-previous-parameter-2" variable (:default-value -1) nil [28623 28669])
            ("term-terminal-previous-parameter-3" variable (:default-value -1) nil [28670 28716])
            ("term-terminal-previous-parameter-4" variable (:default-value -1) nil [28717 28763])
            ("term-default-fg-color" variable (:default-value (face-foreground term-current-face)) nil [28780 29041])
            ("term-default-bg-color" variable (:default-value (face-background term-current-face)) nil [29043 29304])
            ("ansi-term-color-vector" variable (:default-value [unspecified "black" "red3" "green3" "yellow3" "blue2" "magenta3" "cyan3" "white"]) nil [29375 29494])
            ("term-buffer-maximum-size" variable (:default-value 2048) nil [29535 29825])
            ("when" code nil nil [29828 30145])
            ("unless" code nil nil [30161 34676])
            ("term-set-escape-char" function (:arguments ("c")) nil [34709 35624])
            ("let*" code nil nil [35626 37250])
            ("term-set-escape-char" code nil nil [37252 37280])
            ("overflow-newline-into-fringe" variable nil nil [37282 37319])
            ("term-window-width" function nil nil [37321 37501])
            ("put" code nil nil [37505 37542])
            ("term-display-table" variable (:default-value (let ((dt (or (copy-sequence standard-display-table) (make-display-table))) i) (setq i 0) (while (< i 10) (aset dt i (vector i)) (setq i (1+ i))) (setq i 11) (while (< i 32) (aset dt i (vector i)) (setq i (1+ i))) (setq i 128) (while (< i 256) (aset dt i (vector i)) (setq i (1+ i))) dt)) nil [37602 38040])
            ("term-ansi-reset" function nil nil [38042 38624])
            ("term-mode" function (:user-visible-flag t) nil [38626 45424])
            ("term-reset-size" function (:arguments ("height" "width")) nil [45427 45654])
            ("term-check-kill-echo-list" function nil nil [46089 46715])
            ("term-check-size" function (:arguments ("process")) nil [46717 46967])
            ("term-send-raw-string" function (:arguments ("chars")) nil [46969 47415])
            ("term-send-raw" function (:user-visible-flag t) nil [47417 47653])
            ("term-send-raw-meta" function nil nil [47655 48193])
            ("term-mouse-paste" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [48195 48984])
            ("term-paste" function (:user-visible-flag t) nil [48986 49119])
            ("term-send-up" function nil nil [49394 49464])
            ("term-send-down" function nil nil [49465 49535])
            ("term-send-right" function nil nil [49536 49606])
            ("term-send-left" function nil nil [49607 49677])
            ("term-send-home" function nil nil [49678 49749])
            ("term-send-insert" function nil nil [49750 49821])
            ("term-send-end" function nil nil [49822 49893])
            ("term-send-prior" function nil nil [49894 49965])
            ("term-send-next" function nil nil [49966 50037])
            ("term-send-del" function nil nil [50038 50109])
            ("term-send-backspace" function nil nil [50110 50185])
            ("term-char-mode" function (:user-visible-flag t) nil [50188 51013])
            ("term-line-mode" function (:user-visible-flag t) nil [51015 51345])
            ("term-update-mode-line" function nil nil [51347 52723])
            ("term-check-proc" function (:arguments ("buffer")) nil [52725 53005])
            ("make-term" function (:arguments ("name" "program" "startfile" "switches")) nil [53022 53825])
            ("term" function
               (:user-visible-flag t
                :arguments ("program"))
                nil [53842 54361])
            ("term-exec" function (:arguments ("buffer" "name" "command" "startfile" "switches")) nil [54363 55753])
            ("term-sentinel" function (:arguments ("proc" "msg")) nil [55755 56518])
            ("term-handle-exit" function (:arguments ("process-name" "msg")) nil [56520 56990])
            ("term-term-name" variable (:default-value "eterm-color") nil [56993 57128])
            ("term-termcap-format" variable (:default-value "%s%s:li#%d:co#%d:cl=\\E[H\\E[J:cd=\\E[J:bs:am:xn:cm=\\E[%%i%%d;%%dH:nd=\\E[C:up=\\E[A:ce=\\E[K:ho=\\E[H:pt:al=\\E[L:dl=\\E[M:DL=\\E[%%dM:AL=\\E[%%dL:cs=\\E[%%i%%d;%%dr:sf=^J:dc=\\E[P:DC=\\E[%%dP:IC=\\E[%%d@:im=\\E[4h:ei=\\E[4l:mi::so=\\E[7m:se=\\E[m:us=\\E[4m:ue=\\E[m:md=\\E[1m:mr=\\E[7m:me=\\E[m:UP=\\E[%%dA:DO=\\E[%%dB:LE=\\E[%%dD:RI=\\E[%%dC:kl=\\EOD:kd=\\EOB:kr=\\EOC:ku=\\EOA:kN=\\E[6~:kP=\\E[5~:@7=\\E[4~:kh=\\E[1~:mk=\\E[8m:cb=\\E[1K:op=\\E[39;49m:Co#8:pa#64:AB=\\E[4%%dm:AF=\\E[3%%dm:cr=^M:bl=^G:do=^J:le=^H:ta=^I:se=\\E[27m:ue=\\E24m:kb=^?:kD=^[[3~:sc=\\E7:rc=\\E8:r1=\\Ec:") nil [57219 57967])
            ("term-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [58068 59678])
            ("term-read-input-ring" function (:arguments ("silent")) nil [60778 62695])
            ("term-write-input-ring" function nil nil [62697 63880])
            ("term-dynamic-list-input-ring" function (:user-visible-flag t) nil [63883 64927])
            ("term-regexp-arg" function (:arguments ("prompt")) nil [64930 65379])
            ("term-search-arg" function (:arguments ("arg")) nil [65381 65783])
            ("term-search-start" function (:arguments ("arg")) nil [65785 66252])
            ("term-previous-input-string" function (:arguments ("arg")) nil [66286 66571])
            ("term-previous-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [66573 66711])
            ("term-next-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [66713 66837])
            ("term-previous-matching-input-string" function (:arguments ("regexp" "arg")) nil [66839 67130])
            ("term-previous-matching-input-string-position" function (:arguments ("regexp" "arg" "start")) nil [67132 68322])
            ("term-previous-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [68324 69114])
            ("term-next-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [69116 69503])
            ("term-previous-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [69505 70241])
            ("term-next-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [70243 70607])
            ("term-replace-by-expanded-history" function
               (:user-visible-flag t
                :arguments ("silent"))
                nil [70610 71836])
            ("term-replace-by-expanded-history-before-point" function (:arguments ("silent")) nil [71839 75466])
            ("term-magic-space" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [75469 75730])
            ("term-within-quotes" function (:arguments ("beg" "end")) nil [75733 76054])
            ("term-how-many-region" function (:arguments ("regexp" "beg" "end")) nil [76056 76319])
            ("term-args" function (:arguments ("string" "begin" "end")) nil [76321 77090])
            ("term-delim-arg" function (:arguments ("arg")) nil [77228 77766])
            ("term-arguments" function (:arguments ("string" "nth" "mth")) nil [77768 79260])
            ("term-send-input" function (:user-visible-flag t) nil [79311 83536])
            ("term-get-old-input-default" function nil nil [83538 83845])
            ("term-copy-old-input" function (:user-visible-flag t) nil [83847 84231])
            ("term-skip-prompt" function nil nil [84233 84539])
            ("term-after-pmark-p" function nil nil [84542 85012])
            ("term-simple-send" function (:arguments ("proc" "string")) nil [85014 85263])
            ("term-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85265 85661])
            ("term-read-noecho" function (:arguments ("prompt" "stars")) nil [85856 87859])
            ("term-send-invisible" function
               (:user-visible-flag t
                :arguments ("str" "proc"))
                nil [87861 88585])
            ("term-input-chunk-size" variable (:default-value 512) nil [88626 88840])
            ("term-send-string" function (:arguments ("proc" "str")) nil [88842 89503])
            ("term-send-region" function (:arguments ("proc" "start" "end")) nil [89505 89791])
            ("term-kill-output" function (:user-visible-flag t) nil [89821 90127])
            ("term-show-output" function (:user-visible-flag t) nil [90129 90439])
            ("term-interrupt-subjob" function (:user-visible-flag t) nil [90441 90559])
            ("term-kill-subjob" function (:user-visible-flag t) nil [90561 90679])
            ("term-quit-subjob" function (:user-visible-flag t) nil [90681 90799])
            ("term-stop-subjob" function (:user-visible-flag t) nil [90801 91171])
            ("term-continue-subjob" function (:user-visible-flag t) nil [91173 91369])
            ("term-kill-input" function (:user-visible-flag t) nil [91371 91648])
            ("term-delchar-or-maybe-eof" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [91650 91852])
            ("term-send-eof" function (:user-visible-flag t) nil [91854 91964])
            ("term-backward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [91966 92595])
            ("term-forward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [92597 92997])
            ("term-next-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [93000 93255])
            ("term-previous-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [93257 93416])
            ("term-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [96602 96885])
            ("term-check-source" function (:arguments ("fname")) nil [97327 97601])
            ("term-extract-string" function nil nil [98722 99173])
            ("term-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [99175 99925])
            ("term-proc-query" function (:arguments ("proc" "str")) nil [101207 102093])
            ("term-horizontal-column" function nil nil [102211 102297])
            ("term-vertical-motion" function (:arguments ("count")) nil [102362 102447])
            ("term-buffer-vertical-motion" function (:arguments ("count")) nil [102596 103947])
            ("term-start-line-column" function nil nil [104008 104237])
            ("term-current-column" function nil nil [104309 104417])
            ("term-move-columns" function (:arguments ("delta")) nil [104492 104941])
            ("term-insert-char" function (:arguments ("char" "count")) nil [104995 105148])
            ("term-current-row" function nil nil [105150 105370])
            ("term-adjust-current-row-cache" function (:arguments ("delta")) nil [105372 105509])
            ("term-terminal-pos" function nil nil [105511 105775])
            ("term-handle-ansi-terminal-messages" function (:arguments ("message")) nil [105871 107907])
            ("term-emulate-terminal" function (:arguments ("proc" "str")) nil [108060 122295])
            ("term-handle-deferred-scroll" function nil nil [122297 122581])
            ("term-reset-terminal" function nil nil [122583 122992])
            ("term-bold-attribute" variable (:default-value (quote (:weight bold))) nil [123128 123257])
            ("term-handle-colors-array" function (:arguments ("parameter")) nil [123259 126816])
            ("term-handle-ansi-escape" function (:arguments ("proc" "char")) nil [126930 131075])
            ("term-set-scroll-region" function (:arguments ("top" "bottom")) nil [131077 131738])
            ("term-command-hook" function (:arguments ("string")) nil [132990 133728])
            ("term-display-line" function (:arguments ("true-file" "line")) nil [133960 134067])
            ("term-display-buffer-line" function (:arguments ("buffer" "line")) nil [134069 134630])
            ("term-goto-home" function nil nil [134853 135067])
            ("term-goto" function (:arguments ("row" "col")) nil [135069 135422])
            ("term-process-pager" function nil nil [135489 137772])
            ("term-pager-line" function (:arguments ("lines")) nil [137774 138090])
            ("term-pager-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [138092 138262])
            ("term-pager-bob" function nil nil [138316 138488])
            ("term-pager-eob" function nil nil [138536 138690])
            ("term-pager-back-line" function (:arguments ("lines")) nil [138692 138954])
            ("term-pager-back-page" function (:arguments ("arg")) nil [138956 139055])
            ("term-pager-discard" function nil nil [139057 139202])
            ("term-pager-disable" function nil nil [139303 139467])
            ("term-pager-enable" function nil nil [139497 139668])
            ("term-pager-toggle" function nil nil [139670 139783])
            ("unless" code nil nil [139785 140168])
            ("term-pager-help" function (:user-visible-flag t) nil [140170 141361])
            ("term-pager-continue" function (:arguments ("new-count")) nil [141363 141799])
            ("term-handle-scroll" function (:arguments ("down")) nil [141940 143542])
            ("term-down" function (:arguments ("down" "check-for-scroll")) nil [143544 144660])
            ("term-unwrap-line" function nil nil [144845 144922])
            ("term-erase-in-line" function (:arguments ("kind")) nil [144924 146169])
            ("term-erase-in-display" function (:arguments ("kind")) nil [146171 146952])
            ("term-delete-chars" function (:arguments ("count")) nil [146954 147191])
            ("term-insert-spaces" function (:arguments ("count")) nil [147370 148083])
            ("term-delete-lines" function (:arguments ("lines")) nil [148085 148976])
            ("term-insert-lines" function (:arguments ("lines")) nil [148978 150253])
            ("term-start-output-log" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [150256 150963])
            ("term-stop-output-log" function (:user-visible-flag t) nil [150965 151088])
            ("term-show-maximum-output" function (:user-visible-flag t) nil [151090 151242])
            ("term-load-hook" variable nil nil [151281 151394])
            ("run-hooks" code nil nil [151396 151423])
            ("term-completion-autolist" variable nil nil [152380 152568])
            ("term-completion-addsuffix" variable (:default-value t) nil [152570 153056])
            ("term-completion-recexact" variable nil nil [153058 153318])
            ("term-completion-fignore" variable nil nil [153320 153643])
            ("term-file-name-prefix" variable nil nil [153645 153850])
            ("term-directory" function (:arguments ("directory")) nil [153853 154082])
            ("term-word" function (:arguments ("word-chars")) nil [154085 154699])
            ("term-match-partial-filename" function nil nil [154702 154969])
            ("term-dynamic-complete" function (:user-visible-flag t) nil [154972 155387])
            ("term-dynamic-complete-filename" function (:user-visible-flag t) nil [155390 156321])
            ("term-dynamic-complete-as-filename" function nil nil [156323 158901])
            ("term-replace-by-expanded-filename" function (:user-visible-flag t) nil [158904 159552])
            ("term-dynamic-simple-complete" function (:arguments ("stub" "candidates")) nil [159555 161483])
            ("make-obsolete" code nil nil [161484 161558])
            ("term-dynamic-list-filename-completions" function (:user-visible-flag t) nil [161561 162129])
            ("term-dynamic-list-completions" function (:arguments ("completions")) nil [162132 163098])
            ("term-ansi-make-term" function (:arguments ("name" "program" "startfile" "switches")) nil [163156 163925])
            ("term-ansi-buffer-name" variable nil nil [163927 163961])
            ("term-ansi-default-program" variable nil nil [163962 164000])
            ("term-ansi-buffer-base-name" variable nil nil [164001 164040])
            ("ansi-term" function
               (:user-visible-flag t
                :arguments ("program" "new-buffer-name"))
                nil [164057 165334])
            ("serial-port-is-file-p" function nil nil [165438 165769])
            ("serial-name-history" variable (:default-value (if (serial-port-is-file-p) (or (when (file-exists-p "/dev/ttys0") (list "/dev/ttys0")) (when (file-exists-p "/dev/ttyS0") (list "/dev/ttyS0"))) (list "COM1"))) nil [165771 166037])
            ("serial-speed-history" variable (:default-value (list "9600" "1200" "2400" "4800" "9600" "14400" "19200" "28800" "38400" "57600" "115200")) nil [166039 166350])
            ("serial-nice-speed-history" function nil nil [166352 166741])
            ("serial-no-speed" variable
               (:constant-flag t
                :default-value "nil")
                nil [166743 167010])
            ("serial-supported-or-barf" function nil nil [167012 167212])
            ("serial-read-name" function nil nil [167214 169304])
            ("serial-read-speed" function nil nil [169306 170279])
            ("serial-term" function
               (:user-visible-flag t
                :arguments ("port" "speed"))
                nil [170296 171464])
            ("serial-mode-line-speed-menu" variable nil nil [171466 171506])
            ("serial-mode-line-config-menu" variable nil nil [171507 171548])
            ("serial-speed" function nil nil [171550 171766])
            ("serial-mode-line-speed-menu-1" function (:arguments ("event")) nil [171768 172162])
            ("serial-mode-line-speed-menu" function (:arguments ("event")) nil [172164 172258])
            ("serial-update-speed-menu" function nil nil [172260 173257])
            ("serial-mode-line-config-menu-1" function (:arguments ("event")) nil [173259 173699])
            ("serial-mode-line-config-menu" function (:arguments ("event")) nil [173701 173797])
            ("serial-update-config-menu" function nil nil [173799 175143])
            ("term" package nil nil [178694 178709]))          
      :file "term.el.gz"
      :pointmax 178733
      :fsize 49460
      :lastmodtime '(20400 62402)
      :unmatched-syntax '((close-paren 14837 . 14838) (symbol 14782 . 14799) (open-paren 14781 . 14782)))
    (semanticdb-table "rot13.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("rot13-display-table" variable (:default-value (let ((table (make-display-table)) (i 0)) (while (< i 26) (aset table (+ i 97) (vector (+ (% (+ i 13) 26) 97))) (aset table (+ i 65) (vector (+ (% (+ i 13) 26) 65))) (setq i (1+ i))) table)) nil [1421 1702])
            ("rot13-translate-table" variable (:default-value (let ((str (make-string 127 0)) (i 0)) (while (< i 127) (aset str i i) (setq i (1+ i))) (setq i 0) (while (< i 26) (aset str (+ i 97) (+ (% (+ i 13) 26) 97)) (aset str (+ i 65) (+ (% (+ i 13) 26) 65)) (setq i (1+ i))) str)) nil [1704 2046])
            ("rot13" function (:arguments ("object" "start" "end")) nil [2063 2275])
            ("rot13-string" function (:arguments ("string")) nil [2292 2464])
            ("rot13-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [2481 2656])
            ("rot13-other-window" function (:user-visible-flag t) nil [2673 3142])
            ("toggle-rot13-mode" function (:user-visible-flag t) nil [3159 3515])
            ("rot13" package nil nil [3517 3533]))          
      :file "rot13.el.gz"
      :pointmax 3558
      :fsize 1461
      :lastmodtime '(20352 65510)
      :unmatched-syntax nil)
    (semanticdb-table "wid-edit.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("widget-event-point" function (:arguments ("event")) nil [1866 2000])
            ("widget-button-release-event-p" function (:arguments ("event")) nil [2002 2289])
            ("widgets" customgroup (:user-visible-flag t) nil [2311 2522])
            ("widget-documentation" customgroup (:user-visible-flag t) nil [2524 2639])
            ("widget-faces" customgroup (:user-visible-flag t) nil [2641 2740])
            ("widget-documentation-face" variable (:default-value (quote widget-documentation)) nil [2742 2921])
            ("widget-documentation" variable
               (:default-value (quote ((((class color) (background dark)) (:foreground "lime green")) (((class color) (background light)) (:foreground "dark green")) (t nil)))
                :type "face")
                nil [2923 3213])
            ("define-obsolete-face-alias" code nil nil [3214 3300])
            ("widget-button-face" variable (:default-value (quote widget-button)) nil [3302 3453])
            ("widget-button" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [3455 3557])
            ("define-obsolete-face-alias" code nil nil [3558 3628])
            ("widget-mouse-face" variable (:default-value (quote highlight)) nil [3630 3770])
            ("widget-field" variable
               (:default-value (quote ((((type tty)) :background "yellow3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic)))
                :type "face")
                nil [3966 4300])
            ("define-obsolete-face-alias" code nil nil [4301 4369])
            ("widget-single-line-field" variable
               (:default-value (quote ((((type tty)) :background "green3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic)))
                :type "face")
                nil [4371 4794])
            ("define-obsolete-face-alias" code nil nil [4795 4889])
            ("widget-princ-to-string" function (:arguments ("object")) nil [5384 5621])
            ("widget-clear-undo" function nil nil [5623 5747])
            ("widget-menu-max-size" variable (:default-value 40) nil [5749 5918])
            ("widget-menu-max-shortcuts" variable (:default-value 40) nil [5920 6128])
            ("widget-menu-minibuffer-flag" variable nil nil [6130 6332])
            ("widget-choose" function (:arguments ("title" "items" "event")) nil [6334 9954])
            ("widget-remove-if" function (:arguments ("predicate" "list")) nil [9956 10178])
            ("widget-field-add-space" variable (:constant-flag t) nil [10341 10529])
            ("widget-field-use-before-change" variable (:default-value t) nil [10531 10759])
            ("widget-specify-field" function (:arguments ("widget" "from" "to")) nil [10761 12873])
            ("widget-specify-secret" function (:arguments ("field")) nil [12875 13497])
            ("widget-specify-button" function (:arguments ("widget" "from" "to")) nil [13499 14809])
            ("widget-mouse-help" function (:arguments ("_window" "overlay" "_point")) nil [14811 15168])
            ("widget-specify-sample" function (:arguments ("widget" "from" "to")) nil [15170 15478])
            ("widget-specify-doc" function (:arguments ("widget" "from" "to")) nil [15480 15821])
            ("widget-specify-insert" function (:arguments ("form")) nil [15823 16110])
            ("widget-inactive" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [16112 16221])
            ("define-obsolete-face-alias" code nil nil [16222 16298])
            ("widget-specify-inactive" function (:arguments ("widget" "from" "to")) nil [16300 16876])
            ("widget-overlay-inactive" function (:arguments ("_junk")) nil [16878 17041])
            ("widget-specify-active" function (:arguments ("widget")) nil [17044 17272])
            ("widget-type" function (:arguments ("widget")) nil [17298 17398])
            ("widgetp" function (:arguments ("widget")) nil [17415 17621])
            ("widget-get-indirect" function (:arguments ("widget" "property")) nil [17623 17896])
            ("widget-member" function (:arguments ("widget" "property")) nil [17898 18134])
            ("widget-value" function (:arguments ("widget")) nil [18136 18284])
            ("widget-value-set" function (:arguments ("widget" "value")) nil [18286 18461])
            ("widget-default-get" function (:arguments ("widget")) nil [18463 18666])
            ("widget-match-inline" function (:arguments ("widget" "vals")) nil [18668 18947])
            ("widget-apply-action" function (:arguments ("widget" "event")) nil [18949 19189])
            ("widget-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [19262 19807])
            ("widget-get-sibling" function (:arguments ("widget")) nil [19809 20221])
            ("widget-map-buttons" function (:arguments ("function" "buffer" "maparg")) nil [20223 20887])
            ("widget-image-directory" variable (:default-value (file-name-as-directory (expand-file-name "images/custom" data-directory))) nil [20902 21179])
            ("widget-image-enable" variable (:default-value t) nil [21181 21328])
            ("widget-image-conversion" variable (:default-value (quote ((xpm ".xpm") (gif ".gif") (png ".png") (jpeg ".jpg" ".jpeg") (xbm ".xbm")))) nil [21330 21679])
            ("widget-image-find" function (:arguments ("image")) nil [21681 22507])
            ("widget-button-pressed-face" variable (:default-value (quote widget-button-pressed)) nil [22509 22684])
            ("widget-image-insert" function (:arguments ("widget" "tag" "image" "_down" "_inactive")) nil [22686 23275])
            ("widget-move-and-invoke" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [23277 23554])
            ("widget-button" customgroup (:user-visible-flag t) nil [23570 23658])
            ("widget-button-prefix" variable nil nil [23660 23774])
            ("widget-button-suffix" variable nil nil [23776 23890])
            ("widget-create" function (:arguments ("type" "args")) nil [23930 24146])
            ("widget-create-child-and-convert" function (:arguments ("parent" "type" "args")) nil [24148 24668])
            ("widget-create-child" function (:arguments ("parent" "type")) nil [24670 25059])
            ("widget-create-child-value" function (:arguments ("parent" "type" "value")) nil [25061 25557])
            ("widget-delete" function (:arguments ("widget")) nil [25574 25655])
            ("widget-copy" function (:arguments ("widget")) nil [25657 25763])
            ("widget-convert" function (:arguments ("type" "args")) nil [25765 27651])
            ("widget-insert" function (:arguments ("args")) nil [27668 27858])
            ("widget-convert-text" function (:arguments ("type" "from" "to" "button-from" "button-to" "args")) nil [27860 28660])
            ("widget-convert-button" function (:arguments ("type" "from" "to" "args")) nil [28662 29041])
            ("widget-leave-text" function (:arguments ("widget")) nil [29043 29660])
            ("define-obsolete-function-alias" code nil nil [29903 29989])
            ("widget-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote widget-forward)) (define-key map "	" (quote widget-backward)) (define-key map [(shift tab)] (quote widget-backward)) (put (quote widget-backward) :advertised-binding [(shift tab)]) (define-key map [backtab] (quote widget-backward)) (define-key map [down-mouse-2] (quote widget-button-click)) (define-key map [down-mouse-1] (quote widget-button-click)) (define-key map [(control 109)] (quote widget-button-press)) map)) nil [30006 30803])
            ("widget-global-map" variable (:default-value global-map) nil [30805 30902])
            ("make-variable-buffer-local" code nil nil [30903 30950])
            ("widget-field-keymap" variable (:default-value (let ((map (copy-keymap widget-keymap))) (define-key map "" (quote widget-kill-line)) (define-key map "\211" (quote widget-complete)) (define-key map "" (quote widget-field-activate)) (define-key map "" (quote widget-end-of-line)) map)) nil [30952 31452])
            ("widget-text-keymap" variable (:default-value (let ((map (copy-keymap widget-keymap))) (define-key map "" (quote widget-end-of-line)) map)) nil [31454 31805])
            ("widget-field-activate" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [31807 32094])
            ("widget-button-pressed" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1")) (((class color)) (:foreground "red")) (t (:weight bold :underline t))))
                :type "face")
                nil [32096 32338])
            ("define-obsolete-face-alias" code nil nil [32339 32427])
            ("widget-button-click-moves-point" variable nil nil [32429 32626])
            ("widget-button-click" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [32628 36590])
            ("widget-button-press" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [36592 36925])
            ("widget-tabable-at" function (:arguments ("pos")) nil [36927 37213])
            ("widget-use-overlay-change" variable (:default-value t) nil [37215 37346])
            ("widget-move" function (:arguments ("arg")) nil [37348 38618])
            ("widget-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [38620 38816])
            ("widget-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [38818 39024])
            ("defalias" code nil nil [39147 39202])
            ("widget-end-of-line" function (:user-visible-flag t) nil [39204 39801])
            ("widget-kill-line" function (:user-visible-flag t) nil [39803 40121])
            ("widget-narrow-to-field" function (:user-visible-flag t) nil [40123 40320])
            ("widget-complete" function (:user-visible-flag t) nil [40462 41013])
            ("widget-completions-at-point" function nil nil [41267 41417])
            ("widget-field-new" variable nil nil [41447 41537])
            ("make-variable-buffer-local" code nil nil [41538 41584])
            ("widget-field-list" variable nil nil [41586 41663])
            ("make-variable-buffer-local" code nil nil [41664 41711])
            ("widget-at" function (:arguments ("pos")) nil [41713 41875])
            ("widget-setup" function nil nil [41892 42496])
            ("widget-field-last" variable nil nil [42498 42528])
            ("make-variable-buffer-local" code nil nil [42561 42608])
            ("widget-field-was" variable nil nil [42610 42639])
            ("make-variable-buffer-local" code nil nil [42678 42724])
            ("widget-field-at" function (:arguments ("pos")) nil [42726 42961])
            ("widget-field-buffer" function (:arguments ("widget")) nil [42963 43219])
            ("widget-field-start" function (:arguments ("widget")) nil [43221 43432])
            ("widget-field-end" function (:arguments ("widget")) nil [43434 44780])
            ("widget-field-text-end" function (:arguments ("widget")) nil [44782 45233])
            ("widget-field-find" function (:arguments ("pos")) nil [45235 45662])
            ("widget-before-change" function (:arguments ("from" "to")) nil [45664 46383])
            ("widget-add-change" function nil nil [46385 46599])
            ("widget-after-change" function (:arguments ("from" "to" "_old")) nil [46601 47625])
            ("widget-parent-action" function (:arguments ("widget" "event")) nil [47719 47936])
            ("widget-children-value-delete" function (:arguments ("widget")) nil [47938 48210])
            ("widget-children-validate" function (:arguments ("widget")) nil [48212 48508])
            ("widget-child-value-get" function (:arguments ("widget")) nil [48510 48664])
            ("widget-child-value-inline" function (:arguments ("widget")) nil [48666 48844])
            ("widget-child-validate" function (:arguments ("widget")) nil [48846 49017])
            ("widget-type-value-create" function (:arguments ("widget")) nil [49019 49560])
            ("widget-type-default-get" function (:arguments ("widget")) nil [49562 49798])
            ("widget-type-match" function (:arguments ("widget" "value")) nil [49800 50041])
            ("widget-types-copy" function (:arguments ("widget")) nil [50043 50204])
            ("widget-types-convert-widget" function (:arguments ("widget")) nil [50257 50437])
            ("widget-value-convert-widget" function (:arguments ("widget")) nil [50439 50856])
            ("widget-value-value-get" function (:arguments ("widget")) nil [50858 50968])
            ("define-widget" code nil nil [50997 52086])
            ("widget--completing-widget" variable nil nil [52088 52122])
            ("widget-default-completions" function (:arguments ("widget")) nil [52124 52766])
            ("widget-default-create" function (:arguments ("widget")) nil [52768 55162])
            ("widget-default-format-handler" function (:arguments ("_widget" "escape")) nil [55164 55257])
            ("widget-default-button-face-get" function (:arguments ("widget")) nil [55259 55520])
            ("widget-default-mouse-face-get" function (:arguments ("widget")) nil [55522 55777])
            ("widget-default-sample-face-get" function (:arguments ("widget")) nil [55779 55884])
            ("widget-default-delete" function (:arguments ("widget")) nil [55886 56819])
            ("widget-default-value-set" function (:arguments ("widget" "value")) nil [56821 57677])
            ("widget-default-value-inline" function (:arguments ("widget")) nil [57679 57865])
            ("widget-default-default-get" function (:arguments ("widget")) nil [57867 57957])
            ("widget-default-menu-tag-get" function (:arguments ("widget")) nil [57959 58161])
            ("widget-default-active" function (:arguments ("widget")) nil [58163 58455])
            ("widget-default-deactivate" function (:arguments ("widget")) nil [58457 58645])
            ("widget-default-action" function (:arguments ("widget" "event")) nil [58647 58860])
            ("widget-default-notify" function (:arguments ("widget" "_child" "event")) nil [58862 58995])
            ("widget-default-prompt-value" function (:arguments ("_widget" "prompt" "_value" "_unbound")) nil [58997 59121])
            ("widget-docstring" function (:arguments ("widget")) nil [59123 60136])
            ("define-widget" code nil nil [60162 60510])
            ("widget-item-value-create" function (:arguments ("widget")) nil [60512 60659])
            ("widget-item-match" function (:arguments ("widget" "value")) nil [60661 60781])
            ("widget-item-match-inline" function (:arguments ("widget" "vals")) nil [60783 61107])
            ("widget-sublist" function (:arguments ("list" "start" "end")) nil [61109 61463])
            ("widget-item-action" function (:arguments ("widget" "event")) nil [61465 61586])
            ("widget-push-button-prefix" variable (:default-value "[") nil [61837 61957])
            ("widget-push-button-suffix" variable (:default-value "]") nil [61959 62079])
            ("define-widget" code nil nil [62081 62246])
            ("widget-push-button-value-create" function (:arguments ("widget")) nil [62248 62642])
            ("widget-link-prefix" variable (:default-value "[") nil [62794 62905])
            ("widget-link-suffix" variable (:default-value "]") nil [62907 63018])
            ("define-widget" code nil nil [63020 63221])
            ("define-widget" code nil nil [63252 63347])
            ("widget-info-link-action" function (:arguments ("widget" "_event")) nil [63349 63481])
            ("define-widget" code nil nil [63511 63603])
            ("widget-url-link-action" function (:arguments ("widget" "_event")) nil [63605 63736])
            ("define-widget" code nil nil [63771 63879])
            ("widget-function-link-action" function (:arguments ("widget" "_event")) nil [63881 64029])
            ("define-widget" code nil nil [64064 64172])
            ("widget-variable-link-action" function (:arguments ("widget" "_event")) nil [64174 64322])
            ("define-widget" code nil nil [64353 64442])
            ("widget-file-link-action" function (:arguments ("widget" "_event")) nil [64444 64576])
            ("define-widget" code nil nil [64616 64743])
            ("widget-emacs-library-link-action" function (:arguments ("widget" "_event")) nil [64745 64917])
            ("define-widget" code nil nil [64960 65107])
            ("widget-emacs-commentary-link-action" function (:arguments ("widget" "_event")) nil [65109 65293])
            ("define-widget" code nil nil [65329 66144])
            ("widget-field-history" variable nil nil [66146 66218])
            ("widget-field-prompt-internal" function (:arguments ("_widget" "prompt" "initial" "history")) nil [66220 66461])
            ("widget-field-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [66463 66804])
            ("widget-edit-functions" variable nil nil [66806 66840])
            ("widget-field-action" function (:arguments ("widget" "_event")) nil [66842 66993])
            ("widget-field-validate" function (:arguments ("widget")) nil [66995 67190])
            ("widget-field-value-set" function (:arguments ("widget" "value")) nil [67192 67549])
            ("widget-field-value-create" function (:arguments ("widget")) nil [67551 68386])
            ("widget-field-value-delete" function (:arguments ("widget")) nil [68388 68787])
            ("widget-field-value-get" function (:arguments ("widget" "no-truncate")) nil [68789 69594])
            ("widget-field-match" function (:arguments ("_widget" "value")) nil [69596 69679])
            ("define-widget" code nil nil [69705 69798])
            ("define-widget" code nil nil [69831 70448])
            ("widget-choice-value-create" function (:arguments ("widget")) nil [70450 71470])
            ("widget-choice-default-get" function (:arguments ("widget")) nil [71472 71608])
            ("widget-choice-toggle" variable nil nil [71610 71846])
            ("widget-choice-mouse-down-action" function (:arguments ("widget" "_event")) nil [71848 72467])
            ("widget-choice-action" function (:arguments ("widget" "event")) nil [72469 73912])
            ("widget-choice-validate" function (:arguments ("widget")) nil [73914 74140])
            ("widget-choice-match" function (:arguments ("widget" "value")) nil [74142 74431])
            ("widget-choice-match-inline" function (:arguments ("widget" "vals")) nil [74433 74728])
            ("define-widget" code nil nil [74756 74974])
            ("widget-toggle-value-create" function (:arguments ("widget")) nil [74976 75345])
            ("widget-toggle-action" function (:arguments ("widget" "event")) nil [75347 75573])
            ("define-widget" code nil nil [75603 76016])
            ("widget-checkbox-action" function (:arguments ("widget" "event")) nil [76018 76378])
            ("define-widget" code nil nil [76409 76820])
            ("widget-checklist-value-create" function (:arguments ("widget")) nil [76822 77145])
            ("widget-checklist-add-item" function (:arguments ("widget" "type" "chosen")) nil [77147 78776])
            ("widget-checklist-match" function (:arguments ("widget" "vals")) nil [78778 78959])
            ("widget-checklist-match-inline" function (:arguments ("widget" "vals")) nil [78961 79613])
            ("widget-checklist-match-find" function (:arguments ("widget" "vals")) nil [79615 80276])
            ("widget-checklist-match-up" function (:arguments ("args" "vals")) nil [80278 80561])
            ("widget-checklist-value-get" function (:arguments ("widget")) nil [80563 80926])
            ("widget-checklist-validate" function (:arguments ("widget")) nil [80928 81307])
            ("define-widget" code nil nil [81334 81417])
            ("define-widget" code nil nil [81450 81601])
            ("define-widget" code nil nil [81635 81887])
            ("widget-radio-button-notify" function (:arguments ("widget" "_child" "event")) nil [81889 82038])
            ("define-widget" code nil nil [82079 82629])
            ("widget-radio-value-create" function (:arguments ("widget")) nil [82631 82851])
            ("widget-radio-add-item" function (:arguments ("widget" "type")) nil [82853 84512])
            ("widget-radio-value-get" function (:arguments ("widget")) nil [84514 84676])
            ("widget-radio-chosen" function (:arguments ("widget")) nil [84678 85046])
            ("widget-radio-value-inline" function (:arguments ("widget")) nil [85048 85427])
            ("widget-radio-value-set" function (:arguments ("widget" "value")) nil [85429 86116])
            ("widget-radio-validate" function (:arguments ("widget")) nil [86118 86523])
            ("widget-radio-action" function (:arguments ("widget" "child" "event")) nil [86525 87152])
            ("define-widget" code nil nil [87187 87400])
            ("widget-insert-button-action" function (:arguments ("widget" "_event")) nil [87402 87595])
            ("define-widget" code nil nil [87630 87824])
            ("widget-delete-button-action" function (:arguments ("widget" "_event")) nil [87826 88015])
            ("define-widget" code nil nil [88209 88805])
            ("widget-editable-list-format-handler" function (:arguments ("widget" "escape")) nil [88807 89265])
            ("widget-editable-list-value-create" function (:arguments ("widget")) nil [89267 89932])
            ("widget-editable-list-value-get" function (:arguments ("widget")) nil [89934 90130])
            ("widget-editable-list-match" function (:arguments ("widget" "value")) nil [90132 90339])
            ("widget-editable-list-match-inline" function (:arguments ("widget" "value")) nil [90341 90668])
            ("widget-editable-list-insert-before" function (:arguments ("widget" "before")) nil [90670 91567])
            ("widget-editable-list-delete-at" function (:arguments ("widget" "child")) nil [91569 92519])
            ("widget-editable-list-entry-create" function (:arguments ("widget" "value" "conv")) nil [92521 94266])
            ("define-widget" code nil nil [94293 94700])
            ("widget-group-value-create" function (:arguments ("widget")) nil [94702 95427])
            ("widget-group-default-get" function (:arguments ("widget")) nil [95429 95567])
            ("widget-group-match" function (:arguments ("widget" "vals")) nil [95569 95762])
            ("widget-group-match-inline" function (:arguments ("widget" "vals")) nil [95764 96181])
            ("define-widget" code nil nil [96213 96890])
            ("defalias" code nil nil [96892 96962])
            ("define-widget" code nil nil [97060 97242])
            ("widget-documentation-link-action" function (:arguments ("widget" "_event")) nil [97244 97718])
            ("widget-documentation-links" variable (:default-value t) nil [97720 97866])
            ("widget-documentation-link-regexp" variable (:default-value "`\\([^
`' ]+\\)'") nil [97868 98088])
            ("widget-documentation-link-p" variable (:default-value (quote intern-soft)) nil [98090 98452])
            ("widget-documentation-link-type" variable (:default-value (quote documentation-link)) nil [98454 98620])
            ("widget-documentation-link-add" function (:arguments ("widget" "from" "to")) nil [98622 99653])
            ("define-widget" code nil nil [99695 99918])
            ("widget-documentation-string-value-create" function (:arguments ("widget")) nil [99920 101141])
            ("widget-documentation-string-action" function (:arguments ("widget" "_ignore")) nil [101143 101439])
            ("widget-add-documentation-string-button" function (:arguments ("widget" "args")) nil [101441 102363])
            ("define-widget" code nil nil [102389 102502])
            ("widget-const-prompt-value" function (:arguments ("widget" "_prompt" "_value" "_unbound")) nil [102504 102630])
            ("define-widget" code nil nil [102632 102842])
            ("define-widget" code nil nil [102844 102982])
            ("define-widget" code nil nil [102984 103359])
            ("widget-string-prompt-value-history" variable nil nil [103361 103462])
            ("define-widget" code nil nil [103464 103652])
            ("define-widget" code nil nil [103654 103885])
            ("widget-regexp-match" function (:arguments ("_widget" "value")) nil [103887 104066])
            ("widget-regexp-validate" function (:arguments ("widget")) nil [104068 104322])
            ("define-widget" code nil nil [104324 104637])
            ("widget-file-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [104639 105055])
            ("define-widget" code nil nil [105666 105796])
            ("widget-symbol-prompt-value-history" variable nil nil [105798 105899])
            ("define-widget" code nil nil [105901 106432])
            ("widget-symbol-prompt-internal" function (:arguments ("widget" "prompt" "initial" "history")) nil [106434 106752])
            ("widget-function-prompt-value-history" variable nil nil [106754 106859])
            ("define-widget" code nil nil [106861 107504])
            ("widget-variable-prompt-value-history" variable nil nil [107506 107611])
            ("define-widget" code nil nil [107613 107889])
            ("define-widget" code nil nil [107891 108532])
            ("widget-coding-system-prompt-value" function (:arguments ("widget" "prompt" "value" "_unbound")) nil [108534 108920])
            ("widget-coding-system-action" function (:arguments ("widget" "event")) nil [108922 109221])
            ("widget-key-sequence-prompt-value-history" variable nil nil [109276 109389])
            ("widget-key-sequence-default-value" variable (:default-value [ignore]) nil [109391 109487])
            ("widget-key-sequence-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map widget-field-keymap) (define-key map [(control 113)] (quote widget-key-sequence-read-event)) map)) nil [109489 109682])
            ("define-widget" code nil nil [109684 110383])
            ("widget-key-sequence-read-event" function (:arguments ("ev")) nil [110385 111507])
            ("widget-key-sequence-validate" function (:arguments ("widget")) nil [111509 111751])
            ("widget-key-sequence-value-to-internal" function (:arguments ("widget" "value")) nil [111753 111955])
            ("widget-key-sequence-value-to-external" function (:arguments ("_widget" "value")) nil [111957 112165])
            ("define-widget" code nil nil [112169 112577])
            ("widget-sexp-value-to-internal" function (:arguments ("_widget" "value")) nil [112579 112927])
            ("widget-sexp-validate" function (:arguments ("widget")) nil [112929 113920])
            ("widget-sexp-prompt-value-history" variable nil nil [113922 114019])
            ("widget-sexp-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [114021 114443])
            ("define-widget" code nil nil [114445 114825])
            ("widget-restricted-sexp-match" function (:arguments ("widget" "value")) nil [114827 115286])
            ("define-widget" code nil nil [115289 115461])
            ("define-widget" code nil nil [115463 115686])
            ("define-widget" code nil nil [115688 115898])
            ("define-widget" code nil nil [115900 116440])
            ("define-widget" code nil nil [116442 116525])
            ("define-widget" code nil nil [116527 116779])
            ("widget-vector-match" function (:arguments ("widget" "value")) nil [116781 116935])
            ("define-widget" code nil nil [116937 117214])
            ("widget-cons-match" function (:arguments ("widget" "value")) nil [117216 117366])
            ("define-widget" code nil nil [117420 119472])
            ("define-widget" code nil nil [119523 119702])
            ("widget-plist-value-type" variable nil nil [119704 119736])
            ("widget-plist-convert-widget" function (:arguments ("widget")) nil [119756 120288])
            ("widget-plist-convert-option" function (:arguments ("option")) nil [120290 120714])
            ("define-widget" code nil nil [120767 120948])
            ("widget-alist-value-type" variable nil nil [120950 120982])
            ("widget-alist-convert-widget" function (:arguments ("widget")) nil [121002 121534])
            ("widget-alist-convert-option" function (:arguments ("option")) nil [121536 121949])
            ("define-widget" code nil nil [121952 122209])
            ("widget-choice-prompt-value" function (:arguments ("widget" "prompt" "value" "_unbound")) nil [122211 123335])
            ("define-widget" code nil nil [123338 123500])
            ("define-widget" code nil nil [123502 123624])
            ("define-widget" code nil nil [123626 123734])
            ("define-widget" code nil nil [123736 124043])
            ("widget-boolean-prompt-value" function (:arguments ("_widget" "prompt" "_value" "_unbound")) nil [124045 124156])
            ("define-widget" code nil nil [124200 124570])
            ("widget-color-value-create" function (:arguments ("widget")) nil [124572 124810])
            ("widget-color--choose-action" function (:arguments ("widget" "_event")) nil [124812 125238])
            ("widget-color-sample-face-get" function (:arguments ("widget")) nil [125240 125479])
            ("widget-color-action" function (:arguments ("widget" "event")) nil [125481 125825])
            ("widget-color-notify" function (:arguments ("widget" "child" "event")) nil [125827 126081])
            ("widget-echo-help" function (:arguments ("pos")) nil [126103 126400])
            ("wid-edit" package nil nil [126416 126435]))          
      :file "wid-edit.el.gz"
      :pointmax 126463
      :fsize 30184
      :lastmodtime '(20400 62402)
      :unmatched-syntax nil)
    (semanticdb-table "window.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [967 980])
            ("save-selected-window" function (:arguments ("body")) nil [983 2472])
            ("window-right" function (:arguments ("window")) nil [2779 2991])
            ("window-left" function (:arguments ("window")) nil [2993 3203])
            ("window-child" function (:arguments ("window")) nil [3205 3334])
            ("window-child-count" function (:arguments ("window")) nil [3336 3606])
            ("window-last-child" function (:arguments ("window")) nil [3608 3849])
            ("window-valid-p" function (:arguments ("object")) nil [3851 4118])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [4120 4614])
            ("window-normalize-frame" function (:arguments ("frame")) nil [4616 4869])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [4871 5399])
            ("ignore-window-parameters" variable nil nil [5401 5745])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [5747 5869])
            ("window-min-height" variable (:default-value 4) nil [5871 6504])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [6506 6629])
            ("window-min-width" variable (:default-value 10) nil [6631 7274])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [7276 7907])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [7909 9017])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [9019 9731])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any")) nil [9733 10314])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [10316 10967])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any")) nil [10969 11599])
            ("window-atom-root" function (:arguments ("window")) nil [11621 12036])
            ("window-make-atom" function (:arguments ("window")) nil [12038 12376])
            ("window--atom-check-1" function (:arguments ("window")) nil [12378 13266])
            ("window--atom-check" function (:arguments ("frame")) nil [13268 13656])
            ("window-sides" variable (:default-value (quote (left top right bottom))) nil [13675 13739])
            ("window-sides-vertical" variable nil nil [13741 13947])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [13949 15370])
            ("window--side-check" function (:arguments ("frame")) nil [15372 17799])
            ("window--check" function (:arguments ("frame")) nil [17801 17980])
            ("window-size-fixed" variable nil nil [18000 18437])
            ("make-variable-buffer-local" code nil nil [18438 18485])
            ("window--size-ignore" function (:arguments ("window" "ignore")) nil [18487 18661])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore")) nil [18663 19480])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore")) nil [19482 21976])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore")) nil [21978 23577])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore")) nil [23579 23986])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal")) nil [23988 25128])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal")) nil [25130 25628])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup")) nil [25630 26950])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown")) nil [26952 28928])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup")) nil [28930 30195])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown")) nil [30197 31912])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown")) nil [31960 33929])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown")) nil [33931 34419])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore")) nil [34421 35677])
            ("window-total-size" function (:arguments ("window" "horizontal")) nil [35679 36113])
            ("defalias" code nil nil [36170 36216])
            ("window-full-height-p" function (:arguments ("window")) nil [36249 36678])
            ("window-full-width-p" function (:arguments ("window")) nil [36680 37109])
            ("window-body-size" function (:arguments ("window" "horizontal")) nil [37111 37580])
            ("defalias" code nil nil [37637 37680])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [37682 38602])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [38604 40504])
            ("window-point-1" function (:arguments ("window")) nil [40506 41006])
            ("set-window-point-1" function (:arguments ("window" "pos")) nil [41008 41522])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [41524 42084])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [42086 42592])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [42594 42984])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore")) nil [42986 46515])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [46517 48138])
            ("defalias" code nil nil [48140 48190])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated")) nil [48192 49682])
            ("get-mru-window" function (:arguments ("all-frames")) nil [49684 50602])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated")) nil [50604 51734])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [51736 53267])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [53269 53419])
            ("count-windows" function (:arguments ("minibuf")) nil [53421 53714])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [53739 54181])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [54183 54645])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [54774 55878])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore")) nil [55880 59156])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [59158 59335])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [59337 62855])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge")) nil [62857 69219])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge")) nil [69221 73352])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge")) nil [73354 75320])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore")) nil [75322 76015])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta")) nil [76017 77494])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal")) nil [77496 82374])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [82376 83675])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [83677 85032])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [85034 85393])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [85395 85762])
            ("frame-root-window-p" function (:arguments ("window")) nil [85765 85904])
            ("window--subtree" function (:arguments ("window" "next")) nil [85906 86629])
            ("window-tree" function (:arguments ("frame")) nil [86631 87526])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [87529 90160])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [90296 91569])
            ("window-deletable-p" function (:arguments ("window")) nil [91594 92508])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [92510 92813])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [92815 96068])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [96070 98255])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [98257 98883])
            ("record-window-buffer" function (:arguments ("window")) nil [100619 101883])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [101885 102384])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [102386 103201])
            ("switch-to-visible-buffer" variable (:default-value t) nil [103203 103719])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [103721 107791])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [107793 110599])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [110601 111597])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [111599 112326])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [112328 112846])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [112848 113688])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [113690 114823])
            ("unbury-buffer" function (:user-visible-flag t) nil [114825 114950])
            ("next-buffer" function (:user-visible-flag t) nil [114952 115150])
            ("previous-buffer" function (:user-visible-flag t) nil [115152 115358])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [115360 117114])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [117116 118148])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [118150 121010])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [121012 121976])
            ("window-split-min-size" function (:arguments ("horizontal")) nil [122002 122303])
            ("split-window" function
               (:user-visible-flag t
                :arguments ("window" "size" "side"))
                nil [122305 131555])
            ("split-window-keep-point" variable (:default-value t) nil [131632 132006])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [132008 134267])
            ("defalias" code nil nil [134269 134324])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [134326 135535])
            ("defalias" code nil nil [135537 135594])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [136097 138651])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [138653 139079])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [139081 140070])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [140072 140502])
            ("window-area-factor" variable (:default-value 1) nil [140549 140718])
            ("make-variable-buffer-local" code nil nil [140719 140767])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal")) nil [140769 141260])
            ("balance-windows-area" function (:user-visible-flag t) nil [141262 145442])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [145512 147909])
            ("window-state-get" function (:arguments ("window" "writable")) nil [147911 149604])
            ("window-state-put-list" variable nil nil [149606 149684])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals")) nil [149686 152040])
            ("window--state-put-2" function (:arguments ("ignore")) nil [152042 155186])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [155188 157772])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [157775 159775])
            ("display-buffer-function" variable nil nil [159777 160333])
            ("pop-up-frame-alist" variable nil nil [160335 161060])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [161062 161391])
            ("special-display-buffer-names" variable nil nil [161393 163983])
            ("put" code nil nil [164000 164059])
            ("special-display-regexps" variable nil nil [164061 166703])
            ("special-display-p" function (:arguments ("buffer-name")) nil [166705 167635])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [167637 168252])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [168254 170277])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [170279 171077])
            ("same-window-buffer-names" variable nil nil [171079 171651])
            ("same-window-regexps" variable nil nil [171653 172241])
            ("same-window-p" function (:arguments ("buffer-name")) nil [172243 173214])
            ("pop-up-frames" variable nil nil [173216 173628])
            ("display-buffer-reuse-frames" variable nil nil [173630 173859])
            ("pop-up-windows" variable (:default-value t) nil [173861 173985])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [173987 175370])
            ("split-height-threshold" variable (:default-value 80) nil [175372 175898])
            ("split-width-threshold" variable (:default-value 160) nil [175900 176288])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [176290 178566])
            ("split-window-sensibly" function (:arguments ("window")) nil [178568 180831])
            ("window--try-to-split-window" function (:arguments ("window")) nil [180833 181379])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [181381 182323])
            ("even-window-heights" variable (:default-value t) nil [182325 182641])
            ("window--even-window-heights" function (:arguments ("window")) nil [182643 183716])
            ("window--display-buffer-1" function (:arguments ("window")) nil [183718 184274])
            ("window--display-buffer-2" function (:arguments ("buffer" "window" "dedicated")) nil [184276 184672])
            ("display-buffer-mark-dedicated" variable nil nil [185002 185211])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-use-some-window) (function :tag "Other function"))))
                nil [185213 185643])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [185645 186020])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [186022 186357])
            ("put" code nil nil [186358 186421])
            ("display-buffer-alist" variable nil nil [186423 187130])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [187132 187556])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [187558 188103])
            ("put" code nil nil [188104 188165])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist")) nil [188167 188538])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [188540 188712])
            ("put" code nil nil [188713 188778])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [188780 189010])
            ("put" code nil nil [189011 189076])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [189078 192876])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [192878 193200])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [193242 193783])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [193785 194126])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [194128 195546])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [195548 196299])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "_alist")) nil [196301 196904])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "_alist")) nil [196906 198104])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [198106 198692])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [198694 200211])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "action" "norecord"))
                nil [200248 201726])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [201728 202534])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [202536 203680])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [203682 204238])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [204240 206092])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [206094 207126])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [207128 208140])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [208143 209114])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [209116 209331])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [209333 209552])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [209554 210955])
            ("window-buffer-height" function (:arguments ("window")) nil [210957 211321])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "override"))
                nil [211375 215611])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [215613 215994])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [215996 217079])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [217082 217904])
            ("recenter-last-op" variable nil nil [217908 218060])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [218062 218922])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [218924 220071])
            ("define-key" code nil nil [220073 220125])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [220127 221261])
            ("define-key" code nil nil [221263 221326])
            ("scroll-error-top-bottom" variable nil nil [221496 221942])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [221944 223007])
            ("put" code nil nil [223009 223051])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [223053 224120])
            ("put" code nil nil [224122 224166])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [224236 224519])
            ("put" code nil nil [224521 224560])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [224562 224847])
            ("put" code nil nil [224849 224890])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [224894 225279])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [225281 225965])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [225967 226470])
            ("mouse-autoselect-window-timer" variable nil nil [226473 226563])
            ("mouse-autoselect-window-position" variable nil nil [226565 226676])
            ("mouse-autoselect-window-window" variable nil nil [226678 226779])
            ("mouse-autoselect-window-state" variable nil nil [226781 227078])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [227080 227801])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [227803 228631])
            ("mouse-autoselect-window-select" function nil nil [228633 231706])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [231708 233183])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [233185 233843])
            ("define-key" code nil nil [233933 233974])
            ("define-key" code nil nil [233975 234023])
            ("define-key" code nil nil [234024 234070])
            ("define-key" code nil nil [234071 234117])
            ("define-key" code nil nil [234118 234158])
            ("define-key" code nil nil [234159 234201])
            ("define-key" code nil nil [234202 234257])
            ("define-key" code nil nil [234258 234312])
            ("define-key" code nil nil [234313 234376])
            ("define-key" code nil nil [234377 234420])
            ("define-key" code nil nil [234421 234473]))          
      :file "window.el.gz"
      :pointmax 234499
      :fsize 52714
      :lastmodtime '(20420 56390)
      :unmatched-syntax '((close-paren 980 . 981) (symbol 949 . 966) (open-paren 948 . 949)))
    (semanticdb-table "autoinsert.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("auto-insert" customgroup (:user-visible-flag t) nil [1870 2074])
            ("auto-insert" variable (:default-value (quote not-modified)) nil [2077 2869])
            ("auto-insert-query" variable (:default-value (quote function)) nil [2871 3205])
            ("auto-insert-prompt" variable (:default-value "Perform %s auto-insertion? ") nil [3207 3428])
            ("auto-insert-alist" variable (:default-value (quote ((("\\.\\([Hh]\\|hh\\|hpp\\)\\'" . "C / C++ header") (upcase (concat (file-name-nondirectory (file-name-sans-extension buffer-file-name)) "_" (file-name-extension buffer-file-name))) "#ifndef " str n "#define " str "

" _ "

#endif") (("\\.\\([Cc]\\|cc\\|cpp\\)\\'" . "C / C++ program") nil "#include \"" (let ((stem (file-name-sans-extension buffer-file-name))) (cond ((file-exists-p (concat stem ".h")) (file-name-nondirectory (concat stem ".h"))) ((file-exists-p (concat stem ".hh")) (file-name-nondirectory (concat stem ".hh"))))) & 34 | -10) (("[Mm]akefile\\'" . "Makefile") . "makefile.inc") (html-mode lambda nil (sgml-tag "html")) (plain-tex-mode . "tex-insert.tex") (bibtex-mode . "tex-insert.tex") (latex-mode "options, RET: " "\\documentclass[" str & 93 | -1 123 (read-string "class: ") "}
" ("package, %s: " "\\usepackage[" (read-string "options, RET: ") & 93 | -1 123 str "}
") _ "
\\begin{document}
" _ "
\\end{document}") (("/bin/.*[^/]\\'" . "Shell-Script mode magic number") lambda nil (if (eq major-mode (default-value (quote major-mode))) (sh-mode))) (ada-mode . ada-header) (("\\.[1-9]\\'" . "Man page skeleton") "Short description: " ".\\\" Copyright (C), " (substring (current-time-string) -4) "  " (getenv "ORGANIZATION") | (progn user-full-name) "
.\\\" You may distribute this file under the terms of the GNU Free
.\\\" Documentation License.
.TH " (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) " " (file-name-extension (buffer-file-name)) " " (format-time-string "%Y-%m-%d ") "
.SH NAME
" (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) " \\- " str "
.SH SYNOPSIS
.B " (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) "
" _ "
.SH DESCRIPTION
.SH OPTIONS
.SH FILES
.SH \"SEE ALSO\"
.SH BUGS
.SH AUTHOR
" (user-full-name) (quote (if (search-backward "&" (line-beginning-position) t) (replace-match (capitalize (user-login-name)) t t))) (quote (end-of-line 1)) " <" (progn user-mail-address) ">
") (("\\.el\\'" . "Emacs Lisp header") "Short description: " ";;; " (file-name-nondirectory (buffer-file-name)) " --- " str "

;; Copyright (C) " (substring (current-time-string) -4) "  " (getenv "ORGANIZATION") | (progn user-full-name) "

;; Author: " (user-full-name) (quote (if (search-backward "&" (line-beginning-position) t) (replace-match (capitalize (user-login-name)) t t))) (quote (end-of-line 1)) " <" (progn user-mail-address) ">
;; Keywords: " (quote (require (quote finder))) (quote (setq v1 (mapcar (lambda (x) (list (symbol-name (car x)))) finder-known-keywords) v2 (mapconcat (lambda (x) (format "%12s:  %s" (car x) (cdr x))) finder-known-keywords "
"))) ((let ((minibuffer-help-form v2)) (completing-read "Keyword, C-h: " v1 nil t)) str ", ") & -2 "

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; " _ "

;;; Code:



(provide '" (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) ")
;;; " (file-name-nondirectory (buffer-file-name)) " ends here
") (("\\.texi\\(nfo\\)?\\'" . "Texinfo file skeleton") "Title: " "\\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename " (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) ".info
" "@settitle " str "
@c %**end of header
@copying
" (setq short-description (read-string "Short description: ")) ".

" "Copyright @copyright{} " (substring (current-time-string) -4) "  " (getenv "ORGANIZATION") | (progn user-full-name) "

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

A copy of the license is also available from the Free Software
Foundation Web site at @url{http://www.gnu.org/licenses/fdl.html}.

@end quotation

The document was typeset with
@uref{http://www.texinfo.org/, GNU Texinfo}.

@end copying

@titlepage
@title " str "
@subtitle " short-description "
@author " (getenv "ORGANIZATION") | (progn user-full-name) " <" (progn user-mail-address) ">
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top
@top " str "

@insertcopying
@end ifnottex

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
@end menu

@c Update all node entries with `C-c C-u C-n'.
@c Insert new nodes with `C-c C-c n'.
@node Chapter One
@chapter Chapter One

" _ "

@node Copying This Manual
@appendix Copying This Manual

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@c Get fdl.texi from http://www.gnu.org/licenses/fdl.html
@include fdl.texi

@node Index
@unnumbered Index

@printindex cp

@bye

@c " (file-name-nondirectory (buffer-file-name)) " ends here
")))) nil [3431 10226])
            ("auto-insert-directory" variable (:default-value "~/insert/") nil [10284 10527])
            ("auto-insert" function (:user-visible-flag t) nil [10545 12600])
            ("define-auto-insert" function (:arguments ("condition" "action" "after")) nil [12618 13335])
            ("define-minor-mode" code nil nil [13352 13887])
            ("autoinsert" package nil nil [13889 13910]))          
      :file "autoinsert.el.gz"
      :pointmax 13940
      :fsize 4899
      :lastmodtime '(20400 62402)
      :unmatched-syntax nil)
    (semanticdb-table "startup.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1113 1149])
            ("command-line-processed" variable nil nil [1151 1236])
            ("initialization" customgroup (:user-visible-flag t) nil [1238 1319])
            ("initial-buffer-choice" variable nil nil [1321 1836])
            ("inhibit-startup-screen" variable nil nil [1838 2091])
            ("defvaralias" code nil nil [2093 2153])
            ("defvaralias" code nil nil [2154 2216])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2218 2268])
            ("inhibit-startup-echo-area-message" variable nil nil [2390 3087])
            ("inhibit-default-init" variable nil nil [3089 3219])
            ("inhibit-startup-buffer-menu" variable nil nil [3221 3385])
            ("command-switch-alist" variable nil nil [3387 3655])
            ("command-line-args-left" variable nil nil [3657 3741])
            ("defvaralias" code nil nil [3743 4034])
            ("with-no-warnings" code nil nil [4036 4165])
            ("command-line-functions" variable nil nil [4167 4621])
            ("command-line-default-directory" variable nil nil [4623 4791])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [4901 8085])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [8087 11064])
            ("before-init-hook" variable nil nil [11067 11177])
            ("after-init-hook" variable nil nil [11179 11475])
            ("emacs-startup-hook" variable nil nil [11477 11584])
            ("term-setup-hook" variable nil nil [11586 11860])
            ("inhibit-startup-hooks" variable nil nil [11862 12003])
            ("keyboard-type" variable nil nil [12005 12226])
            ("window-setup-hook" variable nil nil [12228 12414])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [12416 12585])
            ("init-file-user" variable nil nil [12587 13242])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [13244 14514])
            ("mail-host-address" variable nil nil [14516 14745])
            ("user-mail-address" variable (:default-value (if command-line-processed (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name)))) "")) nil [14747 15236])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [15238 15995])
            ("emacs-basic-display" variable nil nil [15997 16029])
            ("init-file-debug" variable nil nil [16031 16059])
            ("init-file-had-error" variable nil nil [16061 16157])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [16159 16211])
            ("no-blinking-cursor" variable nil nil [16213 16244])
            ("default-frame-background-mode" variable nil nil [16246 16284])
            ("pure-space-overflow" variable nil nil [16286 16371])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [16373 16549])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [16551 16786])
            ("package-subdirectory-regexp" variable
               (:constant-flag t
                :default-value "\\([^.].*?\\)-\\([0-9]+\\(?:[.][0-9]+\\|\\(?:pre\\|beta\\|alpha\\)[0-9]+\\)*\\)")
                nil [16788 17187])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [17189 18921])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [18923 19692])
            ("normal-top-level" function nil nil [19694 25689])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [25797 26023])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [26025 26115])
            ("tool-bar-originally-present" variable nil nil [26117 26236])
            ("handle-args-function-alist" variable (:default-value (quote ((nil . tty-handle-args)))) nil [26238 26600])
            ("window-system-initialization-alist" variable (:default-value (quote ((nil . ignore)))) nil [26602 26968])
            ("tty-handle-args" function (:arguments ("args")) nil [26970 29728])
            ("declare-function" code nil nil [29730 29824])
            ("declare-function" code nil nil [29825 29884])
            ("declare-function" code nil nil [29885 29929])
            ("server-name" variable nil nil [29931 29951])
            ("server-process" variable nil nil [29952 29975])
            ("command-line" function nil nil [29977 52613])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

")) nil [52615 53057])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil 0 256) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [53232 55575])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (view-file (expand-file-name "CONTRIBUTE" data-directory)) (goto-char (point-min))))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil 0 256) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [55577 58689])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [58692 58811])
            ("fancy-splash-image" variable nil nil [58813 59010])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [59013 59334])
            ("fancy-splash-insert" function (:arguments ("args")) nil [59405 60801])
            ("declare-function" code nil nil [60803 60872])
            ("fancy-splash-head" function nil nil [60874 62320])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [62322 65432])
            ("exit-splash-screen" function (:user-visible-flag t) nil [65434 65543])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [65545 66913])
            ("fancy-about-screen" function nil nil [66915 67659])
            ("fancy-splash-frame" function nil nil [67661 68119])
            ("use-fancy-splash-screens-p" function nil nil [68121 68918])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [68921 71430])
            ("normal-mouse-startup-screen" function nil nil [71432 73209])
            ("normal-no-mouse-startup-screen" function nil nil [73263 78237])
            ("normal-about-screen" function nil nil [78239 79764])
            ("startup-echo-area-message" function nil nil [79766 80080])
            ("display-startup-echo-area-message" function nil nil [80082 81346])
            ("display-startup-screen" function (:arguments ("concise")) nil [81348 81800])
            ("display-about-screen" function (:user-visible-flag t) nil [81802 82048])
            ("defalias" code nil nil [82050 82095])
            ("defalias" code nil nil [82096 82153])
            ("command-line-1" function (:arguments ("args-left")) nil [82155 93099])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [93101 93769]))          
      :file "startup.el.gz"
      :pointmax 93796
      :fsize 25508
      :lastmodtime '(20400 62402)
      :unmatched-syntax nil)
    (semanticdb-table "frame.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [934 947])
            ("frame-creation-function-alist" variable (:default-value (list (cons nil (if (fboundp (quote tty-create-frame-with-faces)) (quote tty-create-frame-with-faces) (lambda (_parameters) (error "Can't create multiple frames without a window system")))))) nil [950 1432])
            ("window-system-default-frame-alist" variable nil nil [1434 1877])
            ("initial-frame-alist" variable nil nil [2069 3299])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [3301 4003])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4005 4474])
            ("frame-initial-frame" variable nil nil [5252 5284])
            ("frame-initial-frame-alist" variable nil nil [5363 5397])
            ("frame-initial-geometry-arguments" variable nil nil [5399 5444])
            ("frame-initialize" function nil nil [5633 7346])
            ("frame-notice-user-settings" variable (:default-value t) nil [7348 7457])
            ("declare-function" code nil nil [7459 7518])
            ("frame-notice-user-settings" function nil nil [7715 18713])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [18715 18916])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [18983 20158])
            ("get-other-frame" function nil nil [20160 20484])
            ("next-multiframe-window" function (:user-visible-flag t) nil [20486 20744])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [20746 21010])
            ("declare-function" code nil nil [21012 21073])
            ("declare-function" code nil nil [21074 21137])
            ("x-display-name" variable nil nil [21138 21161])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [21192 22088])
            ("declare-function" code nil nil [22090 22147])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [22149 23501])
            ("make-frame-command" function (:user-visible-flag t) nil [23503 23766])
            ("before-make-frame-hook" variable nil nil [23768 23851])
            ("after-make-frame-functions" variable nil nil [23853 24000])
            ("after-setting-font-hook" variable nil nil [24002 24098])
            ("define-obsolete-function-alias" code nil nil [24128 24190])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [24192 24360])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [24362 27402])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [27404 27703])
            ("minibuffer-frame-list" function nil nil [27705 27898])
            ("get-device-terminal" function (:arguments ("device")) nil [27950 28703])
            ("frames-on-display-list" function (:arguments ("device")) nil [28705 29147])
            ("framep-on-display" function (:arguments ("terminal")) nil [29149 29588])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [29590 30451])
            ("declare-function" code nil nil [30453 30502])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [30504 31614])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31616 32595])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [32597 32827])
            ("suspend-frame" function (:user-visible-flag t) nil [32829 33306])
            ("make-frame-names-alist" function nil nil [33308 33714])
            ("frame-name-history" variable nil nil [33716 33747])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [33748 34439])
            ("frame-background-mode" variable nil nil [34466 35046])
            ("declare-function" code nil nil [35048 35142])
            ("inhibit-frame-set-background-mode" variable nil nil [35144 35190])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [35192 38090])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [38092 38608])
            ("current-frame-configuration" function nil nil [38639 39235])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [39237 41242])
            ("frame-height" function (:arguments ("frame")) nil [41337 42003])
            ("frame-width" function (:arguments ("frame")) nil [42005 42210])
            ("declare-function" code nil nil [42212 42317])
            ("define-obsolete-function-alias" code nil nil [42319 42392])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font-name" "keep-size" "frames"))
                nil [42394 45598])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [45600 45851])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [45853 46323])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [46325 46795])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [46797 47283])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47285 47751])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47753 48135])
            ("define-minor-mode" code nil nil [48137 49017])
            ("define-minor-mode" code nil nil [49019 49860])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [49862 50253])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [50255 50782])
            ("selected-terminal" function nil nil [50818 50928])
            ("declare-function" code nil nil [50930 50973])
            ("display-mouse-p" function (:arguments ("display")) nil [50975 51648])
            ("display-popup-menus-p" function (:arguments ("display")) nil [51650 52035])
            ("display-graphic-p" function (:arguments ("display")) nil [52037 52494])
            ("display-images-p" function (:arguments ("display")) nil [52496 52774])
            ("defalias" code nil nil [52776 52828])
            ("defalias" code nil nil [52829 52880])
            ("display-selections-p" function (:arguments ("display")) nil [52882 53526])
            ("declare-function" code nil nil [53528 53594])
            ("display-screens" function (:arguments ("display")) nil [53596 53847])
            ("declare-function" code nil nil [53849 53920])
            ("display-pixel-height" function (:arguments ("display")) nil [53922 54304])
            ("declare-function" code nil nil [54306 54376])
            ("display-pixel-width" function (:arguments ("display")) nil [54378 54756])
            ("display-mm-dimensions-alist" variable nil nil [54758 55405])
            ("declare-function" code nil nil [55407 55475])
            ("display-mm-height" function (:arguments ("display")) nil [55477 55935])
            ("declare-function" code nil nil [55937 56004])
            ("display-mm-width" function (:arguments ("display")) nil [56006 56461])
            ("declare-function" code nil nil [56463 56535])
            ("display-backing-store" function (:arguments ("display")) nil [56537 56938])
            ("declare-function" code nil nil [56940 57009])
            ("display-save-under" function (:arguments ("display")) nil [57011 57291])
            ("declare-function" code nil nil [57293 57358])
            ("display-planes" function (:arguments ("display")) nil [57360 57684])
            ("declare-function" code nil nil [57686 57756])
            ("display-color-cells" function (:arguments ("display")) nil [57758 58086])
            ("declare-function" code nil nil [58088 58159])
            ("display-visual-class" function (:arguments ("display")) nil [58161 58634])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [58666 60536])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [60538 61797])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [61801 62853])
            ("define-obsolete-variable-alias" code nil nil [62898 62984])
            ("make-variable-buffer-local" code nil nil [63026 63080])
            ("scrolling" customgroup (:user-visible-flag t) nil [63098 63180])
            ("defvaralias" code nil nil [63182 63236])
            ("cursor" customgroup (:user-visible-flag t) nil [63260 63345])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [63347 63475])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [63477 63595])
            ("blink-cursor-idle-timer" variable nil nil [63597 63772])
            ("blink-cursor-timer" variable nil nil [63774 63936])
            ("blink-cursor-start" function nil nil [63938 64599])
            ("blink-cursor-timer-function" function nil nil [64601 64749])
            ("blink-cursor-end" function nil nil [64751 65146])
            ("define-minor-mode" code nil nil [65148 66142])
            ("define-obsolete-variable-alias" code nil nil [66144 66216])
            ("define-key" code nil nil [66239 66287])
            ("define-key" code nil nil [66288 66337])
            ("define-key" code nil nil [66338 66380])
            ("define-key" code nil nil [66381 66422])
            ("frame" package nil nil [66424 66440]))          
      :file "frame.el.gz"
      :pointmax 66465
      :fsize 17696
      :lastmodtime '(20400 62402)
      :unmatched-syntax '((close-paren 947 . 948) (symbol 916 . 933) (open-paren 915 . 916))))
  :file "!usr!local!share!emacs!24.1!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
