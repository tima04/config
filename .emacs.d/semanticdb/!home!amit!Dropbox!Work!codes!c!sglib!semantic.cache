;; Object sglib/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "sglib/"
  :tables
  (list
    (semanticdb-table "sglib.h"
      :major-mode 'c-mode
      :tags 
        '( ("_SGLIB__h_" variable (:constant-flag t) nil [553 563])
            ("assert.h" include (:system-flag t) nil [637 656])
            ("SGLIB_ARRAY_SINGLE_HEAP_SORT" variable (:constant-flag t) nil [1522 1550])
            ("SGLIB_ARRAY_HEAP_SORT" variable (:constant-flag t) nil [1675 1696])
            ("SGLIB___ARRAY_HEAP_DOWN" variable (:constant-flag t) nil [2041 2064])
            ("SGLIB_ARRAY_SINGLE_QUICK_SORT" variable (:constant-flag t) nil [2612 2641])
            ("SGLIB_ARRAY_QUICK_SORT" variable (:constant-flag t) nil [2767 2789])
            ("SGLIB_ARRAY_BINARY_SEARCH" variable (:constant-flag t) nil [4912 4937])
            ("SGLIB_QUEUE_INIT" variable (:constant-flag t) nil [6085 6101])
            ("SGLIB_QUEUE_IS_EMPTY" variable (:constant-flag t) nil [6140 6160])
            ("SGLIB_QUEUE_IS_FULL" variable (:constant-flag t) nil [6195 6214])
            ("SGLIB_QUEUE_FIRST_ELEMENT" variable (:constant-flag t) nil [6264 6289])
            ("SGLIB_QUEUE_ADD_NEXT" variable (:constant-flag t) nil [6320 6340])
            ("SGLIB_QUEUE_ADD" variable (:constant-flag t) nil [6482 6497])
            ("SGLIB_QUEUE_DELETE_FIRST" variable (:constant-flag t) nil [6600 6624])
            ("SGLIB_QUEUE_DELETE" variable (:constant-flag t) nil [6763 6781])
            ("SGLIB_HEAP_INIT" variable (:constant-flag t) nil [7352 7367])
            ("SGLIB_HEAP_IS_EMPTY" variable (:constant-flag t) nil [7399 7418])
            ("SGLIB_HEAP_IS_FULL" variable (:constant-flag t) nil [7448 7466])
            ("SGLIB_HEAP_FIRST_ELEMENT" variable (:constant-flag t) nil [7505 7529])
            ("SGLIB_HEAP_ADD_NEXT" variable (:constant-flag t) nil [7557 7576])
            ("SGLIB_HEAP_ADD" variable (:constant-flag t) nil [7864 7878])
            ("SGLIB_HEAP_DELETE_FIRST" variable (:constant-flag t) nil [8107 8130])
            ("SGLIB_HEAP_DELETE" variable (:constant-flag t) nil [8360 8377])
            ("SGLIB_HASH_TAB_INIT" variable (:constant-flag t) nil [9423 9442])
            ("SGLIB_HASH_TAB_ADD_IF_NOT_MEMBER" variable (:constant-flag t) nil [9544 9576])
            ("SGLIB_HASH_TAB_FIND_MEMBER" variable (:constant-flag t) nil [9921 9947])
            ("SGLIB_HASH_TAB_IS_MEMBER" variable (:constant-flag t) nil [10424 10448])
            ("SGLIB_HASH_TAB_MAP_ON_ELEMENTS" variable (:constant-flag t) nil [10840 10870])
            ("SGLIB_LIST_ADD" variable (:constant-flag t) nil [11503 11517])
            ("SGLIB_LIST_CONCAT" variable (:constant-flag t) nil [11602 11619])
            ("SGLIB_LIST_DELETE" variable (:constant-flag t) nil [11828 11845])
            ("SGLIB_LIST_ADD_IF_NOT_MEMBER" variable (:constant-flag t) nil [12098 12126])
            ("SGLIB_LIST_DELETE_IF_MEMBER" variable (:constant-flag t) nil [12372 12399])
            ("SGLIB_LIST_IS_MEMBER" variable (:constant-flag t) nil [12638 12658])
            ("SGLIB_LIST_FIND_MEMBER" variable (:constant-flag t) nil [12813 12835])
            ("SGLIB_LIST_MAP_ON_ELEMENTS" variable (:constant-flag t) nil [13009 13035])
            ("SGLIB_LIST_LEN" variable (:constant-flag t) nil [13300 13314])
            ("SGLIB_LIST_REVERSE" variable (:constant-flag t) nil [13454 13472])
            ("SGLIB_LIST_SORT" variable (:constant-flag t) nil [13711 13726])
            ("SGLIB_SORTED_LIST_ADD" variable (:constant-flag t) nil [15147 15168])
            ("SGLIB_SORTED_LIST_ADD_IF_NOT_MEMBER" variable (:constant-flag t) nil [15388 15423])
            ("SGLIB_SORTED_LIST_DELETE" variable (:constant-flag t) nil [15742 15766])
            ("SGLIB_SORTED_LIST_DELETE_IF_MEMBER" variable (:constant-flag t) nil [15851 15885])
            ("SGLIB_SORTED_LIST_FIND_MEMBER" variable (:constant-flag t) nil [16184 16213])
            ("SGLIB_SORTED_LIST_IS_MEMBER" variable (:constant-flag t) nil [16461 16488])
            ("SGLIB_SORTED_LIST_FIND_MEMBER_OR_PLACE" variable (:constant-flag t) nil [16759 16797])
            ("SGLIB_SORTED_LIST_LEN" variable (:constant-flag t) nil [17080 17101])
            ("SGLIB_SORTED_LIST_MAP_ON_ELEMENTS" variable (:constant-flag t) nil [17187 17220])
            ("SGLIB___DL_LIST_CREATE_SINGLETON" variable (:constant-flag t) nil [17572 17604])
            ("SGLIB_DL_LIST_ADD_AFTER" variable (:constant-flag t) nil [17716 17739])
            ("SGLIB_DL_LIST_ADD_BEFORE" variable (:constant-flag t) nil [18067 18091])
            ("SGLIB_DL_LIST_ADD" variable (:constant-flag t) nil [18431 18448])
            ("SGLIB___DL_LIST_GENERIC_ADD_IF_NOT_MEMBER" variable (:constant-flag t) nil [18559 18600])
            ("SGLIB_DL_LIST_ADD_BEFORE_IF_NOT_MEMBER" variable (:constant-flag t) nil [19055 19093])
            ("SGLIB_DL_LIST_ADD_AFTER_IF_NOT_MEMBER" variable (:constant-flag t) nil [19288 19325])
            ("SGLIB_DL_LIST_ADD_IF_NOT_MEMBER" variable (:constant-flag t) nil [19519 19550])
            ("SGLIB_DL_LIST_CONCAT" variable (:constant-flag t) nil [19738 19758])
            ("SGLIB_DL_LIST_DELETE" variable (:constant-flag t) nil [20047 20067])
            ("SGLIB_DL_LIST_DELETE_IF_MEMBER" variable (:constant-flag t) nil [20426 20456])
            ("SGLIB_DL_LIST_IS_MEMBER" variable (:constant-flag t) nil [20896 20919])
            ("SGLIB_DL_LIST_FIND_MEMBER" variable (:constant-flag t) nil [21185 21210])
            ("SGLIB_DL_LIST_MAP_ON_ELEMENTS" variable (:constant-flag t) nil [21521 21550])
            ("SGLIB_DL_LIST_SORT" variable (:constant-flag t) nil [21876 21894])
            ("SGLIB_DL_LIST_GET_FIRST" variable (:constant-flag t) nil [22230 22253])
            ("SGLIB_DL_LIST_GET_LAST" variable (:constant-flag t) nil [22448 22470])
            ("SGLIB_DL_LIST_LEN" variable (:constant-flag t) nil [22657 22674])
            ("SGLIB_DL_LIST_REVERSE" variable (:constant-flag t) nil [22967 22988])
            ("SGLIB___DL_LIST_CREATE_FROM_LIST" variable (:constant-flag t) nil [23522 23554])
            ("SGLIB___BIN_TREE_MAP_ON_ELEMENTS" variable (:constant-flag t) nil [23846 23878])
            ("SGLIB_BIN_TREE_MAP_ON_ELEMENTS" variable (:constant-flag t) nil [25388 25418])
            ("SGLIB_BIN_TREE_MAP_ON_ELEMENTS_PREORDER" variable (:constant-flag t) nil [25579 25618])
            ("SGLIB_BIN_TREE_MAP_ON_ELEMENTS_POSTORDER" variable (:constant-flag t) nil [25779 25819])
            ("SGLIB___BIN_TREE_FIND_MEMBER" variable (:constant-flag t) nil [25980 26008])
            ("SGLIB_DEFINE_ARRAY_SORTING_PROTOTYPES" variable (:constant-flag t) nil [27039 27076])
            ("SGLIB_DEFINE_ARRAY_SORTING_FUNCTIONS" variable (:constant-flag t) nil [27236 27272])
            ("SGLIB_DEFINE_QUEUE_PROTOTYPES" variable (:constant-flag t) nil [28175 28204])
            ("SGLIB_DEFINE_QUEUE_FUNCTIONS" variable (:constant-flag t) nil [28847 28875])
            ("SGLIB_DEFINE_HEAP_PROTOTYPES" variable (:constant-flag t) nil [30651 30679])
            ("SGLIB_DEFINE_HEAP_FUNCTIONS" variable (:constant-flag t) nil [31321 31348])
            ("SGLIB_DEFINE_HASHED_TABLE_PROTOTYPES" variable (:constant-flag t) nil [33434 33470])
            ("SGLIB_DEFINE_HASHED_TABLE_FUNCTIONS" variable (:constant-flag t) nil [34438 34473])
            ("SGLIB_DEFINE_HASHED_CONTAINER_PROTOTYPES" variable (:constant-flag t) nil [37071 37111])
            ("SGLIB_DEFINE_HASHED_CONTAINER_FUNCTIONS" variable (:constant-flag t) nil [38379 38418])
            ("SGLIB_DEFINE_LIST_PROTOTYPES" variable (:constant-flag t) nil [41401 41429])
            ("SGLIB_DEFINE_LIST_FUNCTIONS" variable (:constant-flag t) nil [42634 42661])
            ("SGLIB_DEFINE_SORTED_LIST_PROTOTYPES" variable (:constant-flag t) nil [45085 45120])
            ("SGLIB_DEFINE_SORTED_LIST_FUNCTIONS" variable (:constant-flag t) nil [46209 46243])
            ("SGLIB_DEFINE_DL_LIST_PROTOTYPES" variable (:constant-flag t) nil [48596 48627])
            ("SGLIB_DEFINE_DL_LIST_FUNCTIONS" variable (:constant-flag t) nil [50285 50315])
            ("SGLIB___RBTREE_FIX_INSERTION_DISCREPANCY" variable (:constant-flag t) nil [54548 54588])
            ("SGLIB___RBTREE_FIX_DELETION_DISCREPANCY" variable (:constant-flag t) nil [55931 55970])
            ("SGLIB_DEFINE_RBTREE_FUNCTIONS_GENERAL" variable (:constant-flag t) nil [59712 59749])
            ("SGLIB_DEFINE_RBTREE_PROTOTYPES" variable (:constant-flag t) nil [69662 69692])
            ("SGLIB_DEFINE_RBTREE_FUNCTIONS" variable (:constant-flag t) nil [71199 71228])
            ("SGLIB___GET_VALUE" variable (:constant-flag t) nil [71787 71804])
            ("SGLIB___SET_VALUE" variable (:constant-flag t) nil [71820 71837])
            ("SGLIB_ARRAY_ELEMENTS_EXCHANGER" variable (:constant-flag t) nil [71873 71903])
            ("SGLIB_SAFE_NUMERIC_COMPARATOR" variable (:constant-flag t) nil [72019 72048])
            ("SGLIB_SAFE_REVERSE_NUMERIC_COMPARATOR" variable (:constant-flag t) nil [72092 72129])
            ("SGLIB_FAST_NUMERIC_COMPARATOR" variable (:constant-flag t) nil [72173 72202])
            ("SGLIB_FAST_REVERSE_NUMERIC_COMPARATOR" variable (:constant-flag t) nil [72236 72273])
            ("SGLIB_NUMERIC_COMPARATOR" variable (:constant-flag t) nil [72307 72331])
            ("SGLIB_REVERSE_NUMERIC_COMPARATOR" variable (:constant-flag t) nil [72382 72414])
            ("SGLIB_MAX_TREE_DEEP" variable (:constant-flag t) nil [72502 72521])
            ("SGLIB_HASH_TAB_SHIFT_CONSTANT" variable (:constant-flag t) nil [72580 72609]))          
      :file "sglib.h"
      :pointmax 72755
      :fsize 72754
      :lastmodtime '(21857 58108 568143 12000)
      :unmatched-syntax nil
      :lexical-table 
        '(("SGLIB_HEAP_IS_EMPTY" (spp-arg-list ("type" "a" "i") 7418 . 7430) . ((semantic-list "((i)==0)" 7431 . 7439)))
          ("SGLIB_HASH_TAB_IS_MEMBER" (spp-arg-list ("type" "table" "dim" "elem" "hash_function" "resultIndex") 10448 . 10500) . ((semantic-list "{\\
  unsigned _i_;\\
  int      _c_;\\
  type     *_e_;\\
  _count = 0;\\
  _i_ = hash_function(elem);\\
  _i_ %= (dim);\\
  while ((_e_=(table)[_i_])!=NULL && _e_!=(elem) && _c_<(dim)) {\\
    _c_ ++;\\
    _i_ = (_i_ + SGLIB_HASH_TAB_SHIFT_CONSTANT) % (dim);\\
  }\\
  if (_e_==(elem)) (resultIndex) = _i_;\\
  else (resultIndex) = -1;\\
}" 10501 . 10830)))
          ("SGLIB_DL_LIST_CONCAT" (spp-arg-list ("type" "first" "second" "previous" "next") 19758 . 19795) . ((semantic-list "{\\
  if ((first)==NULL) {\\
    (first) = (second);\\
  } else if ((second)!=NULL) {\\
    type *_dlp_;\\
    for(_dlp_ = (first); _dlp_->next!=NULL; _dlp_=_dlp_->next) ;\\
    SGLIB_DL_LIST_ADD_AFTER(type, _dlp_, second, previous, next);\\
  }\\
}" 19796 . 20037)))
          ("SGLIB_BIN_TREE_MAP_ON_ELEMENTS_POSTORDER" (spp-arg-list ("type" "tree" "_current_element_" "left" "right" "command") 25819 . 25872) . ((semantic-list "{\\
  SGLIB___BIN_TREE_MAP_ON_ELEMENTS(type, tree, _current_element_, 2, left, right, command);\\
}" 25873 . 25970)))
          ("SGLIB_DEFINE_QUEUE_PROTOTYPES" (spp-arg-list ("queue_type" "elem_type" "afield" "ifield" "jfield" "dim") 28204 . 28256) . 
              ((EXTERN "extern" 28260 . 28266) (VOID "void" 28267 . 28271) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 28272 . 28278) (symbol "queue_type" 28280 . 28290)) 28272 . 28290) (symbol "_init" 28292 . 28297)) 28272 . 28297) (semantic-list "(queue_type *q)" 28297 . 28312) (punctuation ";" 28312 . 28313) (EXTERN "extern" 28317 . 28323) (INT "int" 28324 . 28327) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 28328 . 28334) (symbol "queue_type" 28336 . 28346)) 28328 . 28346) (symbol "_is_empty" 28348 . 28357)) 28328 . 28357) (semantic-list "(queue_type *q)" 28357 . 28372) (punctuation ";" 28372 . 28373) (EXTERN "extern" 28377 . 28383) (INT "int" 28384 . 28387) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 28388 . 28394) (symbol "queue_type" 28396 . 28406)) 28388 . 28406) (symbol "_is_full" 28408 . 28416)) 28388 . 28416) (semantic-list "(queue_type *q)" 28416 . 28431) (punctuation ";" 28431 . 28432) (EXTERN "extern" 28436 . 28442) (symbol "elem_type" 28443 . 28452) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 28453 . 28459) (symbol "queue_type" 28461 . 28471)) 28453 . 28471) (symbol "_first_element" 28473 . 28487)) 28453 . 28487) (semantic-list "(queue_type *q)" 28487 . 28502) (punctuation ";" 28502 . 28503) (EXTERN "extern" 28507 . 28513) (symbol "elem_type" 28514 . 28523) (punctuation "*" 28524 . 28525) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 28525 . 28531) (symbol "queue_type" 28533 . 28543)) 28525 . 28543) (symbol "_first_element_ptr" 28545 . 28563)) 28525 . 28563) (semantic-list "(queue_type *q)" 28563 . 28578) (punctuation ";" 28578 . 28579) (EXTERN "extern" 28583 . 28589) (VOID "void" 28590 . 28594) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 28595 . 28601) (symbol "queue_type" 28603 . 28613)) 28595 . 28613) (symbol "_add_next" 28615 . 28624)) 28595 . 28624) (semantic-list "(queue_type *q)" 28624 . 28639) (punctuation ";" 28639 . 28640) (EXTERN "extern" 28644 . 28650) (VOID "void" 28651 . 28655) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 28656 . 28662) (symbol "queue_type" 28664 . 28674)) 28656 . 28674) (symbol "_add" 28676 . 28680)) 28656 . 28680) (semantic-list "(queue_type *q, elem_type elem)" 28680 . 28711) (punctuation ";" 28711 . 28712) (EXTERN "extern" 28716 . 28722) (VOID "void" 28723 . 28727) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 28728 . 28734) (symbol "queue_type" 28736 . 28746)) 28728 . 28746) (symbol "_delete_first" 28748 . 28761)) 28728 . 28761) (semantic-list "(queue_type *q)" 28761 . 28776) (punctuation ";" 28776 . 28777) (EXTERN "extern" 28781 . 28787) (VOID "void" 28788 . 28792) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 28793 . 28799) (symbol "queue_type" 28801 . 28811)) 28793 . 28811) (symbol "_delete" 28813 . 28820)) 28793 . 28820) (semantic-list "(queue_type *q)" 28820 . 28835) (punctuation ";" 28835 . 28836)))
          ("SGLIB_DEFINE_QUEUE_FUNCTIONS" (spp-arg-list ("queue_type" "elem_type" "afield" "ifield" "jfield" "dim") 28875 . 28927) . 
              ((VOID "void" 28931 . 28935) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 28936 . 28942) (symbol "queue_type" 28944 . 28954)) 28936 . 28954) (symbol "_init" 28956 . 28961)) 28936 . 28961) (semantic-list "(queue_type *q)" 28961 . 28976) (semantic-list "{\\
  SGLIB_QUEUE_INIT(elem_type, q->afield, q->ifield, q->jfield);\\
 }" 28977 . 29047) (INT "int" 29050 . 29053) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 29054 . 29060) (symbol "queue_type" 29062 . 29072)) 29054 . 29072) (symbol "_is_empty" 29074 . 29083)) 29054 . 29083) (semantic-list "(queue_type *q)" 29083 . 29098) (semantic-list "{\\
  return(SGLIB_QUEUE_IS_EMPTY(elem_type, q->afield, q->ifield, q->jfield));\\
 }" 29099 . 29181) (INT "int" 29184 . 29187) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 29188 . 29194) (symbol "queue_type" 29196 . 29206)) 29188 . 29206) (symbol "_is_full" 29208 . 29216)) 29188 . 29216) (semantic-list "(queue_type *q)" 29216 . 29231) (semantic-list "{\\
  return(SGLIB_QUEUE_IS_FULL(elem_type, q->afield, q->ifield, q->jfield));\\
 }" 29232 . 29313) (symbol "elem_type" 29316 . 29325) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 29326 . 29332) (symbol "queue_type" 29334 . 29344)) 29326 . 29344) (symbol "_first_element" 29346 . 29360)) 29326 . 29360) (semantic-list "(queue_type *q)" 29360 . 29375) (semantic-list "{\\
  return(SGLIB_QUEUE_FIRST_ELEMENT(elem_type, q->afield, q->ifield, q->jfield));\\
 }" 29376 . 29463) (symbol "elem_type" 29466 . 29475) (punctuation "*" 29476 . 29477) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 29477 . 29483) (symbol "queue_type" 29485 . 29495)) 29477 . 29495) (symbol "_first_element_ptr" 29497 . 29515)) 29477 . 29515) (semantic-list "(queue_type *q)" 29515 . 29530) (semantic-list "{\\
  return(& SGLIB_QUEUE_FIRST_ELEMENT(elem_type, q->afield, q->ifield, q->jfield));\\
 }" 29531 . 29620) (VOID "void" 29623 . 29627) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 29628 . 29634) (symbol "queue_type" 29636 . 29646)) 29628 . 29646) (symbol "_add_next" 29648 . 29657)) 29628 . 29657) (semantic-list "(queue_type *q)" 29657 . 29672) (semantic-list "{\\
  SGLIB_QUEUE_ADD_NEXT(elem_type, q->afield, q->ifield, q->jfield, dim);\\
 }" 29673 . 29752) (VOID "void" 29755 . 29759) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 29760 . 29766) (symbol "queue_type" 29768 . 29778)) 29760 . 29778) (symbol "_add" 29780 . 29784)) 29760 . 29784) (semantic-list "(queue_type *q, elem_type elem)" 29784 . 29815) (semantic-list "{\\
  SGLIB_QUEUE_ADD(elem_type, q->afield, elem, q->ifield, q->jfield, dim);\\
 }" 29816 . 29896) (VOID "void" 29899 . 29903) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 29904 . 29910) (symbol "queue_type" 29912 . 29922)) 29904 . 29922) (symbol "_delete_first" 29924 . 29937)) 29904 . 29937) (semantic-list "(queue_type *q)" 29937 . 29952) (semantic-list "{\\
  SGLIB_QUEUE_DELETE_FIRST(elem_type, q->afield, q->ifield, q->jfield, dim);\\
 }" 29953 . 30036) (VOID "void" 30039 . 30043) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 30044 . 30050) (symbol "queue_type" 30052 . 30062)) 30044 . 30062) (symbol "_delete" 30064 . 30071)) 30044 . 30071) (semantic-list "(queue_type *q)" 30071 . 30086) (semantic-list "{\\
  SGLIB_QUEUE_DELETE_FIRST(elem_type, q->afield, q->ifield, q->jfield, dim);\\
 }" 30087 . 30170)))
          ("SGLIB_DEFINE_SORTED_LIST_PROTOTYPES" (spp-arg-list ("type" "comparator" "next") 45120 . 45144) . 
              ((STRUCT "struct" 45148 . 45154) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 45155 . 45161) (symbol "type" 45163 . 45167)) 45155 . 45167) (symbol "_iterator" 45169 . 45178)) 45155 . 45178) (semantic-list "{\\
   type *currentelem;\\
   type *nextelem;\\
   int (*subcomparator)(type *, type *);\\
   type *equalto;\\
 }" 45179 . 45288) (punctuation ";" 45288 . 45289) (EXTERN "extern" 45292 . 45298) (VOID "void" 45299 . 45303) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 45304 . 45310) (symbol "type" 45312 . 45316)) 45304 . 45316) (symbol "_add" 45318 . 45322)) 45304 . 45322) (semantic-list "(type **list, type *elem)" 45322 . 45347) (punctuation ";" 45347 . 45348) (EXTERN "extern" 45351 . 45357) (INT "int" 45358 . 45361) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 45362 . 45368) (symbol "type" 45370 . 45374)) 45362 . 45374) (symbol "_add_if_not_member" 45376 . 45394)) 45362 . 45394) (semantic-list "(type **list, type *elem, type **member)" 45394 . 45434) (punctuation ";" 45434 . 45435) (EXTERN "extern" 45438 . 45444) (VOID "void" 45445 . 45449) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 45450 . 45456) (symbol "type" 45458 . 45462)) 45450 . 45462) (symbol "_delete" 45464 . 45471)) 45450 . 45471) (semantic-list "(type **list, type *elem)" 45471 . 45496) (punctuation ";" 45496 . 45497) (EXTERN "extern" 45500 . 45506) (INT "int" 45507 . 45510) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 45511 . 45517) (symbol "type" 45519 . 45523)) 45511 . 45523) (symbol "_delete_if_member" 45525 . 45542)) 45511 . 45542) (semantic-list "(type **list, type *elem, type **member)" 45542 . 45582) (punctuation ";" 45582 . 45583) (EXTERN "extern" 45586 . 45592) (INT "int" 45593 . 45596) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 45597 . 45603) (symbol "type" 45605 . 45609)) 45597 . 45609) (symbol "_is_member" 45611 . 45621)) 45597 . 45621) (semantic-list "(type *list, type *elem)" 45621 . 45645) (punctuation ";" 45645 . 45646) (EXTERN "extern" 45649 . 45655) (symbol "type" 45656 . 45660) (punctuation "*" 45661 . 45662) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 45662 . 45668) (symbol "type" 45670 . 45674)) 45662 . 45674) (symbol "_find_member" 45676 . 45688)) 45662 . 45688) (semantic-list "(type *list, type *elem)" 45688 . 45712) (punctuation ";" 45712 . 45713) (EXTERN "extern" 45716 . 45722) (INT "int" 45723 . 45726) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 45727 . 45733) (symbol "type" 45735 . 45739)) 45727 . 45739) (symbol "_len" 45741 . 45745)) 45727 . 45745) (semantic-list "(type *list)" 45745 . 45757) (punctuation ";" 45757 . 45758) (EXTERN "extern" 45761 . 45767) (VOID "void" 45768 . 45772) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 45773 . 45779) (symbol "type" 45781 . 45785)) 45773 . 45785) (symbol "_sort" 45787 . 45792)) 45773 . 45792) (semantic-list "(type **list)" 45792 . 45805) (punctuation ";" 45805 . 45806) (EXTERN "extern" 45809 . 45815) (symbol "type" 45816 . 45820) (punctuation "*" 45821 . 45822) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 45822 . 45828) (symbol "type" 45830 . 45834)) 45822 . 45834) (symbol "_it_init" 45836 . 45844)) 45822 . 45844) (semantic-list "(struct sglib_##type##_iterator *it, type *list)" 45844 . 45892) (punctuation ";" 45892 . 45893) (EXTERN "extern" 45897 . 45903) (symbol "type" 45904 . 45908) (punctuation "*" 45909 . 45910) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 45910 . 45916) (symbol "type" 45918 . 45922)) 45910 . 45922) (symbol "_it_init_on_equal" 45924 . 45941)) 45910 . 45941) (semantic-list "(struct sglib_##type##_iterator *it, type *list, int (*subcomparator)(type *, type *), type *equalto)" 45941 . 46042) (punctuation ";" 46042 . 46043) (EXTERN "extern" 46047 . 46053) (symbol "type" 46054 . 46058) (punctuation "*" 46059 . 46060) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 46060 . 46066) (symbol "type" 46068 . 46072)) 46060 . 46072) (symbol "_it_current" 46074 . 46085)) 46060 . 46085) (semantic-list "(struct sglib_##type##_iterator *it)" 46085 . 46121) (punctuation ";" 46121 . 46122) (EXTERN "extern" 46126 . 46132) (symbol "type" 46133 . 46137) (punctuation "*" 46138 . 46139) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 46139 . 46145) (symbol "type" 46147 . 46151)) 46139 . 46151) (symbol "_it_next" 46153 . 46161)) 46139 . 46161) (semantic-list "(struct sglib_##type##_iterator *it)" 46161 . 46197) (punctuation ";" 46197 . 46198)))
          ("SGLIB___RBTREE_FIX_DELETION_DISCREPANCY" (spp-arg-list ("type" "tree" "leftt" "rightt" "bits" "RED" "BLACK" "res") 55970 . 56020) . ((semantic-list "{\\
  type  *t, *a, *b, *c, *d, *ar, *bl, *br, *cl, *cr, *dl, *dr;\\
  t = a = *tree;\\
  assert(t!=NULL);\\
  ar = a->rightt;\\
  b = t->leftt;\\
  if (b==NULL) {\\
    assert(SGLIB___GET_VALUE(t->bits)==RED);\\
    SGLIB___SET_VALUE(t->bits,BLACK);\\
    res = 0;\\
  } else {\\
    bl = b->leftt;\\
    br = b->rightt;\\
    if (SGLIB___GET_VALUE(b->bits)==RED) {\\
      if (br==NULL) {\\
        *tree = b;\\
        SGLIB___SET_VALUE(b->bits,BLACK);\\
        b->rightt = a;\\
        a->leftt = br;\\
        res = 0;\\
      } else {\\
        c = br;\\
        assert(c!=NULL && SGLIB___GET_VALUE(c->bits)==BLACK);\\
        cl = c->leftt;\\
        cr = c->rightt;\\
        if ((cl==NULL||SGLIB___GET_VALUE(cl->bits)==BLACK) && (cr==NULL||SGLIB___GET_VALUE(cr->bits)==BLACK)) {\\
          *tree = b;\\
          b->rightt = a;\\
          SGLIB___SET_VALUE(b->bits,BLACK);\\
          a->leftt = c;\\
          SGLIB___SET_VALUE(c->bits,RED);\\
          res = 0;\\
        } else if (cl!=NULL && SGLIB___GET_VALUE(cl->bits)==RED) {\\
          if (cr!=NULL && SGLIB___GET_VALUE(cr->bits)==RED) {\\
            d = cr;\\
            dl = d->leftt;\\
            dr = d->rightt;\\
            *tree = d;\\
            SGLIB___SET_VALUE(d->bits,BLACK);\\
            d->leftt = b;\\
            c->rightt = dl;\\
            d->rightt = a;\\
            a->leftt = dr;\\
            res = 0;\\
          } else {\\
            *tree = c;\\
            c->leftt = b;\\
            c->rightt = a;\\
            b->leftt = bl;\\
            b->rightt = cl;\\
            a->leftt = cr;\\
            SGLIB___SET_VALUE(cl->bits,BLACK);\\
            res = 0;\\
          }\\
        } else if (cr!=NULL && SGLIB___GET_VALUE(cr->bits)==RED) {\\
          assert(cl==NULL || SGLIB___GET_VALUE(cl->bits)==BLACK);\\
          d = cr;\\
          dl = d->leftt;\\
          dr = d->rightt;\\
          *tree = d;\\
          SGLIB___SET_VALUE(d->bits,BLACK);\\
          d->leftt = b;\\
          c->rightt = dl;\\
          d->rightt = a;\\
          a->leftt = dr;\\
          res = 0;\\
        } else {\\
          assert(0);\\
          res = 0;\\
        }\\
      }\\
    } else {\\
      if ((bl==NULL || SGLIB___GET_VALUE(bl->bits)==BLACK) && (br==NULL || SGLIB___GET_VALUE(br->bits)==BLACK)) {\\
        res = (SGLIB___GET_VALUE(a->bits)==BLACK);\\
        SGLIB___SET_VALUE(a->bits,BLACK);\\
        SGLIB___SET_VALUE(b->bits,RED);\\
      } else if (bl!=NULL && SGLIB___GET_VALUE(bl->bits)==RED) {\\
        if (br==NULL || SGLIB___GET_VALUE(br->bits)==BLACK) {\\
          *tree = b;\\
          SGLIB___SET_VALUE(b->bits,SGLIB___GET_VALUE(a->bits));\\
          SGLIB___SET_VALUE(a->bits,BLACK);\\
          b->rightt = a;\\
          a->leftt = br;\\
          SGLIB___SET_VALUE(bl->bits,BLACK);\\
          res = 0;\\
        } else {\\
          assert(bl!=NULL);\\
          assert(br!=NULL);\\
          assert(SGLIB___GET_VALUE(bl->bits)==RED);\\
          assert(SGLIB___GET_VALUE(br->bits)==RED);\\
          c = br;\\
          cl = c->leftt;\\
          cr = c->rightt;\\
          *tree = c;\\
          SGLIB___SET_VALUE(c->bits,SGLIB___GET_VALUE(a->bits));\\
          SGLIB___SET_VALUE(a->bits,BLACK);\\
          c->leftt = b;\\
          c->rightt = a;\\
          b->rightt = cl;\\
          a->leftt = cr;\\
          res = 0;\\
        }\\
      } else {\\
        assert(br!=NULL && SGLIB___GET_VALUE(br->bits)==RED);\\
        c = br;\\
        cl = c->leftt;\\
        cr = c->rightt;\\
        *tree = c;\\
        SGLIB___SET_VALUE(c->bits,SGLIB___GET_VALUE(a->bits));\\
        SGLIB___SET_VALUE(a->bits,BLACK);\\
        c->leftt = b;\\
        c->rightt = a;\\
        b->rightt = cl;\\
        a->leftt = cr;\\
        res = 0;\\
      }\\
    }\\
  }\\
}" 56021 . 59701)))
          ("SGLIB_DEFINE_RBTREE_FUNCTIONS_GENERAL" (spp-arg-list ("type" "left" "right" "bits" "comparator" "RED" "BLACK") 59749 . 59798) . 
              ((STATIC "static" 59801 . 59807) (VOID "void" 59808 . 59812) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib___" 59813 . 59821) (symbol "type" 59823 . 59827)) 59813 . 59827) (symbol "_fix_left_insertion_discrepancy" 59829 . 59860)) 59813 . 59860) (semantic-list "(type **tree)" 59860 . 59873) (semantic-list "{\\
  SGLIB___RBTREE_FIX_INSERTION_DISCREPANCY(type, tree, left, right, bits, RED, BLACK);\\
}" 59874 . 59966) (STATIC "static" 59970 . 59976) (VOID "void" 59977 . 59981) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib___" 59982 . 59990) (symbol "type" 59992 . 59996)) 59982 . 59996) (symbol "_fix_right_insertion_discrepancy" 59998 . 60030)) 59982 . 60030) (semantic-list "(type **tree)" 60030 . 60043) (semantic-list "{\\
  SGLIB___RBTREE_FIX_INSERTION_DISCREPANCY(type, tree, right, left, bits, RED, BLACK);\\
}" 60044 . 60136) (STATIC "static" 60140 . 60146) (INT "int" 60147 . 60150) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib___" 60151 . 60159) (symbol "type" 60161 . 60165)) 60151 . 60165) (symbol "_fix_left_deletion_discrepancy" 60167 . 60197)) 60151 . 60197) (semantic-list "(type **tree)" 60197 . 60210) (semantic-list "{\\
  int       res;\\
  SGLIB___RBTREE_FIX_DELETION_DISCREPANCY(type, tree, right, left, bits, RED, BLACK, res);\\
  return(res);\\
}" 60211 . 60341) (STATIC "static" 60345 . 60351) (INT "int" 60352 . 60355) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib___" 60356 . 60364) (symbol "type" 60366 . 60370)) 60356 . 60370) (symbol "_fix_right_deletion_discrepancy" 60372 . 60403)) 60356 . 60403) (semantic-list "(type **tree)" 60403 . 60416) (semantic-list "{\\
  int       res;\\
  SGLIB___RBTREE_FIX_DELETION_DISCREPANCY(type, tree, left, right, bits, RED, BLACK, res);\\
  return(res);\\
}" 60417 . 60547) (STATIC "static" 60551 . 60557) (VOID "void" 60558 . 60562) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib___" 60563 . 60571) (symbol "type" 60573 . 60577)) 60563 . 60577) (symbol "_add_recursive" 60579 . 60593)) 60563 . 60593) (semantic-list "(type **tree, type *elem)" 60593 . 60618) (semantic-list "{\\
  int cmp;\\
  type *t;\\
  t = *tree;\\
  if (t == NULL) {\\
    SGLIB___SET_VALUE(elem->bits,RED);\\
    *tree =elem;\\
  } else {\\
    cmp = comparator(elem, t);\\
    if (cmp < 0 || (cmp==0 && elem<t)) {\\
      sglib___##type##_add_recursive(&t->left, elem);\\
      if (SGLIB___GET_VALUE(t->bits)==BLACK) sglib___##type##_fix_left_insertion_discrepancy(tree);\\
    } else {\\
      sglib___##type##_add_recursive(&t->right, elem);\\
      if (SGLIB___GET_VALUE(t->bits)==BLACK) sglib___##type##_fix_right_insertion_discrepancy(tree);\\
    }\\
  }\\
}" 60619 . 61165) (STATIC "static" 61169 . 61175) (INT "int" 61176 . 61179) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib___" 61180 . 61188) (symbol "type" 61190 . 61194)) 61180 . 61194) (symbol "_delete_rightmost_leaf" 61196 . 61218)) 61180 . 61218) (semantic-list "(type **tree, type **theLeaf)" 61218 . 61247) (semantic-list "{\\
  type  *t;\\
  int       res, deepDecreased;\\
  t = *tree;\\
  res = 0;\\
  assert(t!=NULL);\\
  if (t->right == NULL) {\\
    *theLeaf = t;\\
    if (t->left!=NULL) {\\
      if (SGLIB___GET_VALUE(t->bits)==BLACK && SGLIB___GET_VALUE(t->left->bits)==BLACK) res = 1;\\
      SGLIB___SET_VALUE(t->left->bits,BLACK);\\
      *tree = t->left;\\
    } else {\\
      *tree = NULL;\\
      res = (SGLIB___GET_VALUE(t->bits)==BLACK);\\
    }\\
  } else {\\
    deepDecreased = sglib___##type##_delete_rightmost_leaf(&t->right, theLeaf);\\
    if (deepDecreased) res = sglib___##type##_fix_right_deletion_discrepancy(tree);\\
  }\\
  return(res);\\
}" 61248 . 61876) (INT "int" 61880 . 61883) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib___" 61884 . 61892) (symbol "type" 61894 . 61898)) 61884 . 61898) (symbol "_delete_recursive" 61900 . 61917)) 61884 . 61917) (semantic-list "(type **tree, type *elem)" 61917 . 61942) (semantic-list "{\\
  type  *t, *theLeaf;\\
  int       cmp, res, deepDecreased;\\
  t = *tree;\\
  res = 0;\\
  if (t==NULL) {\\
    assert(0 && \"The element to delete not found in the tree,  use 'delete_if_member'\"!=NULL);\\
  } else {\\
    cmp = comparator(elem, t);\\
    if (cmp < 0 || (cmp==0 && elem<t)) {\\
      deepDecreased = sglib___##type##_delete_recursive(&t->left, elem);\\
      if (deepDecreased) {\\
        res = sglib___##type##_fix_left_deletion_discrepancy(tree);\\
      }\\
    } else if (cmp > 0  || (cmp==0 && elem>t)) {\\
      deepDecreased = sglib___##type##_delete_recursive(&t->right, elem);\\
      if (deepDecreased) {\\
        res = sglib___##type##_fix_right_deletion_discrepancy(tree);\\
      }\\
    } else {\\
      assert(elem==t && \"Deleting an element which is non member of the tree, use 'delete_if_member'\"!=NULL);\\
      if (t->left == NULL) {\\
        if (t->right == NULL) {\\
          /* a leaf, delete, it; */\\
          *tree = NULL;\\
          res = (SGLIB___GET_VALUE(t->bits)==BLACK);\\
        } else {\\
          if (SGLIB___GET_VALUE(t->bits)==0 && SGLIB___GET_VALUE(t->right->bits)==0) res = 1;\\
          SGLIB___SET_VALUE(t->right->bits,BLACK);\\
          *tree = t->right;\\
        }\\
      } else {\\
        /* propagate deletion until righmost leaf of left subtree */\\
        deepDecreased = sglib___##type##_delete_rightmost_leaf(&t->left, &theLeaf);\\
        theLeaf->left = t->left;\\
        theLeaf->right = t->right;\\
        SGLIB___SET_VALUE(theLeaf->bits,SGLIB___GET_VALUE(t->bits));\\
        *tree = theLeaf;\\
        if (deepDecreased) res = sglib___##type##_fix_left_deletion_discrepancy(tree);\\
      }\\
    }\\
  }\\
  return(res);\\
}" 61943 . 63617) (VOID "void" 63621 . 63625) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 63626 . 63632) (symbol "type" 63634 . 63638)) 63626 . 63638) (symbol "_add" 63640 . 63644)) 63626 . 63644) (semantic-list "(type **tree, type *elem)" 63644 . 63669) (semantic-list "{\\
  elem->left = elem->right = NULL;\\
  sglib___##type##_add_recursive(tree, elem);\\
  SGLIB___SET_VALUE((*tree)->bits,BLACK);\\
}" 63670 . 63800) (VOID "void" 63804 . 63808) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 63809 . 63815) (symbol "type" 63817 . 63821)) 63809 . 63821) (symbol "_delete" 63823 . 63830)) 63809 . 63830) (semantic-list "(type **tree, type *elem)" 63830 . 63855) (semantic-list "{\\
  sglib___##type##_delete_recursive(tree, elem);\\
  if (*tree!=NULL) SGLIB___SET_VALUE((*tree)->bits,BLACK);\\
}" 63856 . 63970) (symbol "type" 63974 . 63978) (punctuation "*" 63979 . 63980) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 63980 . 63986) (symbol "type" 63988 . 63992)) 63980 . 63992) (symbol "_find_member" 63994 . 64006)) 63980 . 64006) (semantic-list "(type *t, type *elem)" 64006 . 64027) (semantic-list "{\\
  type *res;\\
  SGLIB___BIN_TREE_FIND_MEMBER(type, t, elem, left, right, comparator, res);\\
  return(res);\\
}" 64028 . 64140) (INT "int" 64144 . 64147) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 64148 . 64154) (symbol "type" 64156 . 64160)) 64148 . 64160) (symbol "_is_member" 64162 . 64172)) 64148 . 64172) (semantic-list "(type *t, type *elem)" 64172 . 64193) (semantic-list "{\\
  int       cmp;\\
  while (t!=NULL) {\\
    cmp = comparator(elem, t);\\
    if (cmp < 0 || (cmp==0 && elem<t)) {\\
      t = t->left;\\
    } else if (cmp > 0 || (cmp==0 && elem>t)) {\\
      t = t->right;\\
    } else {\\
      assert(t == elem);\\
      return(1);\\
    }\\
  }\\
  return(0);\\
}" 64194 . 64485) (INT "int" 64489 . 64492) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 64493 . 64499) (symbol "type" 64501 . 64505)) 64493 . 64505) (symbol "_delete_if_member" 64507 . 64524)) 64493 . 64524) (semantic-list "(type **tree, type *elem, type **memb)" 64524 . 64562) (semantic-list "{\\
  if ((*memb=sglib_##type##_find_member(*tree, elem))!=NULL) {\\
    sglib_##type##_delete(tree, *memb);\\
    return(1);\\
  } else {\\
    return(0);\\
  }\\
}" 64563 . 64721) (INT "int" 64723 . 64726) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 64727 . 64733) (symbol "type" 64735 . 64739)) 64727 . 64739) (symbol "_add_if_not_member" 64741 . 64759)) 64727 . 64759) (semantic-list "(type **tree, type *elem, type **memb)" 64759 . 64797) (semantic-list "{\\
  if ((*memb=sglib_##type##_find_member(*tree, elem))==NULL) {\\
    sglib_##type##_add(tree, elem);\\
    return(1);\\
  } else {\\
    return(0);\\
  }\\
}" 64798 . 64952) (INT "int" 64954 . 64957) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 64958 . 64964) (symbol "type" 64966 . 64970)) 64958 . 64970) (symbol "_len" 64972 . 64976)) 64958 . 64976) (semantic-list "(type *t)" 64976 . 64985) (semantic-list "{\\
    int   n;\\
    type  *e;\\
    n = 0;\\
    SGLIB_BIN_TREE_MAP_ON_ELEMENTS(type, t, e, left, right, n++);\\
    return(n);\\
}" 64986 . 65114) (VOID "void" 65118 . 65122) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib__" 65123 . 65130) (symbol "type" 65132 . 65136)) 65123 . 65136) (symbol "_it_compute_current_elem" 65138 . 65162)) 65123 . 65162) (semantic-list "(struct sglib_##type##_iterator *it)" 65162 . 65198) (semantic-list "{\\
    int   i,j,cmp;\\
    type  *s, *eqt;\\
    int   (*subcomparator)(type *, type *);\\
    eqt = it->equalto;\\
    subcomparator = it->subcomparator;\\
    it->currentelem = NULL;\\
    while(it->pathi > 0 && it->currentelem==NULL) {\\
        i = it->pathi-1;\\
        if (i >= 0) {\\
            if (it->pass[i] >= 2) {\\
                /* goto up */\\
                it->pathi --;\\
            } else {\\
              if (it->pass[i] == 0) {\\
                  /* goto left */\\
                s = it->path[i]->left;\\
              } else {\\
                /* goto right */\\
                s = it->path[i]->right;\\
              }\\
              if (eqt != NULL) {\\
                if (subcomparator == NULL) {\\
                  SGLIB___BIN_TREE_FIND_MEMBER(type, s, eqt, left, right, comparator, s);\\
                } else {\\
                  SGLIB___BIN_TREE_FIND_MEMBER(type, s, eqt, left, right, subcomparator, s);\\
                }\\
              }\\
              if  (s != NULL) {\\
                j = i+1;\\
                it->path[j] = s;\\
                it->pass[j] = 0;\\
                it->pathi ++;\\
              }\\
              it->pass[i] ++;\\
            }\\
        }\\
        if (it->pathi>0 && it->order == it->pass[it->pathi-1]) {\\
            it->currentelem = it->path[it->pathi-1];\\
        }\\
    }\\
}" 65199 . 66532) (symbol "type" 66534 . 66538) (punctuation "*" 66539 . 66540) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib__" 66540 . 66547) (symbol "type" 66549 . 66553)) 66540 . 66553) (symbol "_it_init" 66555 . 66563)) 66540 . 66563) (semantic-list "(struct sglib_##type##_iterator *it, type *tree, int order, int (*subcomparator)(type *, type *), type *equalto)" 66563 . 66675) (semantic-list "{\\
    type *t;\\
    assert(it!=NULL);\\
    it->order = order;\\
    it->equalto = equalto;\\
    it->subcomparator = subcomparator;\\
    if (equalto == NULL) {  \\
        t = tree;\\
    } else {\\
        if (subcomparator == NULL) {\\
          SGLIB___BIN_TREE_FIND_MEMBER(type, tree, equalto, left, right, comparator, t);\\
        } else {\\
          SGLIB___BIN_TREE_FIND_MEMBER(type, tree, equalto, left, right, subcomparator, t);\\
        }\\
    }\\
    if (t == NULL) {\\
        it->pathi = 0;\\
        it->currentelem = NULL;\\
    } else {\\
        it->pathi = 1;\\
        it->pass[0] = 0;\\
        it->path[0] = t;\\
        if (order == 0) {\\
            it->currentelem = t;\\
        } else {\\
            sglib__##type##_it_compute_current_elem(it);\\
        }\\
    }\\
    return(it->currentelem);\\
}" 66676 . 67483) (symbol "type" 67485 . 67489) (punctuation "*" 67490 . 67491) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 67491 . 67497) (symbol "type" 67499 . 67503)) 67491 . 67503) (symbol "_it_init" 67505 . 67513)) 67491 . 67513) (semantic-list "(struct sglib_##type##_iterator *it, type *tree)" 67513 . 67561) (semantic-list "{\\
  return(sglib__##type##_it_init(it, tree, 2, NULL, NULL));\\
}" 67562 . 67627) (symbol "type" 67629 . 67633) (punctuation "*" 67634 . 67635) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 67635 . 67641) (symbol "type" 67643 . 67647)) 67635 . 67647) (symbol "_it_init_preorder" 67649 . 67666)) 67635 . 67666) (semantic-list "(struct sglib_##type##_iterator *it, type *tree)" 67666 . 67714) (semantic-list "{\\
  return(sglib__##type##_it_init(it, tree, 0, NULL, NULL));\\
}" 67715 . 67780) (symbol "type" 67782 . 67786) (punctuation "*" 67787 . 67788) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 67788 . 67794) (symbol "type" 67796 . 67800)) 67788 . 67800) (symbol "_it_init_inorder" 67802 . 67818)) 67788 . 67818) (semantic-list "(struct sglib_##type##_iterator *it, type *tree)" 67818 . 67866) (semantic-list "{\\
  return(sglib__##type##_it_init(it, tree, 1, NULL, NULL));\\
}" 67867 . 67932) (symbol "type" 67934 . 67938) (punctuation "*" 67939 . 67940) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 67940 . 67946) (symbol "type" 67948 . 67952)) 67940 . 67952) (symbol "_it_init_postorder" 67954 . 67972)) 67940 . 67972) (semantic-list "(struct sglib_##type##_iterator *it, type *tree)" 67972 . 68020) (semantic-list "{\\
  return(sglib__##type##_it_init(it, tree, 2, NULL, NULL));\\
}" 68021 . 68086) (symbol "type" 68088 . 68092) (punctuation "*" 68093 . 68094) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 68094 . 68100) (symbol "type" 68102 . 68106)) 68094 . 68106) (symbol "_it_init_on_equal" 68108 . 68125)) 68094 . 68125) (semantic-list "(struct sglib_##type##_iterator *it, type *tree, int (*subcomparator)(type *, type *), type *equalto)" 68125 . 68226) (semantic-list "{\\
  return(sglib__##type##_it_init(it, tree, 1, subcomparator, equalto));\\
}" 68227 . 68304) (symbol "type" 68306 . 68310) (punctuation "*" 68311 . 68312) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 68312 . 68318) (symbol "type" 68320 . 68324)) 68312 . 68324) (symbol "_it_current" 68326 . 68337)) 68312 . 68337) (semantic-list "(struct sglib_##type##_iterator *it)" 68337 . 68373) (semantic-list "{\\
  return(it->currentelem);\\
}" 68374 . 68406) (symbol "type" 68408 . 68412) (punctuation "*" 68413 . 68414) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 68414 . 68420) (symbol "type" 68422 . 68426)) 68414 . 68426) (symbol "_it_next" 68428 . 68436)) 68414 . 68436) (semantic-list "(struct sglib_##type##_iterator *it)" 68436 . 68472) (semantic-list "{\\
  sglib__##type##_it_compute_current_elem(it);\\
  return(it->currentelem);\\
}" 68473 . 68553) (STATIC "static" 68557 . 68563) (VOID "void" 68564 . 68568) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib___" 68569 . 68577) (symbol "type" 68579 . 68583)) 68569 . 68583) (symbol "_consistency_check_recursive" 68585 . 68613)) 68569 . 68613) (semantic-list "(type *t, int *pathdeep, int cdeep)" 68613 . 68648) (semantic-list "{\\
  if (t==NULL) {\\
    if (*pathdeep < 0) *pathdeep = cdeep;\\
    else assert(*pathdeep == cdeep);\\
  } else {\\
    if (t->left!=NULL) assert(comparator(t->left, t) <= 0);\\
    if (t->right!=NULL) assert(comparator(t, t->right) <= 0);\\
    if (SGLIB___GET_VALUE(t->bits) == RED) {\\
      assert(t->left == NULL || SGLIB___GET_VALUE(t->left->bits)==BLACK);\\
      assert(t->right == NULL || SGLIB___GET_VALUE(t->right->bits)==BLACK);\\
      sglib___##type##_consistency_check_recursive(t->left, pathdeep, cdeep);\\
      sglib___##type##_consistency_check_recursive(t->right, pathdeep, cdeep);\\
    } else {\\
      sglib___##type##_consistency_check_recursive(t->left, pathdeep, cdeep+1);\\
      sglib___##type##_consistency_check_recursive(t->right, pathdeep, cdeep+1);\\
    }\\
  }\\
}" 68649 . 69434) (VOID "void" 69438 . 69442) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib___" 69443 . 69451) (symbol "type" 69453 . 69457)) 69443 . 69457) (symbol "_consistency_check" 69459 . 69477)) 69443 . 69477) (semantic-list "(type *t)" 69477 . 69486) (semantic-list "{\\
  int pathDeep;\\
  assert(t==NULL || SGLIB___GET_VALUE(t->bits) == BLACK);\\
  pathDeep = -1;\\
  sglib___##type##_consistency_check_recursive(t, &pathDeep, 0);\\
}" 69487 . 69651)))
          ("SGLIB_DEFINE_RBTREE_PROTOTYPES" (spp-arg-list ("type" "left" "right" "colorbit" "comparator") 69692 . 69733) . 
              ((STRUCT "struct" 69737 . 69743) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 69744 . 69750) (symbol "type" 69752 . 69756)) 69744 . 69756) (symbol "_iterator" 69758 . 69767)) 69744 . 69767) (semantic-list "{\\
    type *currentelem;\\
    char pass[SGLIB_MAX_TREE_DEEP];\\
    type *path[SGLIB_MAX_TREE_DEEP];\\
    short int pathi;\\
    short int order;\\
    type *equalto;\\
    int (*subcomparator)(type *, type *);\\
 }" 69768 . 69979) (punctuation ";" 69979 . 69980) (EXTERN "extern" 69983 . 69989) (VOID "void" 69990 . 69994) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib___" 69995 . 70003) (symbol "type" 70005 . 70009)) 69995 . 70009) (symbol "_consistency_check" 70011 . 70029)) 69995 . 70029) (semantic-list "(type *t)" 70029 . 70038) (punctuation ";" 70038 . 70039) (EXTERN "extern" 70043 . 70049) (VOID "void" 70050 . 70054) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70055 . 70061) (symbol "type" 70063 . 70067)) 70055 . 70067) (symbol "_add" 70069 . 70073)) 70055 . 70073) (semantic-list "(type **tree, type *elem)" 70073 . 70098) (punctuation ";" 70098 . 70099) (EXTERN "extern" 70103 . 70109) (INT "int" 70110 . 70113) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70114 . 70120) (symbol "type" 70122 . 70126)) 70114 . 70126) (symbol "_add_if_not_member" 70128 . 70146)) 70114 . 70146) (semantic-list "(type **tree, type *elem, type **memb)" 70146 . 70184) (punctuation ";" 70184 . 70185) (EXTERN "extern" 70189 . 70195) (VOID "void" 70196 . 70200) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70201 . 70207) (symbol "type" 70209 . 70213)) 70201 . 70213) (symbol "_delete" 70215 . 70222)) 70201 . 70222) (semantic-list "(type **tree, type *elem)" 70222 . 70247) (punctuation ";" 70247 . 70248) (EXTERN "extern" 70252 . 70258) (INT "int" 70259 . 70262) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70263 . 70269) (symbol "type" 70271 . 70275)) 70263 . 70275) (symbol "_delete_if_member" 70277 . 70294)) 70263 . 70294) (semantic-list "(type **tree, type *elem, type **memb)" 70294 . 70332) (punctuation ";" 70332 . 70333) (EXTERN "extern" 70337 . 70343) (INT "int" 70344 . 70347) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70348 . 70354) (symbol "type" 70356 . 70360)) 70348 . 70360) (symbol "_is_member" 70362 . 70372)) 70348 . 70372) (semantic-list "(type *t, type *elem)" 70372 . 70393) (punctuation ";" 70393 . 70394) (EXTERN "extern" 70398 . 70404) (symbol "type" 70405 . 70409) (punctuation "*" 70410 . 70411) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70411 . 70417) (symbol "type" 70419 . 70423)) 70411 . 70423) (symbol "_find_member" 70425 . 70437)) 70411 . 70437) (semantic-list "(type *t, type *elem)" 70437 . 70458) (punctuation ";" 70458 . 70459) (EXTERN "extern" 70463 . 70469) (INT "int" 70470 . 70473) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70474 . 70480) (symbol "type" 70482 . 70486)) 70474 . 70486) (symbol "_len" 70488 . 70492)) 70474 . 70492) (semantic-list "(type *t)" 70492 . 70501) (punctuation ";" 70501 . 70502) (EXTERN "extern" 70506 . 70512) (symbol "type" 70513 . 70517) (punctuation "*" 70518 . 70519) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70519 . 70525) (symbol "type" 70527 . 70531)) 70519 . 70531) (symbol "_it_init" 70533 . 70541)) 70519 . 70541) (semantic-list "(struct sglib_##type##_iterator *it, type *tree)" 70541 . 70589) (punctuation ";" 70589 . 70590) (EXTERN "extern" 70594 . 70600) (symbol "type" 70601 . 70605) (punctuation "*" 70606 . 70607) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70607 . 70613) (symbol "type" 70615 . 70619)) 70607 . 70619) (symbol "_it_init_preorder" 70621 . 70638)) 70607 . 70638) (semantic-list "(struct sglib_##type##_iterator *it, type *tree)" 70638 . 70686) (punctuation ";" 70686 . 70687) (EXTERN "extern" 70691 . 70697) (symbol "type" 70698 . 70702) (punctuation "*" 70703 . 70704) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70704 . 70710) (symbol "type" 70712 . 70716)) 70704 . 70716) (symbol "_it_init_inorder" 70718 . 70734)) 70704 . 70734) (semantic-list "(struct sglib_##type##_iterator *it, type *tree)" 70734 . 70782) (punctuation ";" 70782 . 70783) (EXTERN "extern" 70787 . 70793) (symbol "type" 70794 . 70798) (punctuation "*" 70799 . 70800) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70800 . 70806) (symbol "type" 70808 . 70812)) 70800 . 70812) (symbol "_it_init_postorder" 70814 . 70832)) 70800 . 70832) (semantic-list "(struct sglib_##type##_iterator *it, type *tree)" 70832 . 70880) (punctuation ";" 70880 . 70881) (EXTERN "extern" 70885 . 70891) (symbol "type" 70892 . 70896) (punctuation "*" 70897 . 70898) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 70898 . 70904) (symbol "type" 70906 . 70910)) 70898 . 70910) (symbol "_it_init_on_equal" 70912 . 70929)) 70898 . 70929) (semantic-list "(struct sglib_##type##_iterator *it, type *tree, int (*subcomparator)(type *, type *), type *equalto)" 70929 . 71030) (punctuation ";" 71030 . 71031) (EXTERN "extern" 71035 . 71041) (symbol "type" 71042 . 71046) (punctuation "*" 71047 . 71048) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 71048 . 71054) (symbol "type" 71056 . 71060)) 71048 . 71060) (symbol "_it_current" 71062 . 71073)) 71048 . 71073) (semantic-list "(struct sglib_##type##_iterator *it)" 71073 . 71109) (punctuation ";" 71109 . 71110) (EXTERN "extern" 71114 . 71120) (symbol "type" 71121 . 71125) (punctuation "*" 71126 . 71127) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 71127 . 71133) (symbol "type" 71135 . 71139)) 71127 . 71139) (symbol "_it_next" 71141 . 71149)) 71127 . 71149) (semantic-list "(struct sglib_##type##_iterator *it)" 71149 . 71185) (punctuation ";" 71185 . 71186)))
          ("SGLIB_SAFE_REVERSE_NUMERIC_COMPARATOR" (spp-arg-list ("x" "y") 72129 . 72135) . ((semantic-list "(((x)>(y)?-1:((x)<(y)?1:0)))" 72136 . 72164)))
          ("SGLIB_MAX_TREE_DEEP" . ((number "128" 72522 . 72525)))
          ("SGLIB_QUEUE_IS_EMPTY" (spp-arg-list ("type" "a" "i" "j") 6160 . 6175) . ((semantic-list "((i)==(j))" 6176 . 6186)))
          ("SGLIB_SORTED_LIST_MAP_ON_ELEMENTS" (spp-arg-list ("type" "list" "iteratedVariable" "next" "command") 17220 . 17265) . ((semantic-list "{\\
  SGLIB_LIST_MAP_ON_ELEMENTS(type, list, iteratedVariable, next, command);\\
}" 17266 . 17346)))
          ("SGLIB_DL_LIST_ADD" (spp-arg-list ("type" "list" "elem" "previous" "next") 18448 . 18482) . ((semantic-list "{\\
  SGLIB_DL_LIST_ADD_BEFORE(type, list, elem, previous, next)\\
}" 18483 . 18549)))
          ("SGLIB_DL_LIST_MAP_ON_ELEMENTS" (spp-arg-list ("type" "list" "iteratedVariable" "previous" "next" "command") 21550 . 21605) . ((semantic-list "{\\
  type *_dl_;\\
  type *iteratedVariable;\\
  if ((list)!=NULL) {\\
    _dl_ = (list)->next;\\
    SGLIB_LIST_MAP_ON_ELEMENTS(type, list, iteratedVariable, previous, command);\\
    SGLIB_LIST_MAP_ON_ELEMENTS(type, _dl_, iteratedVariable, next, command);\\
  }\\
}" 21606 . 21866)))
          ("SGLIB_DL_LIST_SORT" (spp-arg-list ("type" "list" "comparator" "previous" "next") 21894 . 21934) . ((semantic-list "{\\
  type *_dll_, *_dlp_, *_dlt_;\\
  _dll_ = (list);\\
  if (_dll_ != NULL) {\\
    for(; _dll_->previous!=NULL; _dll_=_dll_->previous) ;\\
    SGLIB_LIST_SORT(type, _dll_, comparator, next);\\
    SGLIB___DL_LIST_CREATE_FROM_LIST(type, _dll_, previous, next);\\
    (list) = _dll_;\\
  }\\
}" 21935 . 22220)))
          ("_SGLIB__h_")
          ("SGLIB_ARRAY_HEAP_SORT" (spp-arg-list ("type" "a" "max" "comparator" "elem_exchanger") 1696 . 1738) . ((semantic-list "{\\
  int   _k_;\\
  for(_k_=(max)/2; _k_>=0; _k_--) {\\
    SGLIB___ARRAY_HEAP_DOWN(type, a, _k_, max, comparator, elem_exchanger);\\
  }\\
  for(_k_=(max)-1; _k_>=0; _k_--) {\\
    elem_exchanger(type, a, 0, _k_);\\
    SGLIB___ARRAY_HEAP_DOWN(type, a, 0, _k_, comparator, elem_exchanger);\\
  }\\
}" 1739 . 2031)))
          ("SGLIB___ARRAY_HEAP_DOWN" (spp-arg-list ("type" "a" "ind" "max" "comparator" "elem_exchanger") 2064 . 2111) . ((semantic-list "{\\
  type  _t_;\\
  int   _m_, _l_, _r_, _i_;\\
  _i_ = (ind);\\
  _m_ = _i_;\\
  do {\\
    _i_ = _m_;          \\
    _l_ = 2*_i_+1;\\
    _r_ = _l_+1;\\
    if (_l_ < (max)){\\
      if (comparator(((a)[_m_]), ((a)[_l_])) < 0) _m_ = _l_;\\
      if (_r_ < (max)) {\\
        if (comparator(((a)[_m_]), ((a)[_r_])) < 0) _m_ = _r_;\\
      }\\
    }\\
    if (_m_ != _i_) {\\
     elem_exchanger(type, a, _i_, _m_);\\
    }\\
  } while (_m_ != _i_);\\
}" 2112 . 2548)))
          ("SGLIB_QUEUE_IS_FULL" (spp-arg-list ("type" "a" "i" "j" "dim") 6214 . 6234) . ((semantic-list "((i)==((j)+1)%(dim))" 6235 . 6255)))
          ("SGLIB_QUEUE_DELETE_FIRST" (spp-arg-list ("type" "a" "i" "j" "dim") 6624 . 6644) . ((semantic-list "{\\
  if (SGLIB_QUEUE_IS_EMPTY(type, a, i, j)) assert(0 && \"the queue is empty\");\\
  (i) = ((i)+1) % (dim);\\
}" 6645 . 6754)))
          ("SGLIB_QUEUE_DELETE" (spp-arg-list ("type" "a" "i" "j" "dim") 6781 . 6801) . ((semantic-list "{\\
  SGLIB_QUEUE_DELETE_FIRST(type, a, i, j, dim);\\
}" 6802 . 6855)))
          ("SGLIB_HASH_TAB_MAP_ON_ELEMENTS" (spp-arg-list ("type" "table" "dim" "iteratedIndex" "iteratedVariable" "command") 10870 . 10930) . ((semantic-list "{\\
  unsigned  iteratedIndex;\\
  type      *iteratedVariable;\\
  for(iteratedIndex=0; iteratedIndex < (dim); iteratedIndex++) {\\
    iteratedVariable = (table)[iteratedIndex];\\
    if (iteratedVariable != NULL) {command;}\\
  }\\
}" 10931 . 11160)))
          ("SGLIB_LIST_ADD" (spp-arg-list ("type" "list" "elem" "next") 11517 . 11541) . ((semantic-list "{\\
  (elem)->next = (list);\\
  (list) = (elem);\\
}" 11542 . 11592)))
          ("SGLIB_LIST_DELETE" (spp-arg-list ("type" "list" "elem" "next") 11845 . 11869) . ((semantic-list "{\\
  type **_p_;\\
  for(_p_ = &(list); *_p_!=NULL && *_p_!=(elem); _p_= &(*_p_)->next) ;\\
  assert(*_p_!=NULL && \"element is not member of the container, use DELETE_IF_MEMBER instead\"!=NULL);\\
  *_p_ = (*_p_)->next;\\
}" 11870 . 12088)))
          ("SGLIB_LIST_REVERSE" (spp-arg-list ("type" "list" "next") 13472 . 13490) . ((semantic-list "{\\
  type *_list_,*_tmp_,*_res_;\\
  _list_ = (list);\\
  _res_ = NULL;\\
  while (_list_!=NULL) {\\
    _tmp_ = _list_->next; _list_->next = _res_;\\
    _res_ = _list_;   _list_ = _tmp_;\\
  }\\
  (list) = _res_;\\
}" 13491 . 13701)))
          ("SGLIB_LIST_SORT" (spp-arg-list ("type" "list" "comparator" "next") 13726 . 13756) . ((semantic-list "{\\
  /* a non-recursive merge sort on lists */\\
  type *_r_;\\
  type *_a_, *_b_, *_todo_, *_t_, **_restail_;\\
  int _i_, _n_, _contFlag_;\\
  _r_ = (list);\\
  _contFlag_ = 1;\\
  for(_n_ = 1; _contFlag_; _n_ = _n_+_n_) {\\
    _todo_ = _r_; _r_ = NULL; _restail_ = &_r_; _contFlag_ =0;\\
    while (_todo_!=NULL) {\\
      _a_ = _todo_;\\
      for(_i_ = 1, _t_ = _a_;  _i_ < _n_ && _t_!=NULL;  _i_++, _t_ = _t_->next) ;\\
      if (_t_ ==NULL) {\\
        *_restail_ = _a_;\\
        break;\\
      }\\
      _b_ = _t_->next; _t_->next=NULL;\\
      for(_i_ =1, _t_ = _b_;  _i_<_n_ && _t_!=NULL;  _i_++, _t_ = _t_->next) ;\\
      if (_t_ ==NULL) {\\
        _todo_ =NULL;\\
      } else {\\
        _todo_ = _t_->next; _t_->next=NULL;\\
      }\\
      /* merge */\\
      while (_a_!=NULL && _b_!=NULL) {\\
        if (comparator(_a_, _b_) < 0) {\\
          *_restail_ = _a_;  _restail_ = &(_a_->next); _a_ = _a_->next;\\
        } else {\\
          *_restail_ = _b_;  _restail_ = &(_b_->next); _b_ = _b_->next;\\
        }\\
      }\\
      if (_a_!=NULL) *_restail_ = _a_;\\
      else *_restail_ = _b_;\\
      while (*_restail_!=NULL) _restail_ = &((*_restail_)->next);\\
      _contFlag_ =1;\\
    }\\
  }\\
  (list) = _r_;\\
}" 13757 . 14961)))
          ("SGLIB_DL_LIST_ADD_AFTER" (spp-arg-list ("type" "place" "elem" "previous" "next") 17739 . 17774) . ((semantic-list "{\\
  if ((place) == NULL) {\\
    SGLIB___DL_LIST_CREATE_SINGLETON(type, place, elem, previous, next);\\
  } else {\\
    (elem)->next = (place)->next;\\
    (elem)->previous = (place);\\
    (place)->next = (elem);\\
    if ((elem)->next != NULL) (elem)->next->previous = (elem);\\
  }\\
}" 17775 . 18057)))
          ("SGLIB_DL_LIST_GET_FIRST" (spp-arg-list ("type" "list" "previous" "next" "result") 22253 . 22289) . ((semantic-list "{\\
  type *_dll_;\\
  _dll_ = (list);\\
  if (_dll_ != NULL) {\\
    for(; _dll_->previous!=NULL; _dll_=_dll_->previous) ;\\
  }\\
  (result) = _dll_;\\
}" 22290 . 22438)))
          ("SGLIB_BIN_TREE_MAP_ON_ELEMENTS" (spp-arg-list ("type" "tree" "_current_element_" "left" "right" "command") 25418 . 25471) . ((semantic-list "{\\
  SGLIB___BIN_TREE_MAP_ON_ELEMENTS(type, tree, _current_element_, 1, left, right, command);\\
}" 25472 . 25569)))
          ("SGLIB_HASH_TAB_SHIFT_CONSTANT" . ((number "16381" 72610 . 72615)))
          ("SGLIB_ARRAY_SINGLE_QUICK_SORT" (spp-arg-list ("type" "a" "max" "comparator") 2641 . 2667) . ((semantic-list "{\\
  SGLIB_ARRAY_QUICK_SORT(type, a, max, comparator, SGLIB_ARRAY_ELEMENTS_EXCHANGER);\\
}" 2668 . 2757)))
          ("SGLIB_HASH_TAB_INIT" (spp-arg-list ("type" "table" "dim") 9442 . 9460) . ((semantic-list "{\\
  int _i_;\\
  for(_i_ = 0; _i_ < (dim); _i_++) (table)[_i_] = NULL;\\
}" 9461 . 9534)))
          ("SGLIB_DL_LIST_DELETE_IF_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "previous" "next" "member") 20456 . 20510) . ((semantic-list "{\\
  type *_dlp_;\\
  for(_dlp_ = (list); _dlp_!=NULL && comparator(_dlp_, (elem)) != 0; _dlp_= _dlp_->previous) ;\\
  if (_dlp_ == NULL && (list) != NULL) {\\
    for(_dlp_ = (list)->next; _dlp_!=NULL && comparator(_dlp_, (elem)) != 0; _dlp_= _dlp_->next) ;\\
  }\\
  (member) = _dlp_;\\
  if (_dlp_ != NULL) {\\
    SGLIB_DL_LIST_DELETE(type, list, _dlp_, previous, next);\\
  }\\
}" 20511 . 20886)))
          ("SGLIB_ARRAY_BINARY_SEARCH" (spp-arg-list ("type" "a" "start_index" "end_index" "key" "comparator" "found" "result_index") 4937 . 5008) . ((semantic-list "{\\
  int _kk_, _cc_, _ii_, _jj_, _ff_;\\
  _ii_ = (start_index); \\
  _jj_ = (end_index);\\
  _ff_ = 0;\\
  while (_ii_ <= _jj_ && _ff_==0) {\\
    _kk_ = (_jj_+_ii_)/2;\\
    _cc_ = comparator(((a)[_kk_]), (key));\\
    if (_cc_ == 0) {\\
      (result_index) = _kk_;    \\
      _ff_ = 1;\\
    } else if (_cc_ < 0) {\\
      _ii_ = _kk_+1;\\
    } else {\\
      _jj_ = _kk_-1;\\
    }\\
  }\\
  if (_ff_ == 0) {\\
    /* not found, but set its resulting place in the array */\\
    (result_index) = _jj_+1;\\
  }\\
  (found) = _ff_;\\
}" 5009 . 5528)))
          ("SGLIB_HEAP_ADD_NEXT" (spp-arg-list ("type" "a" "i" "dim" "comparator" "elem_exchanger") 7576 . 7621) . ((semantic-list "{\\
  int _i_;\\
  if (SGLIB_HEAP_IS_FULL(type, a, i, dim)) assert(0 && \"the heap is full\");\\
  _i_ = (i)++;\\
  while (_i_ > 0 && comparator(a[_i_/2], a[_i_]) < 0) {\\
    elem_exchanger(type, a, (_i_/2), _i_);\\
    _i_ = _i_/2;\\
  }\\
}" 7622 . 7855)))
          ("SGLIB_LIST_CONCAT" (spp-arg-list ("type" "first" "second" "next") 11619 . 11646) . ((semantic-list "{\\
  if ((first)==NULL) {\\
    (first) = (second);\\
  } else {\\
    type *_p_;\\
    for(_p_ = (first); _p_->next!=NULL; _p_=_p_->next) ;\\
    _p_->next = (second);\\
  }\\
}" 11647 . 11818)))
          ("SGLIB_LIST_IS_MEMBER" (spp-arg-list ("type" "list" "elem" "next" "result") 12658 . 12690) . ((semantic-list "{\\
  type *_p_;\\
  for(_p_ = (list); _p_!=NULL && _p_ != (elem); _p_= _p_->next) ;\\
  (result) = (_p_!=NULL);\\
}" 12691 . 12803)))
          ("SGLIB_LIST_MAP_ON_ELEMENTS" (spp-arg-list ("type" "list" "iteratedVariable" "next" "command") 13035 . 13080) . ((semantic-list "{\\
  type *_ne_;\\
  type *iteratedVariable;\\
  (iteratedVariable) = (list); \\
  while ((iteratedVariable)!=NULL) {\\
    _ne_ = (iteratedVariable)->next;\\
    {command;};\\
    (iteratedVariable) = _ne_;\\
  }\\
}" 13081 . 13290)))
          ("SGLIB_DEFINE_ARRAY_SORTING_PROTOTYPES" (spp-arg-list ("type" "comparator") 27076 . 27094) . 
              ((EXTERN "extern" 27098 . 27104) (VOID "void" 27105 . 27109) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 27110 . 27116) (symbol "type" 27118 . 27122)) 27110 . 27122) (symbol "_array_quick_sort" 27124 . 27141)) 27110 . 27141) (semantic-list "(type *a, int max)" 27141 . 27159) (punctuation ";" 27159 . 27160) (EXTERN "extern" 27163 . 27169) (VOID "void" 27170 . 27174) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 27175 . 27181) (symbol "type" 27183 . 27187)) 27175 . 27187) (symbol "_array_heap_sort" 27189 . 27205)) 27175 . 27205) (semantic-list "(type *a, int max)" 27205 . 27223) (punctuation ";" 27223 . 27224)))
          ("SGLIB_QUEUE_ADD_NEXT" (spp-arg-list ("type" "a" "i" "j" "dim") 6340 . 6360) . ((semantic-list "{\\
  if (SGLIB_QUEUE_IS_FULL(type, a, i, j, dim)) assert(0 && \"the queue is full\");\\
  (j) = ((j)+1) % (dim);\\
}" 6361 . 6473)))
          ("SGLIB_SORTED_LIST_ADD_IF_NOT_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "next" "member") 15423 . 15467) . ((semantic-list "{\\
  type **_e_;\\
  int _cmp_res_;\\
  SGLIB_SORTED_LIST_FIND_MEMBER_OR_PLACE(type, list, elem, comparator, next, _cmp_res_, _e_);\\
  if (_cmp_res_ != 0) {\\
    (elem)->next = *_e_;\\
    *_e_ = (elem);\\
    (member) = NULL;\\
  } else {\\
    (member) = *_e_;\\
  }\\
}" 15468 . 15732)))
          ("SGLIB_SORTED_LIST_DELETE" (spp-arg-list ("type" "list" "elem" "next") 15766 . 15790) . ((semantic-list "{\\
  SGLIB_LIST_DELETE(type, list, elem, next);\\
}" 15791 . 15841)))
          ("SGLIB_SORTED_LIST_FIND_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "next" "member") 16213 . 16257) . ((semantic-list "{\\
  type *_p_;\\
  int _cmpres_ = 1;\\
  for(_p_ = (list); _p_!=NULL && (_cmpres_=comparator(_p_, (elem))) < 0; _p_=_p_->next) ;\\
  if (_cmpres_ != 0) (member) = NULL;\\
  else (member) = _p_;\\
}" 16258 . 16451)))
          ("SGLIB_SORTED_LIST_IS_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "next" "result") 16488 . 16532) . ((semantic-list "{\\
  type *_p_;\\
  for(_p_ = (list); _p_!=NULL && comparator(_p_, (elem)) < 0; _p_=_p_->next) ;\\
  while (_p_ != NULL && _p_ != (elem) && comparator(_p_, (elem)) == 0) _p_=_p_->next;\\
  (result) = (_p_ == (elem));\\
}" 16533 . 16749)))
          ("SGLIB___DL_LIST_CREATE_SINGLETON" (spp-arg-list ("type" "list" "elem" "previous" "next") 17604 . 17638) . ((semantic-list "{\\
  (list) = (elem);\\
  (list)->next = (list)->previous = NULL;\\
}" 17639 . 17706)))
          ("SGLIB___DL_LIST_CREATE_FROM_LIST" (spp-arg-list ("type" "list" "previous" "next") 23554 . 23582) . ((semantic-list "{\\
  type *_dlp_, *_dlt_;\\
  _dlp_ = NULL;\\
  for(_dlt_ = (list); _dlt_!=NULL; _dlt_ = _dlt_->next) {\\
    _dlt_->previous = _dlp_;\\
    _dlp_ = _dlt_;\\
  }\\
}" 23583 . 23742)))
          ("SGLIB_DEFINE_HASHED_TABLE_FUNCTIONS" (spp-arg-list ("type" "dim" "hash_function" "comparator") 34473 . 34511) . 
              ((STRUCT "struct" 34516 . 34522) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 34523 . 34536) (symbol "type" 34538 . 34542)) 34523 . 34542) (symbol "_iterator" 34544 . 34553)) 34523 . 34553) (semantic-list "{\\
    int currentIndex;\\
    type **table;\\
    int (*subcomparator)(type *, type *);\\
    type *equalto;\\
  }" 34554 . 34665) (punctuation ";" 34665 . 34666) (VOID "void" 34670 . 34674) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 34675 . 34688) (symbol "type" 34690 . 34694)) 34675 . 34694) (symbol "_init" 34696 . 34701)) 34675 . 34701) (semantic-list "(type *table[dim])" 34701 . 34719) (semantic-list "{\\
    SGLIB_HASH_TAB_INIT(type, table, dim);\\
  }" 34720 . 34770) (INT "int" 34774 . 34777) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 34778 . 34791) (symbol "type" 34793 . 34797)) 34778 . 34797) (symbol "_add_if_not_member" 34799 . 34817)) 34778 . 34817) (semantic-list "(type *table[dim], type *elem, type **member)" 34817 . 34862) (semantic-list "{\\
    SGLIB_HASH_TAB_ADD_IF_NOT_MEMBER(type, table, dim, elem, hash_function, comparator, *member);\\
  }" 34863 . 34968) (INT "int" 34972 . 34975) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 34976 . 34989) (symbol "type" 34991 . 34995)) 34976 . 34995) (symbol "_is_member" 34997 . 35007)) 34976 . 35007) (semantic-list "(type *table[dim], type *elem)" 35007 . 35037) (semantic-list "{\\
    int ind;\\
    SGLIB_HASH_TAB_IS_MEMBER(type, table, dim, elem, hash_function, ind);\\
    return(ind != -1);\\
  }" 35038 . 35157) (symbol "type" 35161 . 35165) (punctuation "*" 35166 . 35167) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 35168 . 35181) (symbol "type" 35183 . 35187)) 35168 . 35187) (symbol "_find_member" 35189 . 35201)) 35168 . 35201) (semantic-list "(type *table[dim], type *elem)" 35201 . 35231) (semantic-list "{\\
    type *mmb;\\
    int ind;\\
    SGLIB_HASH_TAB_FIND_MEMBER(type, table, dim, elem, hash_function, comparator, ind, mmb);\\
    return(mmb);\\
  }" 35232 . 35380) (symbol "type" 35384 . 35388) (punctuation "*" 35389 . 35390) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 35390 . 35403) (symbol "type" 35405 . 35409)) 35390 . 35409) (symbol "_it_init_on_equal" 35411 . 35428)) 35390 . 35428) (semantic-list "(struct sglib_hashed_##type##_iterator *it, type *table[dim], int (*subcomparator)(type *, type *), type *equalto)" 35428 . 35542) (semantic-list "{\\
    int i;\\
    it->table = table;\\
    it->subcomparator = subcomparator;\\
    it->equalto = equalto;\\
    for(i=0; i<(dim) && table[i]==NULL; i++) ;\\
    it->currentIndex = i;\\
    if (i<(dim)) return(table[i]);\\
    return(NULL);\\
  }" 35543 . 35783) (symbol "type" 35787 . 35791) (punctuation "*" 35792 . 35793) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 35793 . 35806) (symbol "type" 35808 . 35812)) 35793 . 35812) (symbol "_it_init" 35814 . 35822)) 35793 . 35822) (semantic-list "(struct sglib_hashed_##type##_iterator *it, type *table[dim])" 35822 . 35883) (semantic-list "{\\
    sglib_hashed_##type##_it_init_on_equal(it, table, NULL, NULL);\\
  }" 35884 . 35958) (symbol "type" 35962 . 35966) (punctuation "*" 35967 . 35968) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 35968 . 35981) (symbol "type" 35983 . 35987)) 35968 . 35987) (symbol "_it_current" 35989 . 36000)) 35968 . 36000) (semantic-list "(struct sglib_hashed_##type##_iterator *it)" 36000 . 36043) (semantic-list "{\\
    return(table[it->currentIndex]);\\
  }" 36044 . 36088) (symbol "type" 36092 . 36096) (punctuation "*" 36097 . 36098) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 36098 . 36111) (symbol "type" 36113 . 36117)) 36098 . 36117) (symbol "_it_next" 36119 . 36127)) 36098 . 36127) (semantic-list "(struct sglib_hashed_##type##_iterator *it)" 36127 . 36170) (semantic-list "{\\
    i=it->currentIndex;\\
    if (i<(dim)) {\\
      for(i++; i<(dim) && table[i]==NULL; i++) ;\\
    }\\
    it->currentIndex = i;\\
    if (i<(dim)) return(table[i]);\\
    return(NULL);\\
  }" 36171 . 36361)))
          ("SGLIB_ARRAY_ELEMENTS_EXCHANGER" (spp-arg-list ("type" "a" "i" "j") 71903 . 71918) . ((semantic-list "{type _sgl_aee_tmp_; _sgl_aee_tmp_=(a)[(i)]; (a)[(i)]=(a)[(j)]; (a)[(j)]= _sgl_aee_tmp_;}" 71919 . 72008)))
          ("SGLIB_FAST_REVERSE_NUMERIC_COMPARATOR" (spp-arg-list ("x" "y") 72273 . 72279) . ((semantic-list "((int)((y) - (x)))" 72280 . 72298)))
          ("SGLIB_HEAP_IS_FULL" (spp-arg-list ("type" "a" "i" "dim") 7466 . 7483) . ((semantic-list "((i)==(dim))" 7484 . 7496)))
          ("SGLIB_HASH_TAB_ADD_IF_NOT_MEMBER" (spp-arg-list ("type" "table" "dim" "elem" "hash_function" "comparator" "member") 9576 . 9635) . ((semantic-list "{\\
  unsigned _pos_;\\
  type     *_elem_;\\
  SGLIB_HASH_TAB_FIND_MEMBER(type, table, dim, elem, _pos_, _elem_);\\
  (member) = (table)[_pos_];\\
  if (_elem_ == NULL) {\\
    if ((table)[_pos_] != NULL) assert(0 && \"the hash table is full\");\\
    (table)[_pos_] = (elem);\\
  }\\
}" 9635 . 9911)))
          ("SGLIB_SORTED_LIST_LEN" (spp-arg-list ("type" "list" "next" "result") 17101 . 17127) . ((semantic-list "{\\
  SGLIB_LIST_LEN(type, list, next, result);\\
}" 17128 . 17177)))
          ("SGLIB_DEFINE_HASHED_TABLE_PROTOTYPES" (spp-arg-list ("type" "dim" "hash_function" "comparator") 33470 . 33508) . 
              ((STRUCT "struct" 33513 . 33519) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 33520 . 33533) (symbol "type" 33535 . 33539)) 33520 . 33539) (symbol "_iterator" 33541 . 33550)) 33520 . 33550) (semantic-list "{\\
    int currentIndex;\\
    int (*subcomparator)(type *, type *);\\
    type *equalto;\\
  }" 33551 . 33643) (punctuation ";" 33643 . 33644) (EXTERN "extern" 33648 . 33654) (VOID "void" 33655 . 33659) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 33660 . 33673) (symbol "type" 33675 . 33679)) 33660 . 33679) (symbol "_init" 33681 . 33686)) 33660 . 33686) (semantic-list "(type *table[dim])" 33686 . 33704) (punctuation ";" 33704 . 33705) (EXTERN "extern" 33709 . 33715) (INT "int" 33716 . 33719) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 33720 . 33733) (symbol "type" 33735 . 33739)) 33720 . 33739) (symbol "_add_if_not_member" 33741 . 33759)) 33720 . 33759) (semantic-list "(type *table[dim], type *elem, type **member)" 33759 . 33804) (punctuation ";" 33804 . 33805) (EXTERN "extern" 33809 . 33815) (INT "int" 33816 . 33819) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 33820 . 33833) (symbol "type" 33835 . 33839)) 33820 . 33839) (symbol "_is_member" 33841 . 33851)) 33820 . 33851) (semantic-list "(type *table[dim], type *elem)" 33851 . 33881) (punctuation ";" 33881 . 33882) (EXTERN "extern" 33886 . 33892) (symbol "type" 33893 . 33897) (punctuation "*" 33898 . 33899) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 33900 . 33913) (symbol "type" 33915 . 33919)) 33900 . 33919) (symbol "_find_member" 33921 . 33933)) 33900 . 33933) (semantic-list "(type *table[dim], type *elem)" 33933 . 33963) (punctuation ";" 33963 . 33964) (EXTERN "extern" 33968 . 33974) (symbol "type" 33975 . 33979) (punctuation "*" 33980 . 33981) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 33981 . 33994) (symbol "type" 33996 . 34000)) 33981 . 34000) (symbol "_it_init" 34002 . 34010)) 33981 . 34010) (semantic-list "(struct sglib_hashed_##type##_iterator *it, type *table[dim])" 34010 . 34071) (punctuation ";" 34071 . 34072) (EXTERN "extern" 34077 . 34083) (symbol "type" 34084 . 34088) (punctuation "*" 34089 . 34090) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 34090 . 34103) (symbol "type" 34105 . 34109)) 34090 . 34109) (symbol "_it_init_on_equal" 34111 . 34128)) 34090 . 34128) (semantic-list "(struct sglib_hashed_##type##_iterator *it, type *table[dim], int (*subcomparator)(type *, type *), type *equalto)" 34128 . 34242) (punctuation ";" 34242 . 34243) (EXTERN "extern" 34248 . 34254) (symbol "type" 34255 . 34259) (punctuation "*" 34260 . 34261) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 34261 . 34274) (symbol "type" 34276 . 34280)) 34261 . 34280) (symbol "_it_current" 34282 . 34293)) 34261 . 34293) (semantic-list "(struct sglib_hashed_##type##_iterator *it)" 34293 . 34336) (punctuation ";" 34336 . 34337) (EXTERN "extern" 34342 . 34348) (symbol "type" 34349 . 34353) (punctuation "*" 34354 . 34355) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 34355 . 34368) (symbol "type" 34370 . 34374)) 34355 . 34374) (symbol "_it_next" 34376 . 34384)) 34355 . 34384) (semantic-list "(struct sglib_hashed_##type##_iterator *it)" 34384 . 34427) (punctuation ";" 34427 . 34428)))
          ("SGLIB___GET_VALUE" (spp-arg-list ("x") 71804 . 71807) . ((semantic-list "(x)" 71808 . 71811)))
          ("SGLIB_REVERSE_NUMERIC_COMPARATOR" (spp-arg-list ("x" "y") 72414 . 72420) . ((symbol "SGLIB_SAFE_REVERSE_NUMERIC_COMPARATOR" 72421 . 72458) (semantic-list "(x, y)" 72458 . 72464)))
          ("SGLIB_QUEUE_FIRST_ELEMENT" (spp-arg-list ("type" "a" "i" "j") 6289 . 6304) . ((semantic-list "(a[i])" 6305 . 6311)))
          ("SGLIB_HEAP_ADD" (spp-arg-list ("type" "a" "elem" "i" "dim" "comparator") 7878 . 7913) . ((semantic-list "{\\
  if (SGLIB_HEAP_IS_FULL(type, a, i, dim)) assert(0 && \"the heap is full\");\\
  a[i] = (elem);\\
  SGLIB_HEAP_ADD_NEXT(type, a, i, dim, comparator, SGLIB_ARRAY_ELEMENTS_EXCHANGER);\\
}" 7914 . 8098)))
          ("SGLIB_HEAP_DELETE_FIRST" (spp-arg-list ("type" "a" "i" "dim" "comparator" "elem_exchanger") 8130 . 8175) . ((semantic-list "{\\
  if (SGLIB_HEAP_IS_EMPTY(type, a, i)) assert(0 && \"the heap is empty\");\\
  (i)--;\\
  a[0] = a[i];\\
  SGLIB___ARRAY_HEAP_DOWN(type, a, 0, i, comparator, elem_exchanger);\\
}" 8176 . 8351)))
          ("SGLIB_HEAP_DELETE" (spp-arg-list ("type" "a" "i" "dim" "comparator") 8377 . 8406) . ((semantic-list "{\\
  SGLIB_HEAP_DELETE_FIRST(type, a, i, dim, comparator, SGLIB_ARRAY_ELEMENTS_EXCHANGER);\\
}" 8407 . 8500)))
          ("SGLIB_DL_LIST_FIND_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "previous" "next" "member") 21210 . 21264) . ((semantic-list "{\\
  type *_dlp_;\\
  SGLIB_LIST_FIND_MEMBER(type, list, elem, comparator, previous, member);\\
  if ((member) == NULL && (list) != NULL) {\\
    _dlp_ = (list)->next;\\
    SGLIB_LIST_FIND_MEMBER(type, _dlp_, elem, comparator, next, member);\\
  }\\
}" 21265 . 21511)))
          ("SGLIB_DEFINE_LIST_PROTOTYPES" (spp-arg-list ("type" "comparator" "next") 41429 . 41453) . 
              ((STRUCT "struct" 41457 . 41463) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 41464 . 41470) (symbol "type" 41472 . 41476)) 41464 . 41476) (symbol "_iterator" 41478 . 41487)) 41464 . 41487) (semantic-list "{\\
   type *currentelem;\\
   type *nextelem;\\
   int (*subcomparator)(type *, type *);\\
   type *equalto;\\
 }" 41488 . 41597) (punctuation ";" 41597 . 41598) (EXTERN "extern" 41601 . 41607) (VOID "void" 41608 . 41612) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 41613 . 41619) (symbol "type" 41621 . 41625)) 41613 . 41625) (symbol "_add" 41627 . 41631)) 41613 . 41631) (semantic-list "(type **list, type *elem)" 41631 . 41656) (punctuation ";" 41656 . 41657) (EXTERN "extern" 41660 . 41666) (INT "int" 41667 . 41670) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 41671 . 41677) (symbol "type" 41679 . 41683)) 41671 . 41683) (symbol "_add_if_not_member" 41685 . 41703)) 41671 . 41703) (semantic-list "(type **list, type *elem, type **member)" 41703 . 41743) (punctuation ";" 41743 . 41744) (EXTERN "extern" 41747 . 41753) (VOID "void" 41754 . 41758) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 41759 . 41765) (symbol "type" 41767 . 41771)) 41759 . 41771) (symbol "_concat" 41773 . 41780)) 41759 . 41780) (semantic-list "(type **first, type *second)" 41780 . 41808) (punctuation ";" 41808 . 41809) (EXTERN "extern" 41812 . 41818) (VOID "void" 41819 . 41823) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 41824 . 41830) (symbol "type" 41832 . 41836)) 41824 . 41836) (symbol "_delete" 41838 . 41845)) 41824 . 41845) (semantic-list "(type **list, type *elem)" 41845 . 41870) (punctuation ";" 41870 . 41871) (EXTERN "extern" 41874 . 41880) (INT "int" 41881 . 41884) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 41885 . 41891) (symbol "type" 41893 . 41897)) 41885 . 41897) (symbol "_delete_if_member" 41899 . 41916)) 41885 . 41916) (semantic-list "(type **list, type *elem, type **member)" 41916 . 41956) (punctuation ";" 41956 . 41957) (EXTERN "extern" 41960 . 41966) (INT "int" 41967 . 41970) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 41971 . 41977) (symbol "type" 41979 . 41983)) 41971 . 41983) (symbol "_is_member" 41985 . 41995)) 41971 . 41995) (semantic-list "(type *list, type *elem)" 41995 . 42019) (punctuation ";" 42019 . 42020) (EXTERN "extern" 42023 . 42029) (symbol "type" 42030 . 42034) (punctuation "*" 42035 . 42036) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 42036 . 42042) (symbol "type" 42044 . 42048)) 42036 . 42048) (symbol "_find_member" 42050 . 42062)) 42036 . 42062) (semantic-list "(type *list, type *elem)" 42062 . 42086) (punctuation ";" 42086 . 42087) (EXTERN "extern" 42090 . 42096) (VOID "void" 42097 . 42101) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 42102 . 42108) (symbol "type" 42110 . 42114)) 42102 . 42114) (symbol "_sort" 42116 . 42121)) 42102 . 42121) (semantic-list "(type **list)" 42121 . 42134) (punctuation ";" 42134 . 42135) (EXTERN "extern" 42138 . 42144) (INT "int" 42145 . 42148) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 42149 . 42155) (symbol "type" 42157 . 42161)) 42149 . 42161) (symbol "_len" 42163 . 42167)) 42149 . 42167) (semantic-list "(type *list)" 42167 . 42179) (punctuation ";" 42179 . 42180) (EXTERN "extern" 42183 . 42189) (VOID "void" 42190 . 42194) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 42195 . 42201) (symbol "type" 42203 . 42207)) 42195 . 42207) (symbol "_reverse" 42209 . 42217)) 42195 . 42217) (semantic-list "(type **list)" 42217 . 42230) (punctuation ";" 42230 . 42231) (EXTERN "extern" 42234 . 42240) (symbol "type" 42241 . 42245) (punctuation "*" 42246 . 42247) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 42247 . 42253) (symbol "type" 42255 . 42259)) 42247 . 42259) (symbol "_it_init" 42261 . 42269)) 42247 . 42269) (semantic-list "(struct sglib_##type##_iterator *it, type *list)" 42269 . 42317) (punctuation ";" 42317 . 42318) (EXTERN "extern" 42322 . 42328) (symbol "type" 42329 . 42333) (punctuation "*" 42334 . 42335) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 42335 . 42341) (symbol "type" 42343 . 42347)) 42335 . 42347) (symbol "_it_init_on_equal" 42349 . 42366)) 42335 . 42366) (semantic-list "(struct sglib_##type##_iterator *it, type *list, int (*subcomparator)(type *, type *), type *equalto)" 42366 . 42467) (punctuation ";" 42467 . 42468) (EXTERN "extern" 42472 . 42478) (symbol "type" 42479 . 42483) (punctuation "*" 42484 . 42485) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 42485 . 42491) (symbol "type" 42493 . 42497)) 42485 . 42497) (symbol "_it_current" 42499 . 42510)) 42485 . 42510) (semantic-list "(struct sglib_##type##_iterator *it)" 42510 . 42546) (punctuation ";" 42546 . 42547) (EXTERN "extern" 42551 . 42557) (symbol "type" 42558 . 42562) (punctuation "*" 42563 . 42564) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 42564 . 42570) (symbol "type" 42572 . 42576)) 42564 . 42576) (symbol "_it_next" 42578 . 42586)) 42564 . 42586) (semantic-list "(struct sglib_##type##_iterator *it)" 42586 . 42622) (punctuation ";" 42622 . 42623)))
          ("SGLIB_DEFINE_LIST_FUNCTIONS" (spp-arg-list ("type" "comparator" "next") 42661 . 42685) . 
              ((INT "int" 42689 . 42692) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 42693 . 42699) (symbol "type" 42701 . 42705)) 42693 . 42705) (symbol "_is_member" 42707 . 42717)) 42693 . 42717) (semantic-list "(type *list, type *elem)" 42717 . 42741) (semantic-list "{\\
   int result;\\
   SGLIB_LIST_IS_MEMBER(type, list, elem, next, result);\\
   return(result);\\
 }" 42742 . 42841) (symbol "type" 42844 . 42848) (punctuation "*" 42849 . 42850) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 42850 . 42856) (symbol "type" 42858 . 42862)) 42850 . 42862) (symbol "_find_member" 42864 . 42876)) 42850 . 42876) (semantic-list "(type *list, type *elem)" 42876 . 42900) (semantic-list "{\\
   type *result;\\
   SGLIB_LIST_FIND_MEMBER(type, list, elem, comparator, next, result);\\
   return(result);\\
 }" 42901 . 43016) (INT "int" 43019 . 43022) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 43023 . 43029) (symbol "type" 43031 . 43035)) 43023 . 43035) (symbol "_add_if_not_member" 43037 . 43055)) 43023 . 43055) (semantic-list "(type **list, type *elem, type **member)" 43055 . 43095) (semantic-list "{\\
   SGLIB_LIST_ADD_IF_NOT_MEMBER(type, *list, elem, comparator, next, *member);\\
   return(*member==NULL);\\
 }" 43096 . 43208) (VOID "void" 43211 . 43215) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 43216 . 43222) (symbol "type" 43224 . 43228)) 43216 . 43228) (symbol "_add" 43230 . 43234)) 43216 . 43234) (semantic-list "(type **list, type *elem)" 43234 . 43259) (semantic-list "{\\
   SGLIB_LIST_ADD(type, *list, elem, next);\\
 }" 43260 . 43310) (VOID "void" 43313 . 43317) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 43318 . 43324) (symbol "type" 43326 . 43330)) 43318 . 43330) (symbol "_concat" 43332 . 43339)) 43318 . 43339) (semantic-list "(type **first, type *second)" 43339 . 43367) (semantic-list "{\\
   SGLIB_LIST_CONCAT(type, *first, second, next);\\
 }" 43368 . 43424) (VOID "void" 43427 . 43431) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 43432 . 43438) (symbol "type" 43440 . 43444)) 43432 . 43444) (symbol "_delete" 43446 . 43453)) 43432 . 43453) (semantic-list "(type **list, type *elem)" 43453 . 43478) (semantic-list "{\\
   SGLIB_LIST_DELETE(type, *list, elem, next);\\
 }" 43479 . 43532) (INT "int" 43535 . 43538) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 43539 . 43545) (symbol "type" 43547 . 43551)) 43539 . 43551) (symbol "_delete_if_member" 43553 . 43570)) 43539 . 43570) (semantic-list "(type **list, type *elem, type **member)" 43570 . 43610) (semantic-list "{\\
   SGLIB_LIST_DELETE_IF_MEMBER(type, *list, elem, comparator, next, *member);\\
   return(*member!=NULL);\\
 }" 43611 . 43722) (VOID "void" 43725 . 43729) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 43730 . 43736) (symbol "type" 43738 . 43742)) 43730 . 43742) (symbol "_sort" 43744 . 43749)) 43730 . 43749) (semantic-list "(type **list)" 43749 . 43762) (semantic-list "{ \\
   SGLIB_LIST_SORT(type, *list, comparator, next);\\
 }" 43763 . 43821) (INT "int" 43824 . 43827) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 43828 . 43834) (symbol "type" 43836 . 43840)) 43828 . 43840) (symbol "_len" 43842 . 43846)) 43828 . 43846) (semantic-list "(type *list)" 43846 . 43858) (semantic-list "{\\
   int res;\\
   SGLIB_LIST_LEN(type, list, next, res);\\
   return(res);\\
 }" 43859 . 43937) (VOID "void" 43940 . 43944) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 43945 . 43951) (symbol "type" 43953 . 43957)) 43945 . 43957) (symbol "_reverse" 43959 . 43967)) 43945 . 43967) (semantic-list "(type **list)" 43967 . 43980) (semantic-list "{\\
   SGLIB_LIST_REVERSE(type, *list, next);\\
 }" 43981 . 44029) (symbol "type" 44035 . 44039) (punctuation "*" 44040 . 44041) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 44041 . 44047) (symbol "type" 44049 . 44053)) 44041 . 44053) (symbol "_it_init_on_equal" 44055 . 44072)) 44041 . 44072) (semantic-list "(struct sglib_##type##_iterator *it, type *list, int (*subcomparator)(type *, type *), type *equalto)" 44072 . 44173) (semantic-list "{\\
   it->subcomparator = subcomparator;\\
   it->equalto = equalto;\\
   it->nextelem = list;\\
   return(sglib_##type##_it_next(it));\\
 }" 44174 . 44310) (symbol "type" 44313 . 44317) (punctuation "*" 44318 . 44319) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 44319 . 44325) (symbol "type" 44327 . 44331)) 44319 . 44331) (symbol "_it_init" 44333 . 44341)) 44319 . 44341) (semantic-list "(struct sglib_##type##_iterator *it, type *list)" 44341 . 44389) (semantic-list "{\\
   return(sglib_##type##_it_init_on_equal(it, list, NULL, NULL));\\
 }" 44390 . 44462) (symbol "type" 44465 . 44469) (punctuation "*" 44470 . 44471) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 44471 . 44477) (symbol "type" 44479 . 44483)) 44471 . 44483) (symbol "_it_current" 44485 . 44496)) 44471 . 44496) (semantic-list "(struct sglib_##type##_iterator *it)" 44496 . 44532) (semantic-list "{\\
   return(it->currentelem);\\
 }" 44533 . 44567) (symbol "type" 44570 . 44574) (punctuation "*" 44575 . 44576) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 44576 . 44582) (symbol "type" 44584 . 44588)) 44576 . 44588) (symbol "_it_next" 44590 . 44598)) 44576 . 44598) (semantic-list "(struct sglib_##type##_iterator *it)" 44598 . 44634) (semantic-list "{\\
   type *ce, *eq;\\
   int  (*scp)(type *, type *);\\
   ce = it->nextelem;\\
   it->nextelem = NULL;\\
   if (it->subcomparator != NULL) {\\
	 eq = it->equalto; \\
     scp = it->subcomparator;\\
     while (ce!=NULL && scp(ce, eq)!=0) ce = ce->next;\\
   }\\
   it->currentelem = ce;\\
   if (ce != NULL) it->nextelem = ce->next;\\
   return(ce);\\
 }" 44635 . 44979)))
          ("SGLIB_LIST_FIND_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "next" "member") 12835 . 12879) . ((semantic-list "{\\
  type *_p_;\\
  for(_p_ = (list); _p_!=NULL && comparator(_p_, (elem)) != 0; _p_= _p_->next) ;\\
  (member) = _p_;\\
}" 12880 . 12999)))
          ("SGLIB___DL_LIST_GENERIC_ADD_IF_NOT_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "previous" "next" "member" "the_add_operation") 18600 . 18673) . ((semantic-list "{\\
  type *_dlp_;\\
  for(_dlp_ = (list); _dlp_!=NULL && comparator(_dlp_, (elem)) != 0; _dlp_= _dlp_->previous) ;\\
  if (_dlp_ == NULL && (list) != NULL) {\\
    for(_dlp_ = (list)->next; _dlp_!=NULL && comparator(_dlp_, (elem)) != 0; _dlp_= _dlp_->next) ;\\
  }\\
  (member) = _dlp_;\\
  if (_dlp_ == NULL) {\\
    the_add_operation(type, list, elem, previous, next);\\
  }\\
}" 18674 . 19045)))
          ("SGLIB_DEFINE_HASHED_CONTAINER_PROTOTYPES" (spp-arg-list ("type" "dim" "hash_function") 37111 . 37137) . 
              ((STRUCT "struct" 37142 . 37148) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 37149 . 37162) (symbol "type" 37164 . 37168)) 37149 . 37168) (symbol "_iterator" 37170 . 37179)) 37149 . 37179) (semantic-list "{\\
    struct sglib_##type##_iterator containerIt;\\
    type **table;\\
    int currentIndex;\\
    int (*subcomparator)(type *, type *);\\
    type *equalto;\\
  }" 37180 . 37340) (punctuation ";" 37340 . 37341) (EXTERN "extern" 37345 . 37351) (VOID "void" 37352 . 37356) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 37357 . 37370) (symbol "type" 37372 . 37376)) 37357 . 37376) (symbol "_init" 37378 . 37383)) 37357 . 37383) (semantic-list "(type *table[dim])" 37383 . 37401) (punctuation ";" 37401 . 37402) (EXTERN "extern" 37406 . 37412) (VOID "void" 37413 . 37417) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 37418 . 37431) (symbol "type" 37433 . 37437)) 37418 . 37437) (symbol "_add" 37439 . 37443)) 37418 . 37443) (semantic-list "(type *table[dim], type *elem)" 37443 . 37473) (punctuation ";" 37473 . 37474) (EXTERN "extern" 37478 . 37484) (INT "int" 37485 . 37488) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 37489 . 37502) (symbol "type" 37504 . 37508)) 37489 . 37508) (symbol "_add_if_not_member" 37510 . 37528)) 37489 . 37528) (semantic-list "(type *table[dim], type *elem, type **member)" 37528 . 37573) (punctuation ";" 37573 . 37574) (EXTERN "extern" 37578 . 37584) (VOID "void" 37585 . 37589) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 37590 . 37603) (symbol "type" 37605 . 37609)) 37590 . 37609) (symbol "_delete" 37611 . 37618)) 37590 . 37618) (semantic-list "(type *table[dim], type *elem)" 37618 . 37648) (punctuation ";" 37648 . 37649) (EXTERN "extern" 37653 . 37659) (INT "int" 37660 . 37663) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 37664 . 37677) (symbol "type" 37679 . 37683)) 37664 . 37683) (symbol "_delete_if_member" 37685 . 37702)) 37664 . 37702) (semantic-list "(type *table[dim], type *elem, type **memb)" 37702 . 37745) (punctuation ";" 37745 . 37746) (EXTERN "extern" 37750 . 37756) (INT "int" 37757 . 37760) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 37761 . 37774) (symbol "type" 37776 . 37780)) 37761 . 37780) (symbol "_is_member" 37782 . 37792)) 37761 . 37792) (semantic-list "(type *table[dim], type *elem)" 37792 . 37822) (punctuation ";" 37822 . 37823) (EXTERN "extern" 37827 . 37833) (symbol "type" 37834 . 37838) (punctuation "*" 37839 . 37840) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 37841 . 37854) (symbol "type" 37856 . 37860)) 37841 . 37860) (symbol "_find_member" 37862 . 37874)) 37841 . 37874) (semantic-list "(type *table[dim], type *elem)" 37874 . 37904) (punctuation ";" 37904 . 37905) (EXTERN "extern" 37909 . 37915) (symbol "type" 37916 . 37920) (punctuation "*" 37921 . 37922) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 37922 . 37935) (symbol "type" 37937 . 37941)) 37922 . 37941) (symbol "_it_init" 37943 . 37951)) 37922 . 37951) (semantic-list "(struct sglib_hashed_##type##_iterator *it, type *table[dim])" 37951 . 38012) (punctuation ";" 38012 . 38013) (EXTERN "extern" 38018 . 38024) (symbol "type" 38025 . 38029) (punctuation "*" 38030 . 38031) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 38031 . 38044) (symbol "type" 38046 . 38050)) 38031 . 38050) (symbol "_it_init_on_equal" 38052 . 38069)) 38031 . 38069) (semantic-list "(struct sglib_hashed_##type##_iterator *it, type *table[dim], int (*subcomparator)(type *, type *), type *equalto)" 38069 . 38183) (punctuation ";" 38183 . 38184) (EXTERN "extern" 38189 . 38195) (symbol "type" 38196 . 38200) (punctuation "*" 38201 . 38202) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 38202 . 38215) (symbol "type" 38217 . 38221)) 38202 . 38221) (symbol "_it_current" 38223 . 38234)) 38202 . 38234) (semantic-list "(struct sglib_hashed_##type##_iterator *it)" 38234 . 38277) (punctuation ";" 38277 . 38278) (EXTERN "extern" 38283 . 38289) (symbol "type" 38290 . 38294) (punctuation "*" 38295 . 38296) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 38296 . 38309) (symbol "type" 38311 . 38315)) 38296 . 38315) (symbol "_it_next" 38317 . 38325)) 38296 . 38325) (semantic-list "(struct sglib_hashed_##type##_iterator *it)" 38325 . 38368) (punctuation ";" 38368 . 38369)))
          ("SGLIB_SAFE_NUMERIC_COMPARATOR" (spp-arg-list ("x" "y") 72048 . 72054) . ((semantic-list "(((x)>(y)?1:((x)<(y)?-1:0)))" 72055 . 72083)))
          ("SGLIB_NUMERIC_COMPARATOR" (spp-arg-list ("x" "y") 72331 . 72337) . ((symbol "SGLIB_SAFE_NUMERIC_COMPARATOR" 72338 . 72367) (semantic-list "(x, y)" 72367 . 72373)))
          ("SGLIB_QUEUE_INIT" (spp-arg-list ("type" "a" "i" "j") 6101 . 6116) . ((semantic-list "{ i = j = 0; }" 6117 . 6131)))
          ("SGLIB_DL_LIST_ADD_BEFORE_IF_NOT_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "previous" "next" "member") 19093 . 19147) . ((semantic-list "{\\
  SGLIB___DL_LIST_GENERIC_ADD_IF_NOT_MEMBER(type, list, elem, comparator, previous, next, member, SGLIB_DL_LIST_ADD_BEFORE);\\
}" 19148 . 19278)))
          ("SGLIB_DL_LIST_ADD_IF_NOT_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "previous" "next" "member") 19550 . 19604) . ((semantic-list "{\\
  SGLIB___DL_LIST_GENERIC_ADD_IF_NOT_MEMBER(type, list, elem, comparator, previous, next, member, SGLIB_DL_LIST_ADD);\\
}" 19605 . 19728)))
          ("SGLIB_DL_LIST_LEN" (spp-arg-list ("type" "list" "previous" "next" "result") 22674 . 22710) . ((semantic-list "{\\
  type *_dl_;\\
  int _r1_, _r2_;\\
  if ((list)==NULL) {\\
    (result) = 0;\\
  } else {\\
    SGLIB_LIST_LEN(type, list, previous, _r1_);\\
    _dl_ = (list)->next;\\
    SGLIB_LIST_LEN(type, _dl_, next, _r2_);\\
    (result) = _r1_ + _r2_;\\
  }\\
}" 22711 . 22957)))
          ("SGLIB___BIN_TREE_FIND_MEMBER" (spp-arg-list ("type" "tree" "elem" "left" "right" "comparator" "res") 26008 . 26056) . ((semantic-list "{\\
  type *_s_;\\
  int _c_;\\
  _s_ = (tree);\\
  while (_s_!=NULL) {\\
    _c_ = comparator((elem), _s_);\\
    if (_c_ < 0) _s_ = _s_->left;\\
    else if (_c_ > 0) _s_ = _s_->right;\\
    else break;\\
  }\\
  (res) = _s_;\\
}" 26057 . 26277)))
          ("SGLIB_DEFINE_HEAP_PROTOTYPES" (spp-arg-list ("heap_type" "elem_type" "afield" "ifield" "dim" "comparator" "elem_exchanger") 30679 . 30750) . 
              ((EXTERN "extern" 30754 . 30760) (VOID "void" 30761 . 30765) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 30766 . 30772) (symbol "heap_type" 30774 . 30783)) 30766 . 30783) (symbol "_init" 30785 . 30790)) 30766 . 30790) (semantic-list "(heap_type *q)" 30790 . 30804) (punctuation ";" 30804 . 30805) (EXTERN "extern" 30809 . 30815) (INT "int" 30816 . 30819) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 30820 . 30826) (symbol "heap_type" 30828 . 30837)) 30820 . 30837) (symbol "_is_empty" 30839 . 30848)) 30820 . 30848) (semantic-list "(heap_type *q)" 30848 . 30862) (punctuation ";" 30862 . 30863) (EXTERN "extern" 30867 . 30873) (INT "int" 30874 . 30877) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 30878 . 30884) (symbol "heap_type" 30886 . 30895)) 30878 . 30895) (symbol "_is_full" 30897 . 30905)) 30878 . 30905) (semantic-list "(heap_type *q)" 30905 . 30919) (punctuation ";" 30919 . 30920) (EXTERN "extern" 30924 . 30930) (symbol "elem_type" 30931 . 30940) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 30941 . 30947) (symbol "heap_type" 30949 . 30958)) 30941 . 30958) (symbol "_first_element" 30960 . 30974)) 30941 . 30974) (semantic-list "(heap_type *q)" 30974 . 30988) (punctuation ";" 30988 . 30989) (EXTERN "extern" 30993 . 30999) (symbol "elem_type" 31000 . 31009) (punctuation "*" 31010 . 31011) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 31011 . 31017) (symbol "heap_type" 31019 . 31028)) 31011 . 31028) (symbol "_first_element_ptr" 31030 . 31048)) 31011 . 31048) (semantic-list "(heap_type *q)" 31048 . 31062) (punctuation ";" 31062 . 31063) (EXTERN "extern" 31067 . 31073) (VOID "void" 31074 . 31078) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 31079 . 31085) (symbol "heap_type" 31087 . 31096)) 31079 . 31096) (symbol "_add_next" 31098 . 31107)) 31079 . 31107) (semantic-list "(heap_type *q)" 31107 . 31121) (punctuation ";" 31121 . 31122) (EXTERN "extern" 31126 . 31132) (VOID "void" 31133 . 31137) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 31138 . 31144) (symbol "heap_type" 31146 . 31155)) 31138 . 31155) (symbol "_add" 31157 . 31161)) 31138 . 31161) (semantic-list "(heap_type *q, elem_type elem)" 31161 . 31191) (punctuation ";" 31191 . 31192) (EXTERN "extern" 31196 . 31202) (VOID "void" 31203 . 31207) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 31208 . 31214) (symbol "heap_type" 31216 . 31225)) 31208 . 31225) (symbol "_delete_first" 31227 . 31240)) 31208 . 31240) (semantic-list "(heap_type *q)" 31240 . 31254) (punctuation ";" 31254 . 31255) (EXTERN "extern" 31259 . 31265) (VOID "void" 31266 . 31270) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 31271 . 31277) (symbol "heap_type" 31279 . 31288)) 31271 . 31288) (symbol "_delete" 31290 . 31297)) 31271 . 31297) (semantic-list "(heap_type *q)" 31297 . 31311)))
          ("SGLIB_DEFINE_SORTED_LIST_FUNCTIONS" (spp-arg-list ("type" "comparator" "next") 46243 . 46267) . 
              ((INT "int" 46271 . 46274) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 46275 . 46281) (symbol "type" 46283 . 46287)) 46275 . 46287) (symbol "_is_member" 46289 . 46299)) 46275 . 46299) (semantic-list "(type *list, type *elem)" 46299 . 46323) (semantic-list "{\\
   int result;\\
   SGLIB_SORTED_LIST_IS_MEMBER(type, list, elem, comparator, next, result);\\
   return(result);\\
 }" 46324 . 46442) (symbol "type" 46445 . 46449) (punctuation "*" 46450 . 46451) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 46451 . 46457) (symbol "type" 46459 . 46463)) 46451 . 46463) (symbol "_find_member" 46465 . 46477)) 46451 . 46477) (semantic-list "(type *list, type *elem)" 46477 . 46501) (semantic-list "{\\
   type *result;\\
   SGLIB_SORTED_LIST_FIND_MEMBER(type, list, elem, comparator, next, result);\\
   return(result);\\
 }" 46502 . 46624) (INT "int" 46627 . 46630) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 46631 . 46637) (symbol "type" 46639 . 46643)) 46631 . 46643) (symbol "_add_if_not_member" 46645 . 46663)) 46631 . 46663) (semantic-list "(type **list, type *elem, type **member)" 46663 . 46703) (semantic-list "{\\
   SGLIB_SORTED_LIST_ADD_IF_NOT_MEMBER(type, *list, elem, comparator, next, *member);\\
   return(*member==NULL);\\
 }" 46704 . 46823) (VOID "void" 46826 . 46830) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 46831 . 46837) (symbol "type" 46839 . 46843)) 46831 . 46843) (symbol "_add" 46845 . 46849)) 46831 . 46849) (semantic-list "(type **list, type *elem)" 46849 . 46874) (semantic-list "{\\
   SGLIB_SORTED_LIST_ADD(type, *list, elem, comparator, next);\\
 }" 46875 . 46944) (VOID "void" 46947 . 46951) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 46952 . 46958) (symbol "type" 46960 . 46964)) 46952 . 46964) (symbol "_delete" 46966 . 46973)) 46952 . 46973) (semantic-list "(type **list, type *elem)" 46973 . 46998) (semantic-list "{\\
   SGLIB_SORTED_LIST_DELETE(type, *list, elem, next);\\
 }" 46999 . 47059) (INT "int" 47062 . 47065) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 47066 . 47072) (symbol "type" 47074 . 47078)) 47066 . 47078) (symbol "_delete_if_member" 47080 . 47097)) 47066 . 47097) (semantic-list "(type **list, type *elem, type **member)" 47097 . 47137) (semantic-list "{\\
   SGLIB_SORTED_LIST_DELETE_IF_MEMBER(type, *list, elem, comparator, next, *member);\\
   return(*member!=NULL);\\
 }" 47138 . 47256) (INT "int" 47259 . 47262) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 47263 . 47269) (symbol "type" 47271 . 47275)) 47263 . 47275) (symbol "_len" 47277 . 47281)) 47263 . 47281) (semantic-list "(type *list)" 47281 . 47293) (semantic-list "{\\
   int res;\\
   SGLIB_SORTED_LIST_LEN(type, list, next, res);\\
   return(res);\\
 }" 47294 . 47379) (VOID "void" 47382 . 47386) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 47387 . 47393) (symbol "type" 47395 . 47399)) 47387 . 47399) (symbol "_sort" 47401 . 47406)) 47387 . 47406) (semantic-list "(type **list)" 47406 . 47419) (semantic-list "{ \\
   SGLIB_LIST_SORT(type, *list, comparator, next);\\
 }" 47420 . 47478) (symbol "type" 47484 . 47488) (punctuation "*" 47489 . 47490) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 47490 . 47496) (symbol "type" 47498 . 47502)) 47490 . 47502) (symbol "_it_init_on_equal" 47504 . 47521)) 47490 . 47521) (semantic-list "(struct sglib_##type##_iterator *it, type *list, int (*subcomparator)(type *, type *), type *equalto)" 47521 . 47622) (semantic-list "{\\
   it->subcomparator = subcomparator;\\
   it->equalto = equalto;\\
   it->nextelem = list;\\
   return(sglib_##type##_it_next(it));\\
 }" 47623 . 47759) (symbol "type" 47762 . 47766) (punctuation "*" 47767 . 47768) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 47768 . 47774) (symbol "type" 47776 . 47780)) 47768 . 47780) (symbol "_it_init" 47782 . 47790)) 47768 . 47790) (semantic-list "(struct sglib_##type##_iterator *it, type *list)" 47790 . 47838) (semantic-list "{\\
   return(sglib_##type##_it_init_on_equal(it, list, NULL, NULL));\\
 }" 47839 . 47911) (symbol "type" 47914 . 47918) (punctuation "*" 47919 . 47920) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 47920 . 47926) (symbol "type" 47928 . 47932)) 47920 . 47932) (symbol "_it_current" 47934 . 47945)) 47920 . 47945) (semantic-list "(struct sglib_##type##_iterator *it)" 47945 . 47981) (semantic-list "{\\
   return(it->currentelem);\\
 }" 47982 . 48016) (symbol "type" 48019 . 48023) (punctuation "*" 48024 . 48025) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 48025 . 48031) (symbol "type" 48033 . 48037)) 48025 . 48037) (symbol "_it_next" 48039 . 48047)) 48025 . 48047) (semantic-list "(struct sglib_##type##_iterator *it)" 48047 . 48083) (semantic-list "{\\
   type *ce, *eq;\\
   int  (*scp)(type *, type *);\\
   int  c;\\
   ce = it->nextelem;\\
   it->nextelem = NULL;\\
   if (it->subcomparator != NULL) {\\
	 eq = it->equalto; \\
     scp = it->subcomparator;\\
     while (ce!=NULL && (c=scp(ce, eq)) < 0) ce = ce->next;\\
     if (ce != NULL && c > 0) ce = NULL;\\
   }\\
   it->currentelem = ce;\\
   if (ce != NULL) it->nextelem = ce->next;\\
   return(ce);\\
 }" 48084 . 48487)))
          ("SGLIB_ARRAY_QUICK_SORT" (spp-arg-list ("type" "a" "max" "comparator" "elem_exchanger") 2789 . 2831) . ((semantic-list "{\\
  int   _i_, _j_, _p_, _stacki_, _start_, _end_;\\
  /* can sort up to 2^64 elements */\\
  int   _startStack_[64]; \\
  int   _endStack_[64];\\
  type  _tmp_;\\
  _startStack_[0] = 0;\\
  _endStack_[0] = (max);\\
  _stacki_ = 1;\\
  while (_stacki_ > 0) {\\
    _stacki_ --;\\
    _start_ = _startStack_[_stacki_];\\
    _end_ = _endStack_[_stacki_];\\
    while (_end_ - _start_ > 2) {\\
      _p_ = _start_;\\
      _i_ = _start_ + 1;\\
      _j_ = _end_ - 1;\\
      while (_i_<_j_) {\\
        for(; _i_<=_j_ && comparator(((a)[_i_]),((a)[_p_]))<=0; _i_++) ;\\
        if (_i_ > _j_) {\\
          /* all remaining elements lesseq than pivot */\\
          elem_exchanger(type, a, _j_, _p_);\\
          _i_ = _j_;\\
        } else {\\
          for(; _i_<=_j_ && comparator(((a)[_j_]),((a)[_p_]))>=0; _j_--) ;\\
          if (_i_ > _j_) {\\
            /* all remaining elements greater than pivot */\\
            elem_exchanger(type, a, _j_, _p_);\\
            _i_ = _j_;\\
          } else if (_i_ < _j_) {\\
            elem_exchanger(type, a, _i_, _j_);\\
            if (_i_+2 < _j_) {_i_++; _j_--;}\\
            else if (_i_+1 < _j_) _i_++;\\
          }\\
        }\\
      }\\
      /* O.K. i==j and pivot is on a[i] == a[j] */\\
      /* handle recursive calls without recursion */\\
      if (_i_-_start_ > 1 && _end_-_j_ > 1) {\\
        /* two recursive calls, use array-stack */\\
        if (_i_-_start_ < _end_-_j_-1) {\\
          _startStack_[_stacki_] = _j_+1;\\
          _endStack_[_stacki_] = _end_;\\
          _stacki_ ++;\\
          _end_ = _i_;\\
        } else {\\
          _startStack_[_stacki_] = _start_;\\
          _endStack_[_stacki_] = _i_;\\
          _stacki_ ++;\\
          _start_ = _j_+1;\\
        }\\
      } else {\\
        if (_i_-_start_ > 1) {\\
          _end_ = _i_;\\
        } else {\\
          _start_ = _j_+1;\\
        }\\
      }\\
    }\\
    if (_end_ - _start_ == 2) {\\
      if (comparator(((a)[_start_]),((a)[_end_-1])) > 0) {\\
        elem_exchanger(type, a, _start_, _end_-1);\\
      }\\
    }\\
  }\\
}" 2832 . 4850)))
          ("SGLIB_QUEUE_ADD" (spp-arg-list ("type" "a" "elem" "i" "j" "dim") 6497 . 6523) . ((semantic-list "{\\
  a[j] = (elem);\\
  SGLIB_QUEUE_ADD_NEXT(type, a, i, j, dim);\\
}" 6524 . 6591)))
          ("SGLIB_HEAP_INIT" (spp-arg-list ("type" "a" "i") 7367 . 7379) . ((semantic-list "{ i = 0; }" 7380 . 7390)))
          ("SGLIB_HASH_TAB_FIND_MEMBER" (spp-arg-list ("type" "table" "dim" "elem" "hash_function" "comparator" "resultIndex" "resultMember") 9947 . 10025) . ((semantic-list "{\\
  unsigned _i_;\\
  int      _count_;\\
  type     *_e_;\\
  _count = 0;\\
  _i_ = hash_function(elem);\\
  _i_ %= (dim);\\
  while ((_e_=(table)[_i_])!=NULL && comparator(_e_, (elem))!=0 && _count_<(dim)) {\\
    _count_ ++;\\
    _i_ = (_i_ + SGLIB_HASH_TAB_SHIFT_CONSTANT) % (dim);\\
  }\\
  (resultIndex) = _i_;\\
  if (_count_ < (dim)) (resultMember) = _e_;\\
  else (resultMember) = NULL;\\
}" 10026 . 10414)))
          ("SGLIB_LIST_ADD_IF_NOT_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "next" "member") 12126 . 12170) . ((semantic-list "{\\
  type *_p_;\\
  for(_p_ = (list); _p_!=NULL && comparator(_p_, (elem)) != 0; _p_= _p_->next) ;\\
  (member) = _p_;\\
  if (_p_ == NULL) {\\
    SGLIB_LIST_ADD(type, list, elem, next);\\
  }\\
}" 12171 . 12362)))
          ("SGLIB_LIST_LEN" (spp-arg-list ("type" "list" "next" "result") 13314 . 13340) . ((semantic-list "{\\
  type *_ce_;\\
  (result) = 0;\\
  SGLIB_LIST_MAP_ON_ELEMENTS(type, list, _ce_, next, (result)++);\\
}" 13341 . 13444)))
          ("SGLIB_DL_LIST_ADD_BEFORE" (spp-arg-list ("type" "place" "elem" "previous" "next") 18091 . 18126) . ((semantic-list "{\\
  if ((place) == NULL) {\\
    SGLIB___DL_LIST_CREATE_SINGLETON(type, place, elem, previous, next);\\
  } else {\\
    (elem)->next = (place);\\
    (elem)->previous = (place)->previous;\\
    (place)->previous = (elem);\\
    if ((elem)->previous != NULL) (elem)->previous->next = (elem);\\
  }\\
}" 18127 . 18421)))
          ("SGLIB_DL_LIST_IS_MEMBER" (spp-arg-list ("type" "list" "elem" "previous" "next" "result") 20919 . 20961) . ((semantic-list "{\\
  type *_dlp_;\\
  SGLIB_LIST_IS_MEMBER(type, list, elem, previous, result);\\
  if (result == 0 && (list) != NULL) {\\
    _dlp_ = (list)->next;\\
    SGLIB_LIST_IS_MEMBER(type, _dlp_, elem, next, result);\\
  }\\
}" 20962 . 21175)))
          ("SGLIB_BIN_TREE_MAP_ON_ELEMENTS_PREORDER" (spp-arg-list ("type" "tree" "_current_element_" "left" "right" "command") 25618 . 25671) . ((semantic-list "{\\
  SGLIB___BIN_TREE_MAP_ON_ELEMENTS(type, tree, _current_element_, 0, left, right, command);\\
}" 25672 . 25769)))
          ("SGLIB_DEFINE_HASHED_CONTAINER_FUNCTIONS" (spp-arg-list ("type" "dim" "hash_function") 38418 . 38444) . 
              ((VOID "void" 38499 . 38503) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 38504 . 38517) (symbol "type" 38519 . 38523)) 38504 . 38523) (symbol "_init" 38525 . 38530)) 38504 . 38530) (semantic-list "(type *table[dim])" 38530 . 38548) (semantic-list "{\\
    unsigned i;\\
    for(i=0; i<(dim); i++) table[i] = NULL;\\
  }" 38549 . 38617) (VOID "void" 38621 . 38625) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 38626 . 38639) (symbol "type" 38641 . 38645)) 38626 . 38645) (symbol "_add" 38647 . 38651)) 38626 . 38651) (semantic-list "(type *table[dim], type *elem)" 38651 . 38681) (semantic-list "{\\
    unsigned i;\\
    i = ((unsigned)hash_function(elem)) % (dim);\\
    sglib_##type##_add(&(table)[i], elem);\\
  }" 38682 . 38799) (INT "int" 38803 . 38806) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 38807 . 38820) (symbol "type" 38822 . 38826)) 38807 . 38826) (symbol "_add_if_not_member" 38828 . 38846)) 38807 . 38846) (semantic-list "(type *table[dim], type *elem, type **member)" 38846 . 38891) (semantic-list "{\\
    unsigned i;\\
    i = ((unsigned)hash_function(elem)) % (dim);\\
    return(sglib_##type##_add_if_not_member(&(table)[i], elem, member));\\
  }" 38892 . 39039) (VOID "void" 39043 . 39047) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 39048 . 39061) (symbol "type" 39063 . 39067)) 39048 . 39067) (symbol "_delete" 39069 . 39076)) 39048 . 39076) (semantic-list "(type *table[dim], type *elem)" 39076 . 39106) (semantic-list "{\\
    unsigned i;\\
    i = ((unsigned)hash_function(elem)) % (dim);\\
    sglib_##type##_delete(&(table)[i], elem);\\
  }" 39107 . 39227) (INT "int" 39231 . 39234) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 39235 . 39248) (symbol "type" 39250 . 39254)) 39235 . 39254) (symbol "_delete_if_member" 39256 . 39273)) 39235 . 39273) (semantic-list "(type *table[dim], type *elem, type **memb)" 39273 . 39316) (semantic-list "{\\
    unsigned i;\\
    i = ((unsigned)hash_function(elem)) % (dim);\\
    return(sglib_##type##_delete_if_member(&(table)[i], elem, memb));\\
  }" 39317 . 39461) (INT "int" 39465 . 39468) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 39469 . 39482) (symbol "type" 39484 . 39488)) 39469 . 39488) (symbol "_is_member" 39490 . 39500)) 39469 . 39500) (semantic-list "(type *table[dim], type *elem)" 39500 . 39530) (semantic-list "{\\
    unsigned i;\\
    i = ((unsigned)hash_function(elem)) % (dim);\\
    return(sglib_##type##_is_member((table)[i], elem));\\
  }" 39531 . 39661) (symbol "type" 39665 . 39669) (punctuation "*" 39670 . 39671) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 39672 . 39685) (symbol "type" 39687 . 39691)) 39672 . 39691) (symbol "_find_member" 39693 . 39705)) 39672 . 39705) (semantic-list "(type *table[dim], type *elem)" 39705 . 39735) (semantic-list "{\\
    unsigned i;\\
    i = ((unsigned)hash_function(elem)) % (dim);\\
    return(sglib_##type##_find_member((table)[i], elem));\\
  }" 39736 . 39868) (symbol "type" 39872 . 39876) (punctuation "*" 39877 . 39878) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 39878 . 39891) (symbol "type" 39893 . 39897)) 39878 . 39897) (symbol "_it_init_on_equal" 39899 . 39916)) 39878 . 39916) (semantic-list "(struct sglib_hashed_##type##_iterator *it, type *table[dim], int (*subcomparator)(type *, type *), type *equalto)" 39916 . 40030) (semantic-list "{\\
    type *e;\\
    it->table = table;\\
    it->currentIndex = 0;\\
    it->subcomparator = subcomparator;\\
    it->equalto = equalto;\\
    e = sglib_##type##_it_init_on_equal(&it->containerIt, table[it->currentIndex], it->subcomparator, it->equalto);\\
    if (e==NULL) e = sglib_hashed_##type##_it_next(it);\\
    return(e);\\
  }" 40031 . 40360) (symbol "type" 40364 . 40368) (punctuation "*" 40369 . 40370) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 40370 . 40383) (symbol "type" 40385 . 40389)) 40370 . 40389) (symbol "_it_init" 40391 . 40399)) 40370 . 40399) (semantic-list "(struct sglib_hashed_##type##_iterator *it, type *table[dim])" 40399 . 40460) (semantic-list "{\\
	return(sglib_hashed_##type##_it_init_on_equal(it, table, NULL, NULL));\\
  }" 40461 . 40540) (symbol "type" 40544 . 40548) (punctuation "*" 40549 . 40550) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 40550 . 40563) (symbol "type" 40565 . 40569)) 40550 . 40569) (symbol "_it_current" 40571 . 40582)) 40550 . 40582) (semantic-list "(struct sglib_hashed_##type##_iterator *it)" 40582 . 40625) (semantic-list "{\\
    return(sglib_##type##_it_current(&it->containerIt));\\
  }" 40626 . 40690) (symbol "type" 40694 . 40698) (punctuation "*" 40699 . 40700) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_hashed_" 40700 . 40713) (symbol "type" 40715 . 40719)) 40700 . 40719) (symbol "_it_next" 40721 . 40729)) 40700 . 40729) (semantic-list "(struct sglib_hashed_##type##_iterator *it)" 40729 . 40772) (semantic-list "{\\
    type *e;\\
    e = sglib_##type##_it_next(&it->containerIt);\\
    while (e==NULL && (++(it->currentIndex))<(dim)) {\\
      e = sglib_##type##_it_init_on_equal(&it->containerIt, it->table[it->currentIndex], it->subcomparator, it->equalto);\\
    }\\
    return(e);\\
  }" 40773 . 41045)))
          ("SGLIB___RBTREE_FIX_INSERTION_DISCREPANCY" (spp-arg-list ("type" "tree" "leftt" "rightt" "bits" "RED" "BLACK") 54588 . 54633) . ((semantic-list "{\\
  type *t, *tl, *a, *b, *c, *ar, *bl, *br, *cl, *cr;\\
  t = *tree;\\
  tl = t->leftt;\\
  if (t->rightt!=NULL && SGLIB___GET_VALUE(t->rightt->bits)==RED) {\\
    if (SGLIB___GET_VALUE(tl->bits)==RED) {\\
      if ((tl->leftt!=NULL && SGLIB___GET_VALUE(tl->leftt->bits)==RED) \\
          || (tl->rightt!=NULL && SGLIB___GET_VALUE(tl->rightt->bits)==RED)) {\\
        SGLIB___SET_VALUE(t->leftt->bits,BLACK);\\
        SGLIB___SET_VALUE(t->rightt->bits,BLACK);\\
        SGLIB___SET_VALUE(t->bits,RED);\\
      }\\
    }\\
  } else {\\
    if (SGLIB___GET_VALUE(tl->bits)==RED) {\\
      if (tl->leftt!=NULL && SGLIB___GET_VALUE(tl->leftt->bits)==RED) {\\
        a = t; b = tl; c = tl->leftt;\\
        br = b->rightt;\\
        a->leftt = br;\\
        b->leftt = c; b->rightt = a;\\
        SGLIB___SET_VALUE(a->bits,RED);\\
        SGLIB___SET_VALUE(b->bits,BLACK);\\
        *tree = b;\\
      } else if (tl->rightt!=NULL && SGLIB___GET_VALUE(tl->rightt->bits)==RED) {\\
        a = t; b = tl; ar=a->rightt;\\
        bl=b->leftt; c=b->rightt;\\
        cl=c->leftt; cr=c->rightt;\\
        b->rightt = cl;\\
        a->leftt = cr;\\
        c->leftt = b;\\
        c->rightt = a;\\
        SGLIB___SET_VALUE(c->bits,BLACK);\\
        SGLIB___SET_VALUE(a->bits,RED);\\
        *tree = c;\\
      }\\
    }\\
  }\\
}" 54634 . 55921)))
          ("SGLIB_DEFINE_RBTREE_FUNCTIONS" (spp-arg-list ("type" "left" "right" "colorbit" "comparator") 71228 . 71269) . ((symbol "SGLIB_DEFINE_RBTREE_FUNCTIONS_GENERAL" 71274 . 71311) (semantic-list "(type, left, right, colorbit, comparator, 1, 0)" 71311 . 71358)))
          ("SGLIB___SET_VALUE" (spp-arg-list ("x" "value") 71837 . 71847) . ((semantic-list "{(x) = (value);}" 71848 . 71864)))
          ("SGLIB_FAST_NUMERIC_COMPARATOR" (spp-arg-list ("x" "y") 72202 . 72208) . ((semantic-list "((int)((x) - (y)))" 72209 . 72227)))
          ("SGLIB_ARRAY_SINGLE_HEAP_SORT" (spp-arg-list ("type" "a" "max" "comparator") 1550 . 1576) . ((semantic-list "{\\
  SGLIB_ARRAY_HEAP_SORT(type, a, max, comparator, SGLIB_ARRAY_ELEMENTS_EXCHANGER);\\
}" 1577 . 1665)))
          ("SGLIB_HEAP_FIRST_ELEMENT" (spp-arg-list ("type" "a" "i") 7529 . 7541) . ((semantic-list "(a[0])" 7542 . 7548)))
          ("SGLIB_SORTED_LIST_ADD" (spp-arg-list ("type" "list" "elem" "comparator" "next") 15168 . 15204) . ((semantic-list "{\\
  type **_e_;\\
  int  _cmpres_;\\
  SGLIB_SORTED_LIST_FIND_MEMBER_OR_PLACE(type, list, elem, comparator, next, _cmpres_, _e_);\\
  (elem)->next = *_e_;\\
  *_e_ = (elem);\\
}" 15205 . 15378)))
          ("SGLIB_SORTED_LIST_DELETE_IF_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "next" "member") 15885 . 15929) . ((semantic-list "{\\
  type **_e_;\\
  int _cmp_res_;\\
  SGLIB_SORTED_LIST_FIND_MEMBER_OR_PLACE(type, list, elem, comparator, next, _cmp_res_, _e_);\\
  if (_cmp_res_ == 0) {\\
    (member) = *_e_;\\
    *_e_ = (*_e_)->next;\\
  } else {\\
    (member) = NULL;\\
  }\\
}" 15930 . 16174)))
          ("SGLIB_DL_LIST_DELETE" (spp-arg-list ("type" "list" "elem" "previous" "next") 20067 . 20101) . ((semantic-list "{\\
  type *_l_;\\
  _l_ = (list);\\
  if (_l_ == (elem)) {\\
    if ((elem)->previous != NULL) _l_ = (elem)->previous;\\
    else _l_ = (elem)->next;\\
  }\\
  if ((elem)->next != NULL) (elem)->next->previous = (elem)->previous;\\
  if ((elem)->previous != NULL) (elem)->previous->next = (elem)->next;\\
  (list) = _l_;\\
}" 20102 . 20416)))
          ("SGLIB_DL_LIST_REVERSE" (spp-arg-list ("type" "list" "previous" "next") 22988 . 23016) . ((semantic-list "{\\
  type *_list_,*_nlist_,*_dlp_,*_dln_;\\
  _list_ = (list);\\
  if (_list_!=NULL) {\\
    _nlist_ = _list_->next;\\
    while (_list_!=NULL) {\\
      _dln_ = _list_->next; \\
      _dlp_ = _list_->previous; \\
      _list_->next = _dlp_;\\
      _list_->previous = _dln_;\\
      _list_ = _dlp_;\\
    }\\
    while (_nlist_!=NULL) {\\
      _dln_ = _nlist_->next; \\
      _dlp_ = _nlist_->previous; \\
      _nlist_->next = _dlp_;\\
      _nlist_->previous = _dln_;\\
      _nlist_ = _dln_;\\
    }\\
  }\\
}" 23017 . 23512)))
          ("SGLIB___BIN_TREE_MAP_ON_ELEMENTS" (spp-arg-list ("type" "tree" "iteratedVariable" "order" "left" "right" "command") 23878 . 23937) . ((semantic-list "{\\
  /* this is non-recursive implementation of tree traversal */\\
  /* it maintains the path to the current node in the array '_path_' */\\
  /* the _path_[0] contains the root of the tree; */\\
  /* the _path_[_pathi_] contains the _current_element_ */\\
  /* the macro does not use the _current_element_ after execution of command */\\
  /* command can destroy it, it can free the element for example */\\
  type *_path_[SGLIB_MAX_TREE_DEEP];\\
  type *_right_[SGLIB_MAX_TREE_DEEP];\\
  char _pass_[SGLIB_MAX_TREE_DEEP];\\
  type *_cn_;\\
  int _pathi_;\\
  type *iteratedVariable;\\
  _cn_ = (tree);\\
  _pathi_ = 0;\\
  while (_cn_!=NULL) {\\
    /* push down to leftmost innermost element */\\
    while(_cn_!=NULL) {\\
      _path_[_pathi_] = _cn_;\\
      _right_[_pathi_] = _cn_->right;\\
      _pass_[_pathi_] = 0;\\
      _cn_ = _cn_->left;\\
      if (order == 0) {\\
        iteratedVariable = _path_[_pathi_];\\
        {command;}\\
      }\\
      _pathi_ ++;\\
      if (_pathi_ >= SGLIB_MAX_TREE_DEEP) assert(0 && \"the binary_tree is too deep\");\\
    }\\
    do {\\
      _pathi_ --;\\
      if ((order==1 && _pass_[_pathi_] == 0)\\
          || (order == 2 && (_pass_[_pathi_] == 1 || _right_[_pathi_]==NULL))) {\\
        iteratedVariable = _path_[_pathi_];\\
        {command;}\\
      }\\
      _pass_[_pathi_] ++;\\
    } while (_pathi_>0 && _right_[_pathi_]==NULL) ;\\
    _cn_ = _right_[_pathi_];\\
    _right_[_pathi_] = NULL;\\
    _pathi_ ++;\\
  }\\
}" 23938 . 25378)))
          ("SGLIB_DEFINE_ARRAY_SORTING_FUNCTIONS" (spp-arg-list ("type" "comparator") 27272 . 27290) . 
              ((VOID "void" 27294 . 27298) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 27299 . 27305) (symbol "type" 27307 . 27311)) 27299 . 27311) (symbol "_array_quick_sort" 27313 . 27330)) 27299 . 27330) (semantic-list "(type *a, int max)" 27330 . 27348) (semantic-list "{\\
   SGLIB_ARRAY_SINGLE_QUICK_SORT(type, a, max, comparator);\\
 }" 27349 . 27415) (VOID "void" 27418 . 27422) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 27423 . 27429) (symbol "type" 27431 . 27435)) 27423 . 27435) (symbol "_array_heap_sort" 27437 . 27453)) 27423 . 27453) (semantic-list "(type *a, int max)" 27453 . 27471) (semantic-list "{\\
   SGLIB_ARRAY_SINGLE_HEAP_SORT(type, a, max, comparator);\\
 }" 27472 . 27537)))
          ("SGLIB_DEFINE_DL_LIST_PROTOTYPES" (spp-arg-list ("type" "comparator" "previous" "next") 48627 . 48661) . 
              ((STRUCT "struct" 48665 . 48671) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 48672 . 48678) (symbol "type" 48680 . 48684)) 48672 . 48684) (symbol "_iterator" 48686 . 48695)) 48672 . 48695) (semantic-list "{\\
   type *currentelem;\\
   type *prevelem;\\
   type *nextelem;\\
   int (*subcomparator)(type *, type *);\\
   type *equalto;\\
 }" 48696 . 48825) (punctuation ";" 48825 . 48826) (EXTERN "extern" 48829 . 48835) (VOID "void" 48836 . 48840) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 48841 . 48847) (symbol "type" 48849 . 48853)) 48841 . 48853) (symbol "_add" 48855 . 48859)) 48841 . 48859) (semantic-list "(type **list, type *elem)" 48859 . 48884) (punctuation ";" 48884 . 48885) (EXTERN "extern" 48888 . 48894) (VOID "void" 48895 . 48899) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 48900 . 48906) (symbol "type" 48908 . 48912)) 48900 . 48912) (symbol "_add_before" 48914 . 48925)) 48900 . 48925) (semantic-list "(type **list, type *elem)" 48925 . 48950) (punctuation ";" 48950 . 48951) (EXTERN "extern" 48954 . 48960) (VOID "void" 48961 . 48965) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 48966 . 48972) (symbol "type" 48974 . 48978)) 48966 . 48978) (symbol "_add_after" 48980 . 48990)) 48966 . 48990) (semantic-list "(type **list, type *elem)" 48990 . 49015) (punctuation ";" 49015 . 49016) (EXTERN "extern" 49019 . 49025) (INT "int" 49026 . 49029) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49030 . 49036) (symbol "type" 49038 . 49042)) 49030 . 49042) (symbol "_add_if_not_member" 49044 . 49062)) 49030 . 49062) (semantic-list "(type **list, type *elem, type **member)" 49062 . 49102) (punctuation ";" 49102 . 49103) (EXTERN "extern" 49106 . 49112) (INT "int" 49113 . 49116) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49117 . 49123) (symbol "type" 49125 . 49129)) 49117 . 49129) (symbol "_add_before_if_not_member" 49131 . 49156)) 49117 . 49156) (semantic-list "(type **list, type *elem, type **member)" 49156 . 49196) (punctuation ";" 49196 . 49197) (EXTERN "extern" 49200 . 49206) (INT "int" 49207 . 49210) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49211 . 49217) (symbol "type" 49219 . 49223)) 49211 . 49223) (symbol "_add_after_if_not_member" 49225 . 49249)) 49211 . 49249) (semantic-list "(type **list, type *elem, type **member)" 49249 . 49289) (punctuation ";" 49289 . 49290) (EXTERN "extern" 49293 . 49299) (VOID "void" 49300 . 49304) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49305 . 49311) (symbol "type" 49313 . 49317)) 49305 . 49317) (symbol "_concat" 49319 . 49326)) 49305 . 49326) (semantic-list "(type **first, type *second)" 49326 . 49354) (punctuation ";" 49354 . 49355) (EXTERN "extern" 49358 . 49364) (VOID "void" 49365 . 49369) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49370 . 49376) (symbol "type" 49378 . 49382)) 49370 . 49382) (symbol "_delete" 49384 . 49391)) 49370 . 49391) (semantic-list "(type **list, type *elem)" 49391 . 49416) (punctuation ";" 49416 . 49417) (EXTERN "extern" 49420 . 49426) (INT "int" 49427 . 49430) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49431 . 49437) (symbol "type" 49439 . 49443)) 49431 . 49443) (symbol "_delete_if_member" 49445 . 49462)) 49431 . 49462) (semantic-list "(type **list, type *elem, type **member)" 49462 . 49502) (punctuation ";" 49502 . 49503) (EXTERN "extern" 49506 . 49512) (INT "int" 49513 . 49516) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49517 . 49523) (symbol "type" 49525 . 49529)) 49517 . 49529) (symbol "_is_member" 49531 . 49541)) 49517 . 49541) (semantic-list "(type *list, type *elem)" 49541 . 49565) (punctuation ";" 49565 . 49566) (EXTERN "extern" 49569 . 49575) (symbol "type" 49576 . 49580) (punctuation "*" 49581 . 49582) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49582 . 49588) (symbol "type" 49590 . 49594)) 49582 . 49594) (symbol "_find_member" 49596 . 49608)) 49582 . 49608) (semantic-list "(type *list, type *elem)" 49608 . 49632) (punctuation ";" 49632 . 49633) (EXTERN "extern" 49636 . 49642) (symbol "type" 49643 . 49647) (punctuation "*" 49648 . 49649) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49649 . 49655) (symbol "type" 49657 . 49661)) 49649 . 49661) (symbol "_get_first" 49663 . 49673)) 49649 . 49673) (semantic-list "(type *list)" 49673 . 49685) (punctuation ";" 49685 . 49686) (EXTERN "extern" 49689 . 49695) (symbol "type" 49696 . 49700) (punctuation "*" 49701 . 49702) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49702 . 49708) (symbol "type" 49710 . 49714)) 49702 . 49714) (symbol "_get_last" 49716 . 49725)) 49702 . 49725) (semantic-list "(type *list)" 49725 . 49737) (punctuation ";" 49737 . 49738) (EXTERN "extern" 49741 . 49747) (VOID "void" 49748 . 49752) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49753 . 49759) (symbol "type" 49761 . 49765)) 49753 . 49765) (symbol "_sort" 49767 . 49772)) 49753 . 49772) (semantic-list "(type **list)" 49772 . 49785) (punctuation ";" 49785 . 49786) (EXTERN "extern" 49789 . 49795) (INT "int" 49796 . 49799) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49800 . 49806) (symbol "type" 49808 . 49812)) 49800 . 49812) (symbol "_len" 49814 . 49818)) 49800 . 49818) (semantic-list "(type *list)" 49818 . 49830) (punctuation ";" 49830 . 49831) (EXTERN "extern" 49834 . 49840) (VOID "void" 49841 . 49845) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49846 . 49852) (symbol "type" 49854 . 49858)) 49846 . 49858) (symbol "_reverse" 49860 . 49868)) 49846 . 49868) (semantic-list "(type **list)" 49868 . 49881) (punctuation ";" 49881 . 49882) (EXTERN "extern" 49885 . 49891) (symbol "type" 49892 . 49896) (punctuation "*" 49897 . 49898) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49898 . 49904) (symbol "type" 49906 . 49910)) 49898 . 49910) (symbol "_it_init" 49912 . 49920)) 49898 . 49920) (semantic-list "(struct sglib_##type##_iterator *it, type *list)" 49920 . 49968) (punctuation ";" 49968 . 49969) (EXTERN "extern" 49973 . 49979) (symbol "type" 49980 . 49984) (punctuation "*" 49985 . 49986) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 49986 . 49992) (symbol "type" 49994 . 49998)) 49986 . 49998) (symbol "_it_init_on_equal" 50000 . 50017)) 49986 . 50017) (semantic-list "(struct sglib_##type##_iterator *it, type *list, int (*subcomparator)(type *, type *), type *equalto)" 50017 . 50118) (punctuation ";" 50118 . 50119) (EXTERN "extern" 50123 . 50129) (symbol "type" 50130 . 50134) (punctuation "*" 50135 . 50136) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 50136 . 50142) (symbol "type" 50144 . 50148)) 50136 . 50148) (symbol "_it_current" 50150 . 50161)) 50136 . 50161) (semantic-list "(struct sglib_##type##_iterator *it)" 50161 . 50197) (punctuation ";" 50197 . 50198) (EXTERN "extern" 50202 . 50208) (symbol "type" 50209 . 50213) (punctuation "*" 50214 . 50215) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 50215 . 50221) (symbol "type" 50223 . 50227)) 50215 . 50227) (symbol "_it_next" 50229 . 50237)) 50215 . 50237) (semantic-list "(struct sglib_##type##_iterator *it)" 50237 . 50273) (punctuation ";" 50273 . 50274)))
          ("SGLIB_DEFINE_DL_LIST_FUNCTIONS" (spp-arg-list ("type" "comparator" "previous" "next") 50315 . 50349) . 
              ((VOID "void" 50353 . 50357) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 50358 . 50364) (symbol "type" 50366 . 50370)) 50358 . 50370) (symbol "_add" 50372 . 50376)) 50358 . 50376) (semantic-list "(type **list, type *elem)" 50376 . 50401) (semantic-list "{\\
  SGLIB_DL_LIST_ADD(type, *list, elem, previous, next);\\
 }" 50402 . 50464) (VOID "void" 50467 . 50471) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 50472 . 50478) (symbol "type" 50480 . 50484)) 50472 . 50484) (symbol "_add_after" 50486 . 50496)) 50472 . 50496) (semantic-list "(type **list, type *elem)" 50496 . 50521) (semantic-list "{\\
  SGLIB_DL_LIST_ADD_AFTER(type, *list, elem, previous, next);\\
 }" 50522 . 50590) (VOID "void" 50593 . 50597) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 50598 . 50604) (symbol "type" 50606 . 50610)) 50598 . 50610) (symbol "_add_before" 50612 . 50623)) 50598 . 50623) (semantic-list "(type **list, type *elem)" 50623 . 50648) (semantic-list "{\\
  SGLIB_DL_LIST_ADD_BEFORE(type, *list, elem, previous, next);\\
 }" 50649 . 50718) (INT "int" 50721 . 50724) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 50725 . 50731) (symbol "type" 50733 . 50737)) 50725 . 50737) (symbol "_add_if_not_member" 50739 . 50757)) 50725 . 50757) (semantic-list "(type **list, type *elem, type **member)" 50757 . 50797) (semantic-list "{\\
  SGLIB_DL_LIST_ADD_IF_NOT_MEMBER(type, *list, elem, comparator, previous, next, *member);\\
  return(*member==NULL);\\
 }" 50798 . 50921) (INT "int" 50924 . 50927) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 50928 . 50934) (symbol "type" 50936 . 50940)) 50928 . 50940) (symbol "_add_after_if_not_member" 50942 . 50966)) 50928 . 50966) (semantic-list "(type **list, type *elem, type **member)" 50966 . 51006) (semantic-list "{\\
  SGLIB_DL_LIST_ADD_AFTER_IF_NOT_MEMBER(type, *list, elem, comparator, previous, next, *member);\\
  return(*member==NULL);\\
 }" 51007 . 51136) (INT "int" 51139 . 51142) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 51143 . 51149) (symbol "type" 51151 . 51155)) 51143 . 51155) (symbol "_add_before_if_not_member" 51157 . 51182)) 51143 . 51182) (semantic-list "(type **list, type *elem, type **member)" 51182 . 51222) (semantic-list "{\\
  SGLIB_DL_LIST_ADD_BEFORE_IF_NOT_MEMBER(type, *list, elem, comparator, previous, next, *member);\\
  return(*member==NULL);\\
 }" 51223 . 51353) (VOID "void" 51356 . 51360) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 51361 . 51367) (symbol "type" 51369 . 51373)) 51361 . 51373) (symbol "_concat" 51375 . 51382)) 51361 . 51382) (semantic-list "(type **first, type *second)" 51382 . 51410) (semantic-list "{\\
   SGLIB_DL_LIST_CONCAT(type, *first, second, previous, next);\\
 }" 51411 . 51480) (VOID "void" 51483 . 51487) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 51488 . 51494) (symbol "type" 51496 . 51500)) 51488 . 51500) (symbol "_delete" 51502 . 51509)) 51488 . 51509) (semantic-list "(type **list, type *elem)" 51509 . 51534) (semantic-list "{\\
  SGLIB_DL_LIST_DELETE(type, *list, elem, previous, next);\\
 }" 51535 . 51600) (INT "int" 51603 . 51606) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 51607 . 51613) (symbol "type" 51615 . 51619)) 51607 . 51619) (symbol "_delete_if_member" 51621 . 51638)) 51607 . 51638) (semantic-list "(type **list, type *elem, type **member)" 51638 . 51678) (semantic-list "{\\
  SGLIB_DL_LIST_DELETE_IF_MEMBER(type, *list, elem, comparator, previous, next, *member);\\
  return(*member!=NULL);\\
 }" 51679 . 51801) (INT "int" 51804 . 51807) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 51808 . 51814) (symbol "type" 51816 . 51820)) 51808 . 51820) (symbol "_is_member" 51822 . 51832)) 51808 . 51832) (semantic-list "(type *list, type *elem)" 51832 . 51856) (semantic-list "{\\
   int result;\\
   SGLIB_DL_LIST_IS_MEMBER(type, list, elem, previous, next, result);\\
   return(result);\\
 }" 51857 . 51969) (symbol "type" 51972 . 51976) (punctuation "*" 51977 . 51978) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 51978 . 51984) (symbol "type" 51986 . 51990)) 51978 . 51990) (symbol "_find_member" 51992 . 52004)) 51978 . 52004) (semantic-list "(type *list, type *elem)" 52004 . 52028) (semantic-list "{\\
   type *result;\\
   SGLIB_DL_LIST_FIND_MEMBER(type, list, elem, comparator, previous, next, result);\\
   return(result);\\
 }" 52029 . 52157) (symbol "type" 52160 . 52164) (punctuation "*" 52165 . 52166) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 52166 . 52172) (symbol "type" 52174 . 52178)) 52166 . 52178) (symbol "_get_first" 52180 . 52190)) 52166 . 52190) (semantic-list "(type *list)" 52190 . 52202) (semantic-list "{\\
   type *result;\\
   SGLIB_DL_LIST_GET_FIRST(type, list, previous, next, result);\\
   return(result);\\
 }" 52203 . 52311) (symbol "type" 52314 . 52318) (punctuation "*" 52319 . 52320) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 52320 . 52326) (symbol "type" 52328 . 52332)) 52320 . 52332) (symbol "_get_last" 52334 . 52343)) 52320 . 52343) (semantic-list "(type *list)" 52343 . 52355) (semantic-list "{\\
   type *result;\\
   SGLIB_DL_LIST_GET_LAST(type, list, previous, next, result);\\
   return(result);\\
 }" 52356 . 52463) (VOID "void" 52466 . 52470) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 52471 . 52477) (symbol "type" 52479 . 52483)) 52471 . 52483) (symbol "_sort" 52485 . 52490)) 52471 . 52490) (semantic-list "(type **list)" 52490 . 52503) (semantic-list "{\\
   SGLIB_DL_LIST_SORT(type, *list, comparator, previous, next);\\
 }" 52504 . 52574) (INT "int" 52577 . 52580) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 52581 . 52587) (symbol "type" 52589 . 52593)) 52581 . 52593) (symbol "_len" 52595 . 52599)) 52581 . 52599) (semantic-list "(type *list)" 52599 . 52611) (semantic-list "{\\
   int res;\\
   SGLIB_DL_LIST_LEN(type, list, previous, next, res);\\
   return(res);\\
 }" 52612 . 52703) (VOID "void" 52706 . 52710) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 52711 . 52717) (symbol "type" 52719 . 52723)) 52711 . 52723) (symbol "_reverse" 52725 . 52733)) 52711 . 52733) (semantic-list "(type **list)" 52733 . 52746) (semantic-list "{\\
   SGLIB_DL_LIST_REVERSE(type, *list, previous, next);\\
 }" 52747 . 52808) (symbol "type" 52814 . 52818) (punctuation "*" 52819 . 52820) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 52820 . 52826) (symbol "type" 52828 . 52832)) 52820 . 52832) (symbol "_it_init_on_equal" 52834 . 52851)) 52820 . 52851) (semantic-list "(struct sglib_##type##_iterator *it, type *list, int (*subcomparator)(type *, type *), type *equalto)" 52851 . 52952) (semantic-list "{\\
   it->subcomparator = subcomparator;\\
   it->equalto = equalto;\\
   it->prevelem = list;\\
   it->nextelem = list;\\
   if (list != NULL) it->nextelem = list->next;\\
   return(sglib_##type##_it_next(it));\\
 }" 52953 . 53163) (symbol "type" 53166 . 53170) (punctuation "*" 53171 . 53172) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 53172 . 53178) (symbol "type" 53180 . 53184)) 53172 . 53184) (symbol "_it_init" 53186 . 53194)) 53172 . 53194) (semantic-list "(struct sglib_##type##_iterator *it, type *list)" 53194 . 53242) (semantic-list "{\\
   return(sglib_##type##_it_init_on_equal(it, list, NULL, NULL));\\
 }" 53243 . 53315) (symbol "type" 53318 . 53322) (punctuation "*" 53323 . 53324) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 53324 . 53330) (symbol "type" 53332 . 53336)) 53324 . 53336) (symbol "_it_current" 53338 . 53349)) 53324 . 53349) (semantic-list "(struct sglib_##type##_iterator *it)" 53349 . 53385) (semantic-list "{\\
   return(it->currentelem);\\
 }" 53386 . 53420) (symbol "type" 53423 . 53427) (punctuation "*" 53428 . 53429) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 53429 . 53435) (symbol "type" 53437 . 53441)) 53429 . 53441) (symbol "_it_next" 53443 . 53451)) 53429 . 53451) (semantic-list "(struct sglib_##type##_iterator *it)" 53451 . 53487) (semantic-list "{\\
   type *ce, *eq;\\
   int  (*scp)(type *, type *);\\
   ce = it->prevelem;\\
   it->prevelem = NULL;\\
   if (it->subcomparator != NULL) {\\
	 eq = it->equalto; \\
     scp = it->subcomparator;\\
     while (ce!=NULL && scp(eq, ce)!=0) ce = ce->previous;\\
   }\\
   if (ce != NULL) {\\
     it->prevelem = ce->previous;\\
   } else {\\
     ce = it->nextelem;\\
     it->nextelem = NULL;\\
     if (it->subcomparator != NULL) {\\
	   eq = it->equalto; \\
       scp = it->subcomparator;\\
       while (ce!=NULL && scp(ce, eq)!=0) ce = ce->next;\\
     }\\
     if (ce != NULL) it->nextelem = ce->next;\\
   }\\
   it->currentelem = ce;\\
   return(ce);\\
 }" 53488 . 54128)))
          ("SGLIB_LIST_DELETE_IF_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "next" "member") 12399 . 12443) . ((semantic-list "{\\
  type **_p_;\\
  for(_p_ = &(list); *_p_!=NULL && comparator((*_p_), (elem)) != 0; _p_= &(*_p_)->next) ;\\
  (member) = *_p_;\\
  if (*_p_ != NULL) {\\
    *_p_ = (*_p_)->next;\\
  }\\
}" 12444 . 12628)))
          ("SGLIB_SORTED_LIST_FIND_MEMBER_OR_PLACE" (spp-arg-list ("type" "list" "elem" "comparator" "next" "comparator_result" "member_ptr") 16797 . 16864) . ((semantic-list "{\\
  (comparator_result) = -1;\\
  for((member_ptr) = &(list); \\
      *(member_ptr)!=NULL && ((comparator_result)=comparator((*member_ptr), (elem))) < 0; \\
      (member_ptr) = &(*(member_ptr))->next) ;\\
}" 16865 . 17070)))
          ("SGLIB_DL_LIST_ADD_AFTER_IF_NOT_MEMBER" (spp-arg-list ("type" "list" "elem" "comparator" "previous" "next" "member") 19325 . 19379) . ((semantic-list "{\\
  SGLIB___DL_LIST_GENERIC_ADD_IF_NOT_MEMBER(type, list, elem, comparator, previous, next, member, SGLIB_DL_LIST_ADD_AFTER);\\
}" 19380 . 19509)))
          ("SGLIB_DL_LIST_GET_LAST" (spp-arg-list ("type" "list" "previous" "next" "result") 22470 . 22506) . ((semantic-list "{\\
  type *_dll_;\\
  _dll_ = (list);\\
  if (_dll_ != NULL) {\\
    for(; _dll_->next!=NULL; _dll_=_dll_->next) ;\\
  }\\
  (result) = _dll_;\\
}" 22507 . 22647)))
          ("SGLIB_DEFINE_HEAP_FUNCTIONS" (spp-arg-list ("heap_type" "elem_type" "afield" "ifield" "dim" "comparator" "elem_exchanger") 31348 . 31419) . 
              ((VOID "void" 31423 . 31427) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 31428 . 31434) (symbol "heap_type" 31436 . 31445)) 31428 . 31445) (symbol "_init" 31447 . 31452)) 31428 . 31452) (semantic-list "(heap_type *q)" 31452 . 31466) (semantic-list "{\\
  SGLIB_HEAP_INIT(elem_type, q->afield, q->ifield);\\
 }" 31467 . 31525) (INT "int" 31528 . 31531) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 31532 . 31538) (symbol "heap_type" 31540 . 31549)) 31532 . 31549) (symbol "_is_empty" 31551 . 31560)) 31532 . 31560) (semantic-list "(heap_type *q)" 31560 . 31574) (semantic-list "{\\
  return(SGLIB_HEAP_IS_EMPTY(elem_type, q->afield, q->ifield));\\
 }" 31575 . 31645) (INT "int" 31648 . 31651) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 31652 . 31658) (symbol "heap_type" 31660 . 31669)) 31652 . 31669) (symbol "_is_full" 31671 . 31679)) 31652 . 31679) (semantic-list "(heap_type *q)" 31679 . 31693) (semantic-list "{\\
  return(SGLIB_HEAP_IS_FULL(elem_type, q->afield, q->ifield));\\
 }" 31694 . 31763) (symbol "elem_type" 31766 . 31775) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 31776 . 31782) (symbol "heap_type" 31784 . 31793)) 31776 . 31793) (symbol "_first_element" 31795 . 31809)) 31776 . 31809) (semantic-list "(heap_type *q)" 31809 . 31823) (semantic-list "{\\
  return(SGLIB_HEAP_FIRST_ELEMENT(elem_type, q->afield, q->ifield));\\
 }" 31824 . 31899) (symbol "elem_type" 31902 . 31911) (punctuation "*" 31912 . 31913) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 31913 . 31919) (symbol "heap_type" 31921 . 31930)) 31913 . 31930) (symbol "_first_element_ptr" 31932 . 31950)) 31913 . 31950) (semantic-list "(heap_type *q)" 31950 . 31964) (semantic-list "{\\
  return(& SGLIB_HEAP_FIRST_ELEMENT(elem_type, q->afield, q->ifield));\\
 }" 31965 . 32042) (VOID "void" 32045 . 32049) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 32050 . 32056) (symbol "heap_type" 32058 . 32067)) 32050 . 32067) (symbol "_add_next" 32069 . 32078)) 32050 . 32078) (semantic-list "(heap_type *q)" 32078 . 32092) (semantic-list "{\\
  SGLIB_HEAP_ADD_NEXT(elem_type, q->afield, q->ifield, dim, comparator, elem_exchanger);\\
 }" 32093 . 32188) (VOID "void" 32191 . 32195) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 32196 . 32202) (symbol "heap_type" 32204 . 32213)) 32196 . 32213) (symbol "_add" 32215 . 32219)) 32196 . 32219) (semantic-list "(heap_type *q, elem_type elem)" 32219 . 32249) (semantic-list "{\\
  SGLIB_HEAP_ADD(elem_type, q->afield, elem, q->ifield, dim, comparator, elem_exchanger);\\
 }" 32250 . 32346) (VOID "void" 32349 . 32353) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 32354 . 32360) (symbol "heap_type" 32362 . 32371)) 32354 . 32371) (symbol "_delete_first" 32373 . 32386)) 32354 . 32386) (semantic-list "(heap_type *q)" 32386 . 32400) (semantic-list "{\\
  SGLIB_HEAP_DELETE_FIRST(elem_type, q->afield, q->ifield, dim, comparator, elem_exchanger);\\
 }" 32401 . 32500) (VOID "void" 32503 . 32507) (spp-symbol-merge ((spp-symbol-merge ((symbol "sglib_" 32508 . 32514) (symbol "heap_type" 32516 . 32525)) 32508 . 32525) (symbol "_delete" 32527 . 32534)) 32508 . 32534) (semantic-list "(heap_type *q)" 32534 . 32548) (semantic-list "{\\
  SGLIB_HEAP_DELETE_FIRST(elem_type, q->afield, q->ifield, dim, comparator, elem_exchanger);\\
 }" 32549 . 32648)))
          )
))
  :file "!home!amit!Dropbox!Work!codes!c!sglib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
