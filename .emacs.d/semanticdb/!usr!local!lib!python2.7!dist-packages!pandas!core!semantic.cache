;; Object core/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "core/"
  :tables
  (list
    (semanticdb-table "groupby.py"
      :major-mode 'python-mode
      :tags 
        '( ("types" include nil nil [1 13])
            ("functools" include nil nil [14 41])
            ("numpy" include nil nil [42 60])
            ("datetime" include nil nil [61 76])
            ("collections" include nil nil [77 95])
            ("" code nil nil [122 202])
            ("pandas" include nil nil [203 228])
            ("pandas.core.base" include nil nil [230 271])
            ("pandas.core.categorical" include nil nil [272 319])
            ("pandas.core.frame" include nil nil [320 359])
            ("pandas.core.generic" include nil nil [360 399])
            ("pandas.core.index" include nil nil [400 478])
            ("pandas.core.internals" include nil nil [479 537])
            ("pandas.core.series" include nil nil [538 575])
            ("pandas.core.panel" include nil nil [576 611])
            ("pandas.util.decorators" include nil nil [612 687])
            ("pandas.core.algorithms" include nil nil [688 726])
            ("pandas.core.common" include nil nil [727 759])
            ("" code nil nil [790 1129])
            ("pandas.core.config" include nil nil [1130 1175])
            ("pandas.lib" include nil nil [1176 1200])
            ("pandas.lib" include nil nil [1201 1233])
            ("pandas.tslib" include nil nil [1234 1262])
            ("pandas.algos" include nil nil [1263 1292])
            ("pandas.hashtable" include nil nil [1293 1325])
            ("_agg_doc" variable nil nil [1327 1941])
            ("_plotting_methods" variable nil nil [2051 2109])
            ("_common_apply_whitelist" code nil nil [2111 2562])
            ("_series_apply_whitelist" code nil nil [2564 2746])
            ("_dataframe_apply_whitelist" code nil nil [2748 2842])
            ("GroupByError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2880 2884]))                  
                :type "class")
                nil [2845 2885])
            ("DataError" type
               (:superclasses ("GroupByError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2922 2926]))                  
                :type "class")
                nil [2887 2927])
            ("SpecificationError" type
               (:superclasses ("GroupByError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2973 2977]))                  
                :type "class")
                nil [2929 2978])
            ("_groupby_function" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3002 3006])
                ("alias" variable nil (reparse-symbol function_parameters) [3008 3013])
                ("npfunc" variable nil (reparse-symbol function_parameters) [3015 3021])
                ("numeric_only" variable nil (reparse-symbol function_parameters) [3023 3035])
                ("_convert" variable nil (reparse-symbol function_parameters) [3064 3072]))              ) nil [2980 3602])
            ("_first_compat" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3622 3623])
                ("axis" variable nil (reparse-symbol function_parameters) [3625 3629]))              ) nil [3604 3886])
            ("_last_compat" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3905 3906])
                ("axis" variable nil (reparse-symbol function_parameters) [3908 3912]))              ) nil [3888 4167])
            ("_count_compat" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4187 4188])
                ("axis" variable nil (reparse-symbol function_parameters) [4190 4194]))              ) nil [4169 4261])
            ("Grouper" type
               (:documentation "
    A Grouper allows the user to specify a groupby instruction for a target object

    This specification will select a column via the key parameter, or if the level and/or
    axis parameters are given, a level of the index of the target object.

    These are local specifications and will override 'global' settings, that is the parameters
    axis and level which are passed to the groupby itself.

    Parameters
    ----------
    key : string, defaults to None
        groupby key, which selects the grouping column of the target
    level : name/number, defaults to None
        the level for the target index
    freq : string / freqency object, defaults to None
        This will groupby the specified frequency if the target selection (via key or level) is
        a datetime-like object
    axis : number/name of the axis, defaults to 0
    sort : boolean, default to False
        whether to sort the resulting labels

    additional kwargs to control time-like groupers (when freq is passed)

    closed : closed end of interval; left or right
    label : interval boundary to use for labeling; left or right
    convention : {'start', 'end', 'e', 's'}
        If grouper is PeriodIndex

    Returns
    -------
    A specification for a groupby instruction

    Examples
    --------
    >>> df.groupby(Grouper(key='A')) : syntatic sugar for df.groupby('A')
    >>> df.groupby(Grouper(key='date',freq='60s')) : specify a resample on the column 'date'
    >>> df.groupby(Grouper(level='date',freq='60s',axis=1)) :
        specify a resample on the level 'date' on the columns axis with a frequency of 60s

    "
                :superclasses ("object")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [5939 5942])
                        ("args" variable nil (reparse-symbol function_parameters) [5944 5949])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [5951 5959]))                      ) (reparse-symbol indented_block_body) [5927 6143])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6229 6241])
                            ("self" variable nil (reparse-symbol indented_block_body) [6250 6266])
                            ("self" variable nil (reparse-symbol indented_block_body) [6275 6289])
                            ("self" variable nil (reparse-symbol indented_block_body) [6298 6312])
                            ("self" variable nil (reparse-symbol indented_block_body) [6321 6335])
                            ("self" variable nil (reparse-symbol indented_block_body) [6345 6362])
                            ("self" variable nil (reparse-symbol indented_block_body) [6371 6384])
                            ("self" variable nil (reparse-symbol indented_block_body) [6393 6410])
                            ("self" variable nil (reparse-symbol indented_block_body) [6419 6435])
                            ("self" variable nil (reparse-symbol indented_block_body) [6444 6461]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6161 6165])
                            ("key" variable nil (reparse-symbol function_parameters) [6167 6170])
                            ("level" variable nil (reparse-symbol function_parameters) [6177 6182])
                            ("freq" variable nil (reparse-symbol function_parameters) [6189 6193])
                            ("axis" variable nil (reparse-symbol function_parameters) [6200 6204])
                            ("sort" variable nil (reparse-symbol function_parameters) [6208 6212]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6148 6462])
                    ("ax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6488 6492]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6467 6523])
                    ("_get_grouper" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6545 6549])
                            ("obj" variable nil (reparse-symbol function_parameters) [6551 6554]))                          
                        :documentation "
        Parameters
        ----------
        obj : the subject object

        Returns
        -------
        a tuple of binner, grouper, obj (possibly sorted)
        ")
                        (reparse-symbol indented_block_body) [6528 7015])
                    ("_set_grouper" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7037 7041])
                            ("obj" variable nil (reparse-symbol function_parameters) [7043 7046])
                            ("sort" variable nil (reparse-symbol function_parameters) [7048 7052]))                          
                        :documentation "
        given an object and the specifcations, setup the internal grouper for this particular specification

        Parameters
        ----------
        obj : the subject object

        ")
                        (reparse-symbol indented_block_body) [7020 8604])
                    ("_get_binner_for_grouping" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8638 8642])
                            ("obj" variable nil (reparse-symbol function_parameters) [8644 8647]))                          )
                        (reparse-symbol indented_block_body) [8609 8684])
                    ("groups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8714 8718]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8689 8756]))                  
                :type "class")
                nil [4262 8756])
            ("GroupBy" type
               (:documentation "
    Class for grouping and aggregating relational data. See aggregate,
    transform, and apply functions on this object.

    It's easiest to use obj.groupby(...) to use GroupBy, but you can also do:

    ::

        grouped = groupby(obj, ...)

    Parameters
    ----------
    obj : pandas object
    axis : int, default 0
    level : int, default None
        Level of MultiIndex
    groupings : list of Grouping objects
        Most users should ignore this
    exclusions : array-like, optional
        List of columns to exclude
    name : string
        Most users should ignore this

    Notes
    -----
    After grouping, see aggregate, apply, and transform functions. Here are
    some other brief notes about usage. When grouping by multiple groups, the
    result index will be a MultiIndex (hierarchical) by default.

    Iteration produces (key, group) tuples, i.e. chunking the data by group. So
    you can write code like:

    ::

        grouped = obj.groupby(keys, axis=axis)
        for key, group in grouped:
            # do something with the data

    Function calls on GroupBy, if not specially implemented, \"dispatch\" to the
    grouped data. So if you group a DataFrame and wish to invoke the std()
    method on each group, you can simply do:

    ::

        df.groupby(mapper).std()

    rather than

    ::

        df.groupby(mapper).aggregate(np.std)

    You can pass arguments to these \"wrapped\" functions, too.

    See the online documentation for full exposition on these topics and much
    more

    Returns
    -------
    **Attributes**
    groups : dict
        {group name -> group labels}
    len(grouped) : int
        Number of groups
    "
                :superclasses ("PandasObject")
                :members 
                  ( ("_apply_whitelist" variable nil (reparse-symbol indented_block_body) [10493 10535])
                    ("_internal_names" variable nil (reparse-symbol indented_block_body) [10540 10568])
                    ("_internal_names_set" variable nil (reparse-symbol indented_block_body) [10573 10615])
                    ("_group_selection" variable nil (reparse-symbol indented_block_body) [10620 10643])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10852 10879])
                            ("if" code nil (reparse-symbol indented_block_body) [10889 10957])
                            ("self" variable nil (reparse-symbol indented_block_body) [10966 10984])
                            ("if" code nil (reparse-symbol indented_block_body) [10994 11233])
                            ("self" variable nil (reparse-symbol indented_block_body) [11242 11266])
                            ("self" variable nil (reparse-symbol indented_block_body) [11275 11291])
                            ("self" variable nil (reparse-symbol indented_block_body) [11300 11316])
                            ("self" variable nil (reparse-symbol indented_block_body) [11325 11353])
                            ("self" variable nil (reparse-symbol indented_block_body) [11362 11384])
                            ("if" code nil (reparse-symbol indented_block_body) [11394 11564])
                            ("self" variable nil (reparse-symbol indented_block_body) [11573 11587])
                            ("self" variable nil (reparse-symbol indented_block_body) [11596 11634])
                            ("self" variable nil (reparse-symbol indented_block_body) [11643 11665])
                            ("set" code nil (reparse-symbol indented_block_body) [11727 11732]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10662 10666])
                            ("obj" variable nil (reparse-symbol function_parameters) [10668 10671])
                            ("keys" variable nil (reparse-symbol function_parameters) [10673 10677])
                            ("axis" variable nil (reparse-symbol function_parameters) [10684 10688])
                            ("level" variable nil (reparse-symbol function_parameters) [10692 10697])
                            ("grouper" variable nil (reparse-symbol function_parameters) [10721 10728])
                            ("exclusions" variable nil (reparse-symbol function_parameters) [10735 10745])
                            ("selection" variable nil (reparse-symbol function_parameters) [10752 10761])
                            ("as_index" variable nil (reparse-symbol function_parameters) [10768 10776])
                            ("sort" variable nil (reparse-symbol function_parameters) [10800 10804])
                            ("group_keys" variable nil (reparse-symbol function_parameters) [10811 10821])
                            ("squeeze" variable nil (reparse-symbol function_parameters) [10828 10835]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10649 11733])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11750 11754]))                          )
                        (reparse-symbol indented_block_body) [11738 11790])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11811 11815]))                          )
                        (reparse-symbol indented_block_body) [11795 11910])
                    ("groups" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11940 11944]))                          
                        :documentation " dict {group name -> group labels} ")
                        (reparse-symbol indented_block_body) [11915 12032])
                    ("ngroups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12063 12067]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12037 12106])
                    ("indices" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12137 12141]))                          
                        :documentation " dict {group name -> group indices} ")
                        (reparse-symbol indented_block_body) [12111 12231])
                    ("_get_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12251 12255])
                            ("name" variable nil (reparse-symbol function_parameters) [12257 12261]))                          
                        :documentation " safe get index, translate keys for datelike to underlying repr ")
                        (reparse-symbol indented_block_body) [12236 13584])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13612 13616]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13589 13740])
                    ("_selection_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13779 13783]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13745 13940])
                    ("_selected_obj" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13983 13987]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13945 14251])
                    ("_set_selection_from_grouper" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14288 14292]))                          
                        :documentation " we may need create a selection if we have non-level groupers ")
                        (reparse-symbol indented_block_body) [14256 14756])
                    ("_set_result_index_ordered" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14791 14795])
                            ("result" variable nil (reparse-symbol function_parameters) [14797 14803]))                          )
                        (reparse-symbol indented_block_body) [14761 15350])
                    ("_local_dir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15370 15374]))                          )
                        (reparse-symbol indented_block_body) [15355 15457])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15478 15482])
                            ("attr" variable nil (reparse-symbol function_parameters) [15484 15488]))                          )
                        (reparse-symbol indented_block_body) [15462 15852])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15873 15877])
                            ("key" variable nil (reparse-symbol function_parameters) [15879 15882]))                          )
                        (reparse-symbol indented_block_body) [15857 15948])
                    ("_make_wrapper" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15971 15975])
                            ("name" variable nil (reparse-symbol function_parameters) [15977 15981]))                          )
                        (reparse-symbol indented_block_body) [15953 18341])
                    ("get_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18360 18364])
                            ("name" variable nil (reparse-symbol function_parameters) [18366 18370])
                            ("obj" variable nil (reparse-symbol function_parameters) [18372 18375]))                          
                        :documentation "
        Constructs NDFrame from group with provided name

        Parameters
        ----------
        name : object
            the name of the group to get as a DataFrame
        obj : NDFrame, default None
            the NDFrame to take the DataFrame out of.  If
            it is None, the object groupby was called on will
            be used

        Returns
        -------
        group : type of obj
        ")
                        (reparse-symbol indented_block_body) [18346 18978])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18996 19000]))                          
                        :documentation "
        Groupby iterator

        Returns
        -------
        Generator yielding sequence of (name, subsetted object)
        for each group
        ")
                        (reparse-symbol indented_block_body) [18983 19239])
                    ("apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19254 19258])
                            ("func" variable nil (reparse-symbol function_parameters) [19260 19264])
                            ("args" variable nil (reparse-symbol function_parameters) [19266 19271])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19273 19281]))                          
                        :documentation "
        Apply function and combine results together in an intelligent way. The
        split-apply-combine combination rules attempt to be as common sense
        based as possible. For example:

        case 1:
        group DataFrame
        apply aggregation function (f(chunk) -> Series)
        yield DataFrame, with group axis having group labels

        case 2:
        group DataFrame
        apply transform function ((f(chunk) -> DataFrame with same indexes)
        yield DataFrame with resulting chunks glued together

        case 3:
        group Series
        apply function with f(chunk) -> DataFrame
        yield DataFrame with result of chunks glued together

        Parameters
        ----------
        func : function

        Notes
        -----
        See online documentation for full exposition on how to use apply.

        In the current implementation apply calls func twice on the
        first group to decide whether it can take a fast or slow code
        path. This can lead to unexpected behavior if func has
        side-effects, as they will take effect twice for the first
        group.


        See also
        --------
        aggregate, transform

        Returns
        -------
        applied : type depending on grouped object and function
        ")
                        (reparse-symbol indented_block_body) [19244 20899])
                    ("_python_apply_general" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20930 20934])
                            ("f" variable nil (reparse-symbol function_parameters) [20936 20937]))                          )
                        (reparse-symbol indented_block_body) [20904 21199])
                    ("aggregate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21218 21222])
                            ("func" variable nil (reparse-symbol function_parameters) [21224 21228])
                            ("args" variable nil (reparse-symbol function_parameters) [21230 21235])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21237 21245]))                          )
                        (reparse-symbol indented_block_body) [21204 21282])
                    ("" code nil (reparse-symbol indented_block_body) [21296 21306])
                    ("agg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21319 21323])
                            ("func" variable nil (reparse-symbol function_parameters) [21325 21329])
                            ("args" variable nil (reparse-symbol function_parameters) [21331 21336])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21338 21346]))                          )
                        (reparse-symbol indented_block_body) [21311 21402])
                    ("_iterate_slices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21427 21431]))                          )
                        (reparse-symbol indented_block_body) [21407 21478])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21497 21501])
                            ("func" variable nil (reparse-symbol function_parameters) [21503 21507])
                            ("args" variable nil (reparse-symbol function_parameters) [21509 21514])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21516 21524]))                          )
                        (reparse-symbol indented_block_body) [21483 21561])
                    ("mean" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21575 21579]))                          
                        :documentation "
        Compute mean of groups, excluding missing values

        For multiple groupings, the result index will be a MultiIndex
        ")
                        (reparse-symbol indented_block_body) [21566 22035])
                    ("median" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22051 22055]))                          
                        :documentation "
        Compute median of groups, excluding missing values

        For multiple groupings, the result index will be a MultiIndex
        ")
                        (reparse-symbol indented_block_body) [22040 22617])
                    ("std" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22630 22634])
                            ("ddof" variable nil (reparse-symbol function_parameters) [22636 22640]))                          
                        :documentation "
        Compute standard deviation of groups, excluding missing values

        For multiple groupings, the result index will be a MultiIndex
        ")
                        (reparse-symbol indented_block_body) [22622 22898])
                    ("var" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22911 22915])
                            ("ddof" variable nil (reparse-symbol function_parameters) [22917 22921]))                          
                        :documentation "
        Compute variance of groups, excluding missing values

        For multiple groupings, the result index will be a MultiIndex
        ")
                        (reparse-symbol indented_block_body) [22903 23306])
                    ("sem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23319 23323])
                            ("ddof" variable nil (reparse-symbol function_parameters) [23325 23329]))                          
                        :documentation "
        Compute standard error of the mean of groups, excluding missing values

        For multiple groupings, the result index will be a MultiIndex
        ")
                        (reparse-symbol indented_block_body) [23311 23565])
                    ("size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23579 23583]))                          
                        :documentation "
        Compute group sizes

        ")
                        (reparse-symbol indented_block_body) [23570 23674])
                    ("sum" variable nil (reparse-symbol indented_block_body) [23679 23724])
                    ("prod" variable nil (reparse-symbol indented_block_body) [23729 23778])
                    ("min" variable nil (reparse-symbol indented_block_body) [23783 23848])
                    ("max" variable nil (reparse-symbol indented_block_body) [23853 23918])
                    ("first" variable nil (reparse-symbol indented_block_body) [23923 24046])
                    ("last" variable nil (reparse-symbol indented_block_body) [24051 24169])
                    ("_count" variable nil (reparse-symbol indented_block_body) [24174 24285])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24301 24305])
                            ("axis" variable nil (reparse-symbol function_parameters) [24307 24311]))                          )
                        (reparse-symbol indented_block_body) [24291 24361])
                    ("ohlc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24375 24379]))                          
                        :documentation "
        Compute sum of values, excluding missing values
        For multiple groupings, the result index will be a MultiIndex
        ")
                        (reparse-symbol indented_block_body) [24366 24632])
                    ("nth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24645 24649])
                            ("n" variable nil (reparse-symbol function_parameters) [24651 24652])
                            ("dropna" variable nil (reparse-symbol function_parameters) [24654 24660]))                          
                        :documentation "
        Take the nth row from each group if n is an int, or a subset of rows
        if n is a list of ints.

        If dropna, will take the nth non-null row, dropna is either
        Truthy (if a Series) or 'all', 'any' (if a DataFrame); this is equivalent
        to calling dropna(how=dropna) before the groupby.

        Parameters
        ----------
        n : int or list of ints
            a single nth value for the row or a list of nth values
        dropna : None or str, optional
            apply the specified dropna operation before counting which row is
            the nth row. Needs to be None, 'any' or 'all'

        Examples
        --------
        >>> df = DataFrame([[1, np.nan], [1, 4], [5, 6]], columns=['A', 'B'])
        >>> g = df.groupby('A')
        >>> g.nth(0)
           A   B
        0  1 NaN
        2  5   6
        >>> g.nth(1)
           A  B
        1  1  4
        >>> g.nth(-1)
           A  B
        1  1  4
        2  5  6
        >>> g.nth(0, dropna='any')
           B
        A
        1  4
        5  6
        >>> g.nth(1, dropna='any')  # NaNs denote group exhausted when using dropna
            B
        A
        1 NaN
        5 NaN

        ")
                        (reparse-symbol indented_block_body) [24637 29563])
                    ("cumcount" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29581 29585])
                            ("ascending" variable nil (reparse-symbol function_parameters) [29587 29596]))                          
                        :documentation "
        Number each item in each group from 0 to the length of that group - 1.

        Essentially this is equivalent to

        >>> self.apply(lambda x: Series(np.arange(len(x)), x.index))

        Parameters
        ----------
        ascending : bool, default True
            If False, number in reverse, from length of group - 1 to 0.

        Examples
        --------

        >>> df = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']],
        ...                   columns=['A'])
        >>> df
           A
        0  a
        1  a
        2  a
        3  b
        4  b
        5  a
        >>> df.groupby('A').cumcount()
        0    0
        1    1
        2    2
        3    0
        4    1
        5    3
        dtype: int64
        >>> df.groupby('A').cumcount(ascending=False)
        0    3
        1    2
        2    1
        3    1
        4    0
        5    0
        dtype: int64

        ")
                        (reparse-symbol indented_block_body) [29568 30734])
                    ("head" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30748 30752])
                            ("n" variable nil (reparse-symbol function_parameters) [30754 30755]))                          
                        :documentation "
        Returns first n rows of each group.

        Essentially equivalent to ``.apply(lambda x: x.head(n))``,
        except ignores as_index flag.

        Examples
        --------

        >>> df = DataFrame([[1, 2], [1, 4], [5, 6]],
                            columns=['A', 'B'])
        >>> df.groupby('A', as_index=False).head(1)
           A  B
        0  1  2
        2  5  6
        >>> df.groupby('A').head(1)
           A  B
        0  1  2
        2  5  6

        ")
                        (reparse-symbol indented_block_body) [30739 31382])
                    ("tail" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31396 31400])
                            ("n" variable nil (reparse-symbol function_parameters) [31402 31403]))                          
                        :documentation "
        Returns last n rows of each group

        Essentially equivalent to ``.apply(lambda x: x.tail(n))``,
        except ignores as_index flag.

        Examples
        --------

        >>> df = DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]],
                            columns=['A', 'B'])
        >>> df.groupby('A').tail(1)
           A  B
        1  a  2
        3  b  2
        >>> df.groupby('A').head(1)
           A  B
        0  a  1
        2  b  1

        ")
                        (reparse-symbol indented_block_body) [31387 32125])
                    ("_cumcount_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32150 32154])
                            ("arr" variable nil (reparse-symbol function_parameters) [32156 32159])
                            ("ascending" variable nil (reparse-symbol function_parameters) [32166 32175]))                          
                        :documentation "
        arr is where cumcount gets its values from

        note: this is currently implementing sort=False (though the default is sort=True)
              for groupby in general
        ")
                        (reparse-symbol indented_block_body) [32130 33032])
                    ("_index_with_as_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33062 33066])
                            ("b" variable nil (reparse-symbol function_parameters) [33068 33069]))                          
                        :documentation "
        Take boolean mask of index to be returned from apply, if as_index=True

        ")
                        (reparse-symbol indented_block_body) [33037 33698])
                    ("_try_cast" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33717 33721])
                            ("result" variable nil (reparse-symbol function_parameters) [33723 33729])
                            ("obj" variable nil (reparse-symbol function_parameters) [33731 33734]))                          
                        :documentation "
        try to cast the result to our obj original type,
        we may have roundtripped thru object in the mean-time

        ")
                        (reparse-symbol indented_block_body) [33703 34111])
                    ("_cython_agg_general" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34140 34144])
                            ("how" variable nil (reparse-symbol function_parameters) [34146 34149])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [34151 34163]))                          )
                        (reparse-symbol indented_block_body) [34116 34745])
                    ("_python_agg_general" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34774 34778])
                            ("func" variable nil (reparse-symbol function_parameters) [34780 34784])
                            ("args" variable nil (reparse-symbol function_parameters) [34786 34791])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34793 34801]))                          )
                        (reparse-symbol indented_block_body) [34750 35793])
                    ("_wrap_applied_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35823 35827])
                            ("args" variable nil (reparse-symbol function_parameters) [35829 35834])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35836 35844]))                          )
                        (reparse-symbol indented_block_body) [35798 35881])
                    ("_concat_objects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35906 35910])
                            ("keys" variable nil (reparse-symbol function_parameters) [35912 35916])
                            ("values" variable nil (reparse-symbol function_parameters) [35918 35924])
                            ("not_indexed_same" variable nil (reparse-symbol function_parameters) [35926 35942]))                          )
                        (reparse-symbol indented_block_body) [35886 37017])
                    ("_apply_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37040 37044])
                            ("indices" variable nil (reparse-symbol function_parameters) [37046 37053])
                            ("dropna" variable nil (reparse-symbol function_parameters) [37055 37061]))                          )
                        (reparse-symbol indented_block_body) [37022 37676]))                  
                :type "class")
                nil [8757 37676])
            ("" code nil nil [37687 37704])
            ("groupby" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [37717 37720])
                ("by" variable nil (reparse-symbol function_parameters) [37722 37724])
                ("kwds" variable nil (reparse-symbol function_parameters) [37726 37732]))              ) nil [37705 37988])
            ("_get_axes" function (:arguments 
              ( ("group" variable nil (reparse-symbol function_parameters) [38004 38009]))              ) nil [37990 38111])
            ("_is_indexed_like" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [38134 38137])
                ("axes" variable nil (reparse-symbol function_parameters) [38139 38143]))              ) nil [38113 38366])
            ("BaseGrouper" type
               (:documentation "
    This is an internal Grouper class, which actually holds the generated groups
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [38570 38635])
                            ("self, self, self, self" code nil (reparse-symbol indented_block_body) [38644 38751]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38510 38514])
                            ("axis" variable nil (reparse-symbol function_parameters) [38516 38520])
                            ("groupings" variable nil (reparse-symbol function_parameters) [38522 38531])
                            ("sort" variable nil (reparse-symbol function_parameters) [38533 38537])
                            ("group_keys" variable nil (reparse-symbol function_parameters) [38544 38554]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38497 38752])
                    ("shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38781 38785]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38757 38850])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38868 38872]))                          )
                        (reparse-symbol indented_block_body) [38855 38909])
                    ("nkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38938 38942]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38914 38980])
                    ("get_iterator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39002 39006])
                            ("data" variable nil (reparse-symbol function_parameters) [39008 39012])
                            ("axis" variable nil (reparse-symbol function_parameters) [39014 39018]))                          
                        :documentation "
        Groupby iterator

        Returns
        -------
        Generator yielding sequence of (name, subsetted object)
        for each group
        ")
                        (reparse-symbol indented_block_body) [38985 39366])
                    ("_get_splitter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39389 39393])
                            ("data" variable nil (reparse-symbol function_parameters) [39395 39399])
                            ("axis" variable nil (reparse-symbol function_parameters) [39401 39405]))                          )
                        (reparse-symbol indented_block_body) [39371 39521])
                    ("_get_group_keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39546 39550]))                          )
                        (reparse-symbol indented_block_body) [39526 39896])
                    ("apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39911 39915])
                            ("f" variable nil (reparse-symbol function_parameters) [39917 39918])
                            ("data" variable nil (reparse-symbol function_parameters) [39920 39924])
                            ("axis" variable nil (reparse-symbol function_parameters) [39926 39930]))                          )
                        (reparse-symbol indented_block_body) [39901 41042])
                    ("indices" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41079 41083]))                          
                        :documentation " dict {group name -> group indices} ")
                        (reparse-symbol indented_block_body) [41047 41440])
                    ("labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41470 41474]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [41445 41533])
                    ("levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41563 41567]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [41538 41631])
                    ("names" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41660 41664]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [41636 41721])
                    ("size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41735 41739]))                          
                        :documentation "
        Compute group sizes

        ")
                        (reparse-symbol indented_block_body) [41726 42059])
                    ("_max_groupsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42103 42107]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [42064 42420])
                    ("groups" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42456 42460]))                          
                        :documentation " dict {group name -> group labels} ")
                        (reparse-symbol indented_block_body) [42425 42781])
                    ("is_monotonic" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42823 42827]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [42786 42937])
                    ("group_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42977 42981]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [42942 43181])
                    ("_get_compressed_labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43214 43218]))                          )
                        (reparse-symbol indented_block_body) [43187 43611])
                    ("ngroups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43648 43652]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43616 43693])
                    ("recons_labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43730 43734]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43698 43945])
                    ("result_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43987 43991]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43950 44354])
                    ("get_group_levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44380 44384]))                          )
                        (reparse-symbol indented_block_body) [44359 44761])
                    ("_cython_functions" variable nil (reparse-symbol indented_block_body) [44861 45313])
                    ("_cython_arity" variable nil (reparse-symbol indented_block_body) [45319 45369])
                    ("_name_functions" variable nil (reparse-symbol indented_block_body) [45375 45395])
                    ("_get_aggregate_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45429 45433])
                            ("how" variable nil (reparse-symbol function_parameters) [45435 45438])
                            ("values" variable nil (reparse-symbol function_parameters) [45440 45446]))                          )
                        (reparse-symbol indented_block_body) [45401 46599])
                    ("aggregate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46618 46622])
                            ("values" variable nil (reparse-symbol function_parameters) [46624 46630])
                            ("how" variable nil (reparse-symbol function_parameters) [46632 46635])
                            ("axis" variable nil (reparse-symbol function_parameters) [46637 46641]))                          )
                        (reparse-symbol indented_block_body) [46604 49337])
                    ("_aggregate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49357 49361])
                            ("result" variable nil (reparse-symbol function_parameters) [49363 49369])
                            ("counts" variable nil (reparse-symbol function_parameters) [49371 49377])
                            ("values" variable nil (reparse-symbol function_parameters) [49379 49385])
                            ("agg_func" variable nil (reparse-symbol function_parameters) [49387 49395])
                            ("is_numeric" variable nil (reparse-symbol function_parameters) [49397 49407]))                          )
                        (reparse-symbol indented_block_body) [49342 49849])
                    ("agg_series" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49869 49873])
                            ("obj" variable nil (reparse-symbol function_parameters) [49875 49878])
                            ("func" variable nil (reparse-symbol function_parameters) [49880 49884]))                          )
                        (reparse-symbol indented_block_body) [49854 50049])
                    ("_aggregate_series_fast" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50081 50085])
                            ("obj" variable nil (reparse-symbol function_parameters) [50087 50090])
                            ("func" variable nil (reparse-symbol function_parameters) [50092 50096]))                          )
                        (reparse-symbol indented_block_body) [50054 50790])
                    ("_aggregate_series_pure_python" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50829 50833])
                            ("obj" variable nil (reparse-symbol function_parameters) [50835 50838])
                            ("func" variable nil (reparse-symbol function_parameters) [50840 50844]))                          )
                        (reparse-symbol indented_block_body) [50795 51549]))                  
                :type "class")
                nil [38368 51549])
            ("generate_bins_generic" function
               (:documentation "
    Generate bin edge offsets and bin labels for one array using another array
    which has bin edge values. Both arrays must be sorted.

    Parameters
    ----------
    values : array of values
    binner : a comparable array of values representing bins into which to bin
        the first array. Note, 'values' end-points must fall within 'binner'
        end-points.
    closed : which end of bin is closed; left (default), right

    Returns
    -------
    bins : array of offsets (into 'values' argument) of bins.
        Zero and last edge are excluded in result, so for instance the first
        bin is values[0:bin[0]] and the last is values[bin[-1]:]
    "
                :arguments 
                  ( ("values" variable nil (reparse-symbol function_parameters) [51577 51583])
                    ("binner" variable nil (reparse-symbol function_parameters) [51585 51591])
                    ("closed" variable nil (reparse-symbol function_parameters) [51593 51599]))                  )
                nil [51551 53169])
            ("BinGrouper" type
               (:superclasses ("BaseGrouper")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [53271 53306])
                            ("self" variable nil (reparse-symbol indented_block_body) [53315 53356])
                            ("self" variable nil (reparse-symbol indented_block_body) [53365 53405]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53219 53223])
                            ("bins" variable nil (reparse-symbol function_parameters) [53225 53229])
                            ("binlabels" variable nil (reparse-symbol function_parameters) [53231 53240])
                            ("filter_empty" variable nil (reparse-symbol function_parameters) [53242 53254]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53206 53406])
                    ("groups" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53442 53446]))                          
                        :documentation " dict {group name -> group labels} ")
                        (reparse-symbol indented_block_body) [53411 53727])
                    ("nkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53756 53760]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [53732 53780])
                    ("get_iterator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53802 53806])
                            ("data" variable nil (reparse-symbol function_parameters) [53808 53812])
                            ("axis" variable nil (reparse-symbol function_parameters) [53814 53818]))                          
                        :documentation "
        Groupby iterator

        Returns
        -------
        Generator yielding sequence of (name, subsetted object)
        for each group
        ")
                        (reparse-symbol indented_block_body) [53785 54537])
                    ("apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54552 54556])
                            ("f" variable nil (reparse-symbol function_parameters) [54558 54559])
                            ("data" variable nil (reparse-symbol function_parameters) [54561 54565])
                            ("axis" variable nil (reparse-symbol function_parameters) [54567 54571]))                          )
                        (reparse-symbol indented_block_body) [54542 55086])
                    ("indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55123 55127]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55091 55422])
                    ("group_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55462 55466]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55427 55545])
                    ("ngroups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55582 55586]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55550 55624])
                    ("result_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55666 55670]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55629 55759])
                    ("levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55789 55793]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55764 55828])
                    ("names" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55857 55861]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55833 55901])
                    ("groupings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55934 55938]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55906 55982])
                    ("size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55996 56000]))                          
                        :documentation "
        Compute group sizes

        ")
                        (reparse-symbol indented_block_body) [55987 56513])
                    ("_cython_functions" variable nil (reparse-symbol indented_block_body) [56620 57072])
                    ("_name_functions" variable nil (reparse-symbol indented_block_body) [57078 57166])
                    ("_aggregate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57187 57191])
                            ("result" variable nil (reparse-symbol function_parameters) [57193 57199])
                            ("counts" variable nil (reparse-symbol function_parameters) [57201 57207])
                            ("values" variable nil (reparse-symbol function_parameters) [57209 57215])
                            ("agg_func" variable nil (reparse-symbol function_parameters) [57217 57225])
                            ("is_numeric" variable nil (reparse-symbol function_parameters) [57227 57237]))                          )
                        (reparse-symbol indented_block_body) [57172 57599])
                    ("agg_series" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57619 57623])
                            ("obj" variable nil (reparse-symbol function_parameters) [57625 57628])
                            ("func" variable nil (reparse-symbol function_parameters) [57630 57634]))                          )
                        (reparse-symbol indented_block_body) [57604 57765]))                  
                :type "class")
                nil [53170 57765])
            ("Grouping" type
               (:documentation "
    Holds the grouping information for a single key

    Parameters
    ----------
    index : Index
    grouper :
    obj :
    name :
    level :
    in_axis : if the Grouping is a column in self.obj and hence among
        Groupby.exclusions list

    Returns
    -------
    **Attributes**:
      * indices : dict of {group -> index_list}
      * labels : ndarray, group labels
      * ids : mapping of label -> group
      * counts : array of group counts
      * group_index : unique groups
      * groups : dict of {group -> label_list}
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [58483 58499])
                            ("self" variable nil (reparse-symbol indented_block_body) [58508 58526])
                            ("self" variable nil (reparse-symbol indented_block_body) [58535 58582])
                            ("self" variable nil (reparse-symbol indented_block_body) [58591 58609])
                            ("self" variable nil (reparse-symbol indented_block_body) [58618 58634])
                            ("self" variable nil (reparse-symbol indented_block_body) [58643 58657])
                            ("self" variable nil (reparse-symbol indented_block_body) [58666 58688])
                            ("if" code nil (reparse-symbol indented_block_body) [58730 58825])
                            ("if" code nil (reparse-symbol indented_block_body) [58834 58912])
                            ("self" variable nil (reparse-symbol indented_block_body) [58944 58972])
                            ("if" code nil (reparse-symbol indented_block_body) [59123 62677])
                            ("if" code nil (reparse-symbol indented_block_body) [62772 63136]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58370 58374])
                            ("index" variable nil (reparse-symbol function_parameters) [58376 58381])
                            ("grouper" variable nil (reparse-symbol function_parameters) [58383 58390])
                            ("obj" variable nil (reparse-symbol function_parameters) [58397 58400])
                            ("name" variable nil (reparse-symbol function_parameters) [58407 58411])
                            ("level" variable nil (reparse-symbol function_parameters) [58418 58423])
                            ("sort" variable nil (reparse-symbol function_parameters) [58447 58451])
                            ("in_axis" variable nil (reparse-symbol function_parameters) [58458 58465]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [58357 63136])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63154 63158]))                          )
                        (reparse-symbol indented_block_body) [63141 63203])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63221 63225]))                          )
                        (reparse-symbol indented_block_body) [63208 63262])
                    ("_labels" variable nil (reparse-symbol indented_block_body) [63267 63281])
                    ("_group_index" variable nil (reparse-symbol indented_block_body) [63286 63305])
                    ("ngroups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63337 63341]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [63311 63381])
                    ("indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63418 63422]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [63386 63471])
                    ("labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63501 63505]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [63476 63601])
                    ("group_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63636 63640]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [63606 63746])
                    ("_make_labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63768 63772]))                          )
                        (reparse-symbol indented_block_body) [63751 64040])
                    ("groups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64076 64080]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [64045 64131]))                  
                :type "class")
                nil [57767 64131])
            ("_get_grouper" function
               (:documentation "
    create and return a BaseGrouper, which is an internal
    mapping of how to create the grouper indexers.
    This may be composed of multiple Grouping objects, indicating
    multiple groupers

    Groupers are ultimately index mappings. They can originate as:
    index mappings, keys to columns, functions, or Groupers

    Groupers enable local references to axis,level,sort, while
    the passed in axis, level, and sort are 'global'.

    This routine tries to figure of what the passing in references
    are and then creates a Grouping for each one, combined into
    a BaseGrouper.

    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [64149 64152])
                    ("key" variable nil (reparse-symbol function_parameters) [64154 64157])
                    ("axis" variable nil (reparse-symbol function_parameters) [64164 64168])
                    ("level" variable nil (reparse-symbol function_parameters) [64172 64177])
                    ("sort" variable nil (reparse-symbol function_parameters) [64184 64188]))                  )
                nil [64132 68098])
            ("_is_label_like" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [68119 68122]))              ) nil [68100 68193])
            ("_convert_grouper" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [68216 68220])
                ("grouper" variable nil (reparse-symbol function_parameters) [68222 68229]))              ) nil [68195 68698])
            ("_whitelist_method_generator" function
               (:documentation "
    Yields all GroupBy member defs for DataFrame/Series names in _whitelist.

    Parameters
    ----------
    klass - class where members are defined.  Should be Series or DataFrame

    whitelist - list of names of klass methods to be constructed

    Returns
    -------
    The generator yields a sequence of strings, each suitable for exec'ing,
    that define implementations of the named methods for DataFrameGroupBy
    or SeriesGroupBy.

    Since we don't want to override methods explicitly defined in the
    base class, any such name is skipped.
    "
                :arguments 
                  ( ("klass" variable nil (reparse-symbol function_parameters) [68731 68736])
                    ("whitelist" variable nil (reparse-symbol function_parameters) [68738 68747]))                  )
                nil [68699 70700])
            ("SeriesGroupBy" type
               (:superclasses ("GroupBy")
                :members 
                  ( ("_apply_whitelist" variable nil (reparse-symbol indented_block_body) [70804 70846])
                    ("for" code nil (reparse-symbol indented_block_body) [70851 70952])
                    ("aggregate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70971 70975])
                            ("func_or_funcs" variable nil (reparse-symbol function_parameters) [70977 70990])
                            ("args" variable nil (reparse-symbol function_parameters) [70992 70997])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [70999 71007]))                          
                        :documentation "
        Apply aggregation function or functions to groups, yielding most likely
        Series but in some cases DataFrame depending on the output of the
        aggregation function

        Parameters
        ----------
        func_or_funcs : function or list / dict of functions
            List/dict of functions will produce DataFrame with column names
            determined by the function names themselves (list) or the keys in
            the dict

        Notes
        -----
        agg is an alias for aggregate. Use it.

        Examples
        --------
        >>> series
        bar    1.0
        baz    2.0
        qot    3.0
        qux    4.0

        >>> mapper = lambda x: x[0] # first letter
        >>> grouped = series.groupby(mapper)

        >>> grouped.aggregate(np.sum)
        b    3.0
        q    7.0

        >>> grouped.aggregate([np.sum, np.mean, np.std])
           mean  std  sum
        b  1.5   0.5  3
        q  3.5   0.5  7

        >>> grouped.agg({'result' : lambda x: x.mean() / x.std(),
        ...              'total' : np.sum})
           result  total
        b  2.121   3
        q  4.95    7

        See also
        --------
        apply, transform

        Returns
        -------
        Series or DataFrame
        ")
                        (reparse-symbol indented_block_body) [70957 73269])
                    ("_aggregate_multiple_funcs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73304 73308])
                            ("arg" variable nil (reparse-symbol function_parameters) [73310 73313]))                          )
                        (reparse-symbol indented_block_body) [73274 74389])
                    ("_wrap_aggregated_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74422 74426])
                            ("output" variable nil (reparse-symbol function_parameters) [74428 74434])
                            ("names" variable nil (reparse-symbol function_parameters) [74436 74441]))                          )
                        (reparse-symbol indented_block_body) [74394 74826])
                    ("_wrap_applied_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74856 74860])
                            ("keys" variable nil (reparse-symbol function_parameters) [74862 74866])
                            ("values" variable nil (reparse-symbol function_parameters) [74868 74874])
                            ("not_indexed_same" variable nil (reparse-symbol function_parameters) [74876 74892]))                          )
                        (reparse-symbol indented_block_body) [74831 75934])
                    ("_aggregate_named" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75960 75964])
                            ("func" variable nil (reparse-symbol function_parameters) [75966 75970])
                            ("args" variable nil (reparse-symbol function_parameters) [75972 75977])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [75979 75987]))                          )
                        (reparse-symbol indented_block_body) [75939 76333])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76352 76356])
                            ("func" variable nil (reparse-symbol function_parameters) [76358 76362])
                            ("args" variable nil (reparse-symbol function_parameters) [76364 76369])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [76371 76379]))                          
                        :documentation "
        Call function producing a like-indexed Series on each group and return
        a Series with the transformed values

        Parameters
        ----------
        func : function
            To apply to each group. Should return a Series with the same index

        Examples
        --------
        >>> grouped.transform(lambda x: (x - x.mean()) / x.std())

        Returns
        -------
        transformed : Series
        ")
                        (reparse-symbol indented_block_body) [76338 78162])
                    ("_transform_fast" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78187 78191])
                            ("func" variable nil (reparse-symbol function_parameters) [78193 78197]))                          
                        :documentation "
        fast version of transform, only applicable to builtin/cythonizable functions
        ")
                        (reparse-symbol indented_block_body) [78167 78597])
                    ("filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78613 78617])
                            ("func" variable nil (reparse-symbol function_parameters) [78619 78623])
                            ("dropna" variable nil (reparse-symbol function_parameters) [78625 78631])
                            ("args" variable nil (reparse-symbol function_parameters) [78638 78643])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [78645 78653]))                          
                        :documentation "
        Return a copy of a Series excluding elements from groups that
        do not satisfy the boolean criterion specified by func.

        Parameters
        ----------
        func : function
            To apply to each group. Should return True or False.
        dropna : Drop groups that do not pass the filter. True by default;
            if False, groups that evaluate False are filled with NaNs.

        Examples
        --------
        >>> grouped.filter(lambda x: x.mean() > 0)

        Returns
        -------
        filtered : Series
        ")
                        (reparse-symbol indented_block_body) [78602 80005])
                    ("_apply_to_column_groupbys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80040 80044])
                            ("func" variable nil (reparse-symbol function_parameters) [80046 80050]))                          
                        :documentation " return a pass thru ")
                        (reparse-symbol indented_block_body) [80010 80114]))                  
                :type "class")
                nil [70701 80114])
            ("NDFrameGroupBy" type
               (:superclasses ("GroupBy")
                :members 
                  ( ("_iterate_slices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80171 80175]))                          )
                        (reparse-symbol indented_block_body) [80151 80641])
                    ("_cython_agg_general" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80670 80674])
                            ("how" variable nil (reparse-symbol function_parameters) [80676 80679])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [80681 80693]))                          )
                        (reparse-symbol indented_block_body) [80646 80851])
                    ("_wrap_agged_blocks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80879 80883])
                            ("items" variable nil (reparse-symbol function_parameters) [80885 80890])
                            ("blocks" variable nil (reparse-symbol function_parameters) [80892 80898]))                          )
                        (reparse-symbol indented_block_body) [80856 81453])
                    ("_block_agg_axis" variable nil (reparse-symbol indented_block_body) [81458 81477])
                    ("_cython_agg_blocks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81506 81510])
                            ("how" variable nil (reparse-symbol function_parameters) [81512 81515])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [81517 81529]))                          )
                        (reparse-symbol indented_block_body) [81483 82231])
                    ("_get_data_to_aggregate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82263 82267]))                          )
                        (reparse-symbol indented_block_body) [82236 82438])
                    ("_post_process_cython_aggregate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82478 82482])
                            ("obj" variable nil (reparse-symbol function_parameters) [82484 82487]))                          )
                        (reparse-symbol indented_block_body) [82443 82609])
                    ("_obj_with_exclusions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82659 82663]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [82614 82910])
                    ("" code nil (reparse-symbol indented_block_body) [82924 82934])
                    ("aggregate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82953 82957])
                            ("arg" variable nil (reparse-symbol function_parameters) [82959 82962])
                            ("args" variable nil (reparse-symbol function_parameters) [82964 82969])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [82971 82979]))                          )
                        (reparse-symbol indented_block_body) [82939 85729])
                    ("_aggregate_multiple_funcs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85764 85768])
                            ("arg" variable nil (reparse-symbol function_parameters) [85770 85773]))                          )
                        (reparse-symbol indented_block_body) [85734 86416])
                    ("_aggregate_generic" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86444 86448])
                            ("func" variable nil (reparse-symbol function_parameters) [86450 86454])
                            ("args" variable nil (reparse-symbol function_parameters) [86456 86461])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [86463 86471]))                          )
                        (reparse-symbol indented_block_body) [86421 87593])
                    ("_wrap_aggregated_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87626 87630])
                            ("output" variable nil (reparse-symbol function_parameters) [87632 87638])
                            ("names" variable nil (reparse-symbol function_parameters) [87640 87645]))                          )
                        (reparse-symbol indented_block_body) [87598 87687])
                    ("_aggregate_item_by_item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87720 87724])
                            ("func" variable nil (reparse-symbol function_parameters) [87726 87730])
                            ("args" variable nil (reparse-symbol function_parameters) [87732 87737])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [87739 87747]))                          )
                        (reparse-symbol indented_block_body) [87692 88702])
                    ("_decide_output_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88732 88736])
                            ("output" variable nil (reparse-symbol function_parameters) [88738 88744])
                            ("labels" variable nil (reparse-symbol function_parameters) [88746 88752]))                          )
                        (reparse-symbol indented_block_body) [88707 89220])
                    ("_wrap_applied_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89250 89254])
                            ("keys" variable nil (reparse-symbol function_parameters) [89256 89260])
                            ("values" variable nil (reparse-symbol function_parameters) [89262 89268])
                            ("not_indexed_same" variable nil (reparse-symbol function_parameters) [89270 89286]))                          )
                        (reparse-symbol indented_block_body) [89225 95714])
                    ("_transform_general" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95742 95746])
                            ("func" variable nil (reparse-symbol function_parameters) [95748 95752])
                            ("args" variable nil (reparse-symbol function_parameters) [95754 95759])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [95761 95769]))                          )
                        (reparse-symbol indented_block_body) [95719 97167])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97186 97190])
                            ("func" variable nil (reparse-symbol function_parameters) [97192 97196])
                            ("args" variable nil (reparse-symbol function_parameters) [97198 97203])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [97205 97213]))                          
                        :documentation "
        Call function producing a like-indexed DataFrame on each group and
        return a DataFrame having the same indexes as the original object
        filled with the transformed values

        Parameters
        ----------
        f : function
            Function to apply to each subframe

        Notes
        -----
        Each subframe is endowed the attribute 'name' in case you need to know
        which group you are working on.

        Examples
        --------
        >>> grouped = df.groupby(lambda x: mapping[x])
        >>> grouped.transform(lambda x: (x - x.mean()) / x.std())
        ")
                        (reparse-symbol indented_block_body) [97172 99618])
                    ("_define_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99641 99645])
                            ("func" variable nil (reparse-symbol function_parameters) [99647 99651])
                            ("args" variable nil (reparse-symbol function_parameters) [99653 99658])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [99660 99668]))                          )
                        (reparse-symbol indented_block_body) [99623 100161])
                    ("_choose_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100183 100187])
                            ("fast_path" variable nil (reparse-symbol function_parameters) [100189 100198])
                            ("slow_path" variable nil (reparse-symbol function_parameters) [100200 100209])
                            ("group" variable nil (reparse-symbol function_parameters) [100211 100216]))                          )
                        (reparse-symbol indented_block_body) [100166 100770])
                    ("_transform_item_by_item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100803 100807])
                            ("obj" variable nil (reparse-symbol function_parameters) [100809 100812])
                            ("wrapper" variable nil (reparse-symbol function_parameters) [100814 100821]))                          )
                        (reparse-symbol indented_block_body) [100775 101398])
                    ("filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101414 101418])
                            ("func" variable nil (reparse-symbol function_parameters) [101420 101424])
                            ("dropna" variable nil (reparse-symbol function_parameters) [101426 101432])
                            ("args" variable nil (reparse-symbol function_parameters) [101439 101444])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [101446 101454]))                          
                        :documentation "
        Return a copy of a DataFrame excluding elements from groups that
        do not satisfy the boolean criterion specified by func.

        Parameters
        ----------
        f : function
            Function to apply to each subframe. Should return True or False.
        dropna : Drop groups that do not pass the filter. True by default;
            if False, groups that evaluate False are filled with NaNs.

        Notes
        -----
        Each subframe is endowed the attribute 'name' in case you need to know
        which group you are working on.

        Examples
        --------
        >>> grouped = df.groupby(lambda x: mapping[x])
        >>> grouped.filter(lambda x: x['A'].sum() + x['B'].sum() > 0)
        ")
                        (reparse-symbol indented_block_body) [101403 103160]))                  
                :type "class")
                nil [80115 103160])
            ("DataFrameGroupBy" type
               (:superclasses ("NDFrameGroupBy")
                :members 
                  ( ("_apply_whitelist" variable nil (reparse-symbol indented_block_body) [103206 103251])
                    ("for" code nil (reparse-symbol indented_block_body) [103329 103426])
                    ("_block_agg_axis" variable nil (reparse-symbol indented_block_body) [103431 103450])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103472 103476])
                            ("key" variable nil (reparse-symbol function_parameters) [103478 103481]))                          )
                        (reparse-symbol indented_block_body) [103456 104896])
                    ("_wrap_generic_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104926 104930])
                            ("result" variable nil (reparse-symbol function_parameters) [104932 104938])
                            ("obj" variable nil (reparse-symbol function_parameters) [104940 104943]))                          )
                        (reparse-symbol indented_block_body) [104901 105375])
                    ("_get_data_to_aggregate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105407 105411]))                          )
                        (reparse-symbol indented_block_body) [105380 105561])
                    ("_insert_inaxis_grouper_inplace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105601 105605])
                            ("result" variable nil (reparse-symbol function_parameters) [105607 105613]))                          )
                        (reparse-symbol indented_block_body) [105566 105960])
                    ("_wrap_aggregated_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105993 105997])
                            ("output" variable nil (reparse-symbol function_parameters) [105999 106005])
                            ("names" variable nil (reparse-symbol function_parameters) [106007 106012]))                          )
                        (reparse-symbol indented_block_body) [105965 106645])
                    ("_wrap_agged_blocks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106673 106677])
                            ("items" variable nil (reparse-symbol function_parameters) [106679 106684])
                            ("blocks" variable nil (reparse-symbol function_parameters) [106686 106692]))                          )
                        (reparse-symbol indented_block_body) [106650 107244])
                    ("_reindex_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107269 107273])
                            ("result" variable nil (reparse-symbol function_parameters) [107275 107281]))                          
                        :documentation "
        if we have categorical groupers, then we want to make sure that
        we have a fully reindex-output to the levels. These may have not participated in
        the groupings (e.g. may have all been nan groups)

        This can re-expand the output space
        ")
                        (reparse-symbol indented_block_body) [107249 108145])
                    ("_iterate_column_groupbys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108179 108183]))                          )
                        (reparse-symbol indented_block_body) [108150 108515])
                    ("_apply_to_column_groupbys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108550 108554])
                            ("func" variable nil (reparse-symbol function_parameters) [108556 108560]))                          )
                        (reparse-symbol indented_block_body) [108520 108785]))                  
                :type "class")
                nil [103162 108785])
            ("pandas.tools.plotting" include nil nil [108786 108841])
            ("DataFrameGroupBy" variable nil nil [108842 108890])
            ("PanelGroupBy" type
               (:superclasses ("NDFrameGroupBy")
                :members 
                  ( ("_iterate_slices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108954 108958]))                          )
                        (reparse-symbol indented_block_body) [108934 109408])
                    ("aggregate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109427 109431])
                            ("arg" variable nil (reparse-symbol function_parameters) [109433 109436])
                            ("args" variable nil (reparse-symbol function_parameters) [109438 109443])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [109445 109453]))                          
                        :documentation "
        Aggregate using input function or dict of {column -> function}

        Parameters
        ----------
        arg : function or dict
            Function to use for aggregating groups. If a function, must either
            work when passed a Panel or when passed to Panel.apply. If
            pass a dict, the keys must be DataFrame column names

        Returns
        -------
        aggregated : Panel
        ")
                        (reparse-symbol indented_block_body) [109413 110062])
                    ("_wrap_generic_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110092 110096])
                            ("result" variable nil (reparse-symbol function_parameters) [110098 110104])
                            ("obj" variable nil (reparse-symbol function_parameters) [110106 110109]))                          )
                        (reparse-symbol indented_block_body) [110067 110682])
                    ("_aggregate_item_by_item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110715 110719])
                            ("func" variable nil (reparse-symbol function_parameters) [110721 110725])
                            ("args" variable nil (reparse-symbol function_parameters) [110727 110732])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [110734 110742]))                          )
                        (reparse-symbol indented_block_body) [110687 111422])
                    ("_wrap_aggregated_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111455 111459])
                            ("output" variable nil (reparse-symbol function_parameters) [111461 111467])
                            ("names" variable nil (reparse-symbol function_parameters) [111469 111474]))                          )
                        (reparse-symbol indented_block_body) [111427 111516]))                  
                :type "class")
                nil [108893 111516])
            ("NDArrayGroupBy" type
               (:superclasses ("GroupBy")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [111553 111557]))                  
                :type "class")
                nil [111518 111558])
            ("DataSplitter" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [111752 111768])
                            ("self" variable nil (reparse-symbol indented_block_body) [111777 111816])
                            ("self" variable nil (reparse-symbol indented_block_body) [111825 111847])
                            ("self" variable nil (reparse-symbol indented_block_body) [111857 111873]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111706 111710])
                            ("data" variable nil (reparse-symbol function_parameters) [111712 111716])
                            ("labels" variable nil (reparse-symbol function_parameters) [111718 111724])
                            ("ngroups" variable nil (reparse-symbol function_parameters) [111726 111733])
                            ("axis" variable nil (reparse-symbol function_parameters) [111735 111739]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [111693 111874])
                    ("slabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111911 111915]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [111879 112015])
                    ("sort_idx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112053 112057]))                          
                        :decorators 
                          ( ("cache_readonly" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [112020 112158])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112176 112180]))                          )
                        (reparse-symbol indented_block_body) [112163 112834])
                    ("_get_sorted_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112860 112864]))                          )
                        (reparse-symbol indented_block_body) [112839 112943])
                    ("_chop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112958 112962])
                            ("sdata" variable nil (reparse-symbol function_parameters) [112964 112969])
                            ("slice_obj" variable nil (reparse-symbol function_parameters) [112971 112980]))                          )
                        (reparse-symbol indented_block_body) [112948 113020])
                    ("apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113035 113039])
                            ("f" variable nil (reparse-symbol function_parameters) [113041 113042]))                          )
                        (reparse-symbol indented_block_body) [113025 113079]))                  
                :type "class")
                nil [111660 113079])
            ("ArraySplitter" type
               (:superclasses ("DataSplitter")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [113120 113124]))                  
                :type "class")
                nil [113081 113125])
            ("SeriesSplitter" type
               (:superclasses ("DataSplitter")
                :members 
                  ( ("_chop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113178 113182])
                            ("sdata" variable nil (reparse-symbol function_parameters) [113184 113189])
                            ("slice_obj" variable nil (reparse-symbol function_parameters) [113191 113200]))                          )
                        (reparse-symbol indented_block_body) [113168 113258]))                  
                :type "class")
                nil [113127 113258])
            ("FrameSplitter" type
               (:superclasses ("DataSplitter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [113359 113428]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113313 113317])
                            ("data" variable nil (reparse-symbol function_parameters) [113319 113323])
                            ("labels" variable nil (reparse-symbol function_parameters) [113325 113331])
                            ("ngroups" variable nil (reparse-symbol function_parameters) [113333 113340])
                            ("axis" variable nil (reparse-symbol function_parameters) [113342 113346]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [113300 113429])
                    ("fast_apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113449 113453])
                            ("f" variable nil (reparse-symbol function_parameters) [113455 113456])
                            ("names" variable nil (reparse-symbol function_parameters) [113458 113463]))                          )
                        (reparse-symbol indented_block_body) [113434 113846])
                    ("_chop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113861 113865])
                            ("sdata" variable nil (reparse-symbol function_parameters) [113867 113872])
                            ("slice_obj" variable nil (reparse-symbol function_parameters) [113874 113883]))                          )
                        (reparse-symbol indented_block_body) [113851 114039]))                  
                :type "class")
                nil [113260 114039])
            ("NDFrameSplitter" type
               (:superclasses ("DataSplitter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [114142 114213])
                            ("self" variable nil (reparse-symbol indented_block_body) [114223 114255]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114096 114100])
                            ("data" variable nil (reparse-symbol function_parameters) [114102 114106])
                            ("labels" variable nil (reparse-symbol function_parameters) [114108 114114])
                            ("ngroups" variable nil (reparse-symbol function_parameters) [114116 114123])
                            ("axis" variable nil (reparse-symbol function_parameters) [114125 114129]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [114083 114256])
                    ("_get_sorted_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114282 114286]))                          )
                        (reparse-symbol indented_block_body) [114261 114558])
                    ("_chop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114573 114577])
                            ("sdata" variable nil (reparse-symbol function_parameters) [114579 114584])
                            ("slice_obj" variable nil (reparse-symbol function_parameters) [114586 114595]))                          )
                        (reparse-symbol indented_block_body) [114563 114670]))                  
                :type "class")
                nil [114041 114670])
            ("get_splitter" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [114689 114693])
                ("args" variable nil (reparse-symbol function_parameters) [114695 114700])
                ("kwargs" variable nil (reparse-symbol function_parameters) [114702 114710]))              ) nil [114672 114928])
            ("get_group_index" function
               (:documentation "
    For the particular label_list, gets the offsets into the hypothetical list
    representing the totally ordered cartesian product of all possible label
    combinations, *as long as* this space fits within int64 bounds;
    otherwise, though group indices identify unique combinations of
    labels, they cannot be deconstructed.
    - If `sort`, rank of returned ids preserve lexical ranks of labels.
      i.e. returned id's can be used to do lexical sort on labels;
    - If `xnull` nulls (-1 labels) are passed through.

    Parameters
    ----------
    labels: sequence of arrays
        Integers identifying levels at each location
    shape: sequence of ints same length as labels
        Number of unique levels at each location
    sort: boolean
        If the ranks of returned ids should match lexical ranks of labels
    xnull: boolean
        If true nulls are eXcluded. i.e. -1 values in the labels are
        passed through
    Returns
    -------
    An array of type int64 where two elements are equal if their corresponding
    labels are equal at all location.
    "
                :arguments 
                  ( ("labels" variable nil (reparse-symbol function_parameters) [115041 115047])
                    ("shape" variable nil (reparse-symbol function_parameters) [115049 115054])
                    ("sort" variable nil (reparse-symbol function_parameters) [115056 115060])
                    ("xnull" variable nil (reparse-symbol function_parameters) [115062 115067]))                  )
                nil [115021 117542])
            ("_INT64_MAX" variable nil nil [117544 117579])
            ("_int64_overflow_possible" function (:arguments 
              ( ("shape" variable nil (reparse-symbol function_parameters) [117611 117616]))              ) nil [117582 117725])
            ("decons_group_index" function (:arguments 
              ( ("comp_labels" variable nil (reparse-symbol function_parameters) [117750 117761])
                ("shape" variable nil (reparse-symbol function_parameters) [117763 117768]))              ) nil [117727 118350])
            ("decons_obs_group_ids" function
               (:documentation "
    reconstruct labels from observed group ids

    Parameters
    ----------
    xnull: boolean,
        if nulls are excluded; i.e. -1 labels are passed through
    "
                :arguments 
                  ( ("comp_ids" variable nil (reparse-symbol function_parameters) [118377 118385])
                    ("obs_ids" variable nil (reparse-symbol function_parameters) [118387 118394])
                    ("shape" variable nil (reparse-symbol function_parameters) [118396 118401])
                    ("labels" variable nil (reparse-symbol function_parameters) [118403 118409])
                    ("xnull" variable nil (reparse-symbol function_parameters) [118411 118416]))                  )
                nil [118352 119204])
            ("_indexer_from_factorized" function (:arguments 
              ( ("labels" variable nil (reparse-symbol function_parameters) [119235 119241])
                ("shape" variable nil (reparse-symbol function_parameters) [119243 119248])
                ("compress" variable nil (reparse-symbol function_parameters) [119250 119258]))              ) nil [119206 119544])
            ("_lexsort_indexer" function (:arguments 
              ( ("keys" variable nil (reparse-symbol function_parameters) [119567 119571])
                ("orders" variable nil (reparse-symbol function_parameters) [119573 119579])
                ("na_position" variable nil (reparse-symbol function_parameters) [119586 119597]))              ) nil [119546 120784])
            ("_nargsort" function
               (:documentation "
    This is intended to be a drop-in replacement for np.argsort which handles NaNs
    It adds ascending and na_position parameters.
    GH #6399, #5231
    "
                :arguments 
                  ( ("items" variable nil (reparse-symbol function_parameters) [120799 120804])
                    ("kind" variable nil (reparse-symbol function_parameters) [120806 120810])
                    ("ascending" variable nil (reparse-symbol function_parameters) [120824 120833])
                    ("na_position" variable nil (reparse-symbol function_parameters) [120840 120851]))                  )
                nil [120785 121894])
            ("_KeyMapper" type
               (:documentation "
    Ease my suffering. Map compressed group id -> key tuple
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [122067 122087])
                            ("self" variable nil (reparse-symbol indented_block_body) [122096 122116])
                            ("self" variable nil (reparse-symbol indented_block_body) [122125 122166])
                            ("self" variable nil (reparse-symbol indented_block_body) [122176 122196])
                            ("self" variable nil (reparse-symbol indented_block_body) [122205 122273])
                            ("self" code nil (reparse-symbol indented_block_body) [122283 122306]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122017 122021])
                            ("comp_ids" variable nil (reparse-symbol function_parameters) [122023 122031])
                            ("ngroups" variable nil (reparse-symbol function_parameters) [122033 122040])
                            ("labels" variable nil (reparse-symbol function_parameters) [122042 122048])
                            ("levels" variable nil (reparse-symbol function_parameters) [122050 122056]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [122004 122307])
                    ("_populate_tables" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122333 122337]))                          )
                        (reparse-symbol indented_block_body) [122312 122458])
                    ("get_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122475 122479])
                            ("comp_id" variable nil (reparse-symbol function_parameters) [122481 122488]))                          )
                        (reparse-symbol indented_block_body) [122463 122615]))                  
                :type "class")
                nil [121896 122615])
            ("_get_indices_dict" function (:arguments 
              ( ("label_list" variable nil (reparse-symbol function_parameters) [122639 122649])
                ("keys" variable nil (reparse-symbol function_parameters) [122651 122655]))              ) nil [122617 123164])
            ("_get_group_index_sorter" function
               (:documentation "
    _algos.groupsort_indexer implements `counting sort` and it is at least
    O(ngroups), where
        ngroups = prod(shape)
        shape = map(len, keys)
    that is, linear in the number of combinations (cartesian product) of unique
    values of groupby keys. This can be huge when doing multi-key groupby.
    np.argsort(kind='mergesort') is O(count x log(count)) where count is the
    length of the data-frame;
    Both algorithms are `stable` sort and that is necessary for correctness of
    groupby operations. e.g. consider:
        df.groupby(key)[col].transform('first')
    "
                :arguments 
                  ( ("group_index" variable nil (reparse-symbol function_parameters) [123296 123307])
                    ("ngroups" variable nil (reparse-symbol function_parameters) [123309 123316]))                  )
                nil [123268 124372])
            ("_compress_group_index" function
               (:documentation "
    Group_index is offsets into cartesian product of all possible labels. This
    space can be huge, so this function compresses it, by computing offsets
    (comp_ids) into the list of unique labels (obs_group_ids).
    "
                :arguments 
                  ( ("group_index" variable nil (reparse-symbol function_parameters) [124400 124411])
                    ("sort" variable nil (reparse-symbol function_parameters) [124413 124417]))                  )
                nil [124374 125101])
            ("_reorder_by_uniques" function (:arguments 
              ( ("uniques" variable nil (reparse-symbol function_parameters) [125127 125134])
                ("labels" variable nil (reparse-symbol function_parameters) [125136 125142]))              ) nil [125103 125698])
            ("_func_table" variable nil nil [125700 125794])
            ("_cython_table" variable nil nil [125797 126052])
            ("_intercept_function" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [126079 126083]))              ) nil [126055 126125])
            ("_intercept_cython" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [126149 126153]))              ) nil [126127 126191])
            ("_groupby_indices" function (:arguments 
              ( ("values" variable nil (reparse-symbol function_parameters) [126214 126220]))              ) nil [126193 126306])
            ("numpy_groupby" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [126326 126330])
                ("labels" variable nil (reparse-symbol function_parameters) [126332 126338])
                ("axis" variable nil (reparse-symbol function_parameters) [126340 126344]))              ) nil [126308 126651]))          
      :file "groupby.py"
      :pointmax 126651
      :fsize 126650
      :lastmodtime '(21808 10978 0 0)
      :unmatched-syntax '((NAME 122772 . 122779) (IF 122845 . 122847) (ELSE 122896 . 122900) (RETURN 118960 . 118966) (IF 118971 . 118973) (ELSE 119016 . 119020) (RETURN 117298 . 117304) (IF 117325 . 117327) (ELSE 117346 . 117350) (NAME 106028 . 106036) (IF 106041 . 106043) (ELSE 106059 . 106063) (NAME 96912 . 96924) (IF 96939 . 96941) (ELSE 96957 . 96961) (NAME 95361 . 95363) (IF 95375 . 95377) (ELSE 95427 . 95431) (INDENT_BLOCK 88318 . 88408) (NEWLINE 88317 . 88318) (COLON 88316 . 88317) (TRY 87919 . 87922) (AS 88312 . 88314) (NAME 69937 . 69940) (IF 69947 . 69949) (ELSE 69965 . 69969) (INDENT_BLOCK 40602 . 40623) (NEWLINE 40552 . 40553) (COLON 40551 . 40552) (TRY 40243 . 40246) (AS 40547 . 40549) (INDENT_BLOCK 34496 . 34539) (NEWLINE 34495 . 34496) (COLON 34494 . 34495) (TRY 34379 . 34382) (AS 34490 . 34492) (NAME 28275 . 28282) (IF 28287 . 28289) (ELSE 28297 . 28301) (NAME 16118 . 16122) (IF 16138 . 16140) (ELSE 16153 . 16157) (NAME 11674 . 11678) (IF 11708 . 11710) (ELSE 11722 . 11726) (INDENT_BLOCK 3339 . 3513) (NEWLINE 3338 . 3339) (COLON 3337 . 3338) (EXCEPT 3321 . 3327) (INDENT_BLOCK 3268 . 3313) (NEWLINE 3267 . 3268) (COLON 3266 . 3267) (TRY 3149 . 3152) (AS 3262 . 3264) (INDENT_BLOCK 40602 . 40623) (NEWLINE 40552 . 40553) (COLON 40551 . 40552) (TRY 40243 . 40246) (AS 40547 . 40549) (INDENT_BLOCK 34496 . 34539) (NEWLINE 34495 . 34496) (COLON 34494 . 34495) (TRY 34379 . 34382) (AS 34490 . 34492) (NAME 28275 . 28282) (IF 28287 . 28289) (ELSE 28297 . 28301) (NAME 16118 . 16122) (IF 16138 . 16140) (ELSE 16153 . 16157) (NAME 11674 . 11678) (IF 11708 . 11710) (ELSE 11722 . 11726) (INDENT_BLOCK 3339 . 3513) (NEWLINE 3338 . 3339) (COLON 3337 . 3338) (EXCEPT 3321 . 3327) (INDENT_BLOCK 3268 . 3313) (NEWLINE 3267 . 3268) (COLON 3266 . 3267) (TRY 3149 . 3152) (AS 3262 . 3264)))
    (semanticdb-table "frame.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
DataFrame
---------
An efficient 2D container for potentially mixed-type time series or other
labeled data series.

Similar to its R counterpart, data.frame, except providing automatic data
alignment and a host of useful data manipulation methods having to do with the
labeling information
\"\"\"" code nil nil [1 298])
            ("__future__" include nil nil [299 330])
            ("functools" include nil nil [404 420])
            ("collections" include nil nil [421 439])
            ("itertools" include nil nil [440 456])
            ("sys" include nil nil [457 467])
            ("types" include nil nil [468 480])
            ("warnings" include nil nil [481 496])
            ("numpy" include nil nil [498 525])
            ("numpy" include nil nil [526 544])
            ("numpy.ma" include nil nil [545 566])
            ("" code nil nil [599 982])
            ("pandas.core.generic" include nil nil [983 1036])
            ("pandas.core.index" include nil nil [1037 1099])
            ("" code nil nil [1133 1267])
            ("" code nil nil [1302 1454])
            ("pandas.core.series" include nil nil [1455 1492])
            ("pandas.core.categorical" include nil nil [1493 1540])
            ("pandas.computation.expressions" include nil nil [1541 1593])
            ("pandas.computation.eval" include nil nil [1594 1643])
            ("numpy" include nil nil [1644 1685])
            ("" code nil nil [1711 1817])
            ("pandas" include nil nil [1818 1843])
            ("pandas.sparse.array" include nil nil [1844 1887])
            ("pandas.util.decorators" include nil nil [1888 1979])
            ("pandas.tseries.period" include nil nil [1981 2026])
            ("pandas.tseries.index" include nil nil [2027 2073])
            ("pandas.core.algorithms" include nil nil [2075 2113])
            ("pandas.core.common" include nil nil [2114 2146])
            ("pandas.core.format" include nil nil [2147 2179])
            ("pandas.core.nanops" include nil nil [2180 2215])
            ("pandas.core.ops" include nil nil [2216 2245])
            ("pandas.lib" include nil nil [2247 2271])
            ("pandas.algos" include nil nil [2272 2301])
            ("pandas.core.config" include nil nil [2303 2344])
            ("_shared_doc_kwargs" variable nil nil [2441 2577])
            ("_numeric_only_doc" variable nil nil [2579 2757])
            ("_merge_doc" variable nil nil [2759 5232])
            ("DataFrame" type
               (:documentation " Two-dimensional size-mutable, potentially heterogeneous tabular data
    structure with labeled axes (rows and columns). Arithmetic operations
    align on both row and column labels. Can be thought of as a dict-like
    container for Series objects. The primary pandas data structure

    Parameters
    ----------
    data : numpy ndarray (structured or homogeneous), dict, or DataFrame
        Dict can contain Series, arrays, constants, or list-like objects
    index : Index or array-like
        Index to use for resulting frame. Will default to np.arange(n) if
        no indexing information part of input data and no index provided
    columns : Index or array-like
        Column labels to use for resulting frame. Will default to
        np.arange(n) if no column labels are provided
    dtype : dtype, default None
        Data type to force, otherwise infer
    copy : boolean, default False
        Copy data from inputs. Only affects DataFrame / 2d ndarray input

    Examples
    --------
    >>> d = {'col1': ts1, 'col2': ts2}
    >>> df = DataFrame(data=d, index=index)
    >>> df2 = DataFrame(np.random.randn(10, 5))
    >>> df3 = DataFrame(np.random.randn(10, 5),
    ...                 columns=['a', 'b', 'c', 'd', 'e'])

    See also
    --------
    DataFrame.from_records : constructor from tuples, also record arrays
    DataFrame.from_dict : from dicts of Series, arrays, or dicts
    DataFrame.from_csv : from CSV files
    DataFrame.from_items : from sequence of (key, value) pairs
    pandas.read_csv, pandas.read_table, pandas.read_clipboard
    "
                :superclasses ("NDFrame")
                :members 
                  ( ("_auto_consolidate" variable nil (reparse-symbol indented_block_body) [6946 6970])
                    ("_constructor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7007 7011]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6976 7039])
                    ("_constructor_sliced" variable nil (reparse-symbol indented_block_body) [7044 7072])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [7184 7223])
                            ("if" code nil (reparse-symbol indented_block_body) [7231 7301])
                            ("if" code nil (reparse-symbol indented_block_body) [7310 7372])
                            ("if" code nil (reparse-symbol indented_block_body) [7381 11385])
                            ("NDFrame" code nil (reparse-symbol indented_block_body) [11394 11436]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7091 7095])
                            ("data" variable nil (reparse-symbol function_parameters) [7097 7101])
                            ("index" variable nil (reparse-symbol function_parameters) [7108 7113])
                            ("columns" variable nil (reparse-symbol function_parameters) [7120 7127])
                            ("dtype" variable nil (reparse-symbol function_parameters) [7134 7139])
                            ("copy" variable nil (reparse-symbol function_parameters) [7163 7167]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7078 11437])
                    ("_init_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11457 11461])
                            ("data" variable nil (reparse-symbol function_parameters) [11463 11467])
                            ("index" variable nil (reparse-symbol function_parameters) [11469 11474])
                            ("columns" variable nil (reparse-symbol function_parameters) [11476 11483])
                            ("dtype" variable nil (reparse-symbol function_parameters) [11485 11490]))                          
                        :documentation "
        Segregate Series based on type and coerce into matrices.
        Needs to handle a lot of exceptional cases.
        ")
                        (reparse-symbol indented_block_body) [11442 13078])
                    ("_init_ndarray" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13101 13105])
                            ("values" variable nil (reparse-symbol function_parameters) [13107 13113])
                            ("index" variable nil (reparse-symbol function_parameters) [13115 13120])
                            ("columns" variable nil (reparse-symbol function_parameters) [13122 13129])
                            ("dtype" variable nil (reparse-symbol function_parameters) [13131 13136])
                            ("copy" variable nil (reparse-symbol function_parameters) [13165 13169]))                          )
                        (reparse-symbol indented_block_body) [13083 15704])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15732 15736]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15709 15781])
                    ("shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15810 15814]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15786 15869])
                    ("_repr_fits_vertical_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15899 15903]))                          
                        :documentation "
        Check length against max_rows.
        ")
                        (reparse-symbol indented_block_body) [15874 16056])
                    ("_repr_fits_horizontal_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16088 16092])
                            ("ignore_width" variable nil (reparse-symbol function_parameters) [16094 16106]))                          
                        :documentation "
        Check if full repr fits in horizontal boundaries imposed by the display
        options width and max_columns. In case off non-interactive session, no
        boundaries apply.

        ignore_width is here so ipnb+HTML output can behave the way
        users expect. display.max_columns remains in effect.
        GH3541, GH3573
        ")
                        (reparse-symbol indented_block_body) [16061 17951])
                    ("_info_repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17971 17975]))                          
                        :documentation "True if the repr should show the info view.")
                        (reparse-symbol indented_block_body) [17956 18234])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18255 18259]))                          
                        :documentation "
        Return a string representation for a particular DataFrame

        Invoked by unicode(df) in py2 only. Yields a Unicode String in both
        py2/py3.
        ")
                        (reparse-symbol indented_block_body) [18239 19051])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19072 19076]))                          
                        :documentation "
        Return a html representation for a particular DataFrame.
        Mainly for IPython notebook.
        ")
                        (reparse-symbol indented_block_body) [19056 20563])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20582 20586]))                          
                        :documentation "Iterator over (column, series) pairs")
                        (reparse-symbol indented_block_body) [20568 20893])
                    ("iterrows" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20911 20915]))                          
                        :documentation "
        Iterate over rows of DataFrame as (index, Series) pairs.

        Notes
        -----

        * ``iterrows`` does **not** preserve dtypes across the rows (dtypes
          are preserved across columns for DataFrames). For example,

            >>> df = DataFrame([[1, 1.0]], columns=['x', 'y'])
            >>> row = next(df.iterrows())[1]
            >>> print(row['x'].dtype)
            float64
            >>> print(df['x'].dtype)
            int64

        Returns
        -------
        it : generator
            A generator that iterates over the rows of the frame.
        ")
                        (reparse-symbol indented_block_body) [20898 21679])
                    ("itertuples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21699 21703])
                            ("index" variable nil (reparse-symbol function_parameters) [21705 21710]))                          
                        :documentation "
        Iterate over rows of DataFrame as tuples, with index value
        as first element of the tuple
        ")
                        (reparse-symbol indented_block_body) [21684 22099])
                    ("if" code nil (reparse-symbol indented_block_body) [22104 22165])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22182 22186]))                          
                        :documentation "Returns length of info axis, but here we use the index ")
                        (reparse-symbol indented_block_body) [22170 22290])
                    ("dot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22303 22307])
                            ("other" variable nil (reparse-symbol function_parameters) [22309 22314]))                          
                        :documentation "
        Matrix multiplication with DataFrame or Series objects

        Parameters
        ----------
        other : DataFrame or Series

        Returns
        -------
        dot_product : DataFrame or Series
        ")
                        (reparse-symbol indented_block_body) [22295 23992])
                    ("from_dict" function
                       (:documentation "
        Construct DataFrame from dict of array-like or dicts

        Parameters
        ----------
        data : dict
            {field : array-like} or {field : dict}
        orient : {'columns', 'index'}, default 'columns'
            The \"orientation\" of the data. If the keys of the passed dict
            should be the columns of the resulting DataFrame, pass 'columns'
            (default). Otherwise if the keys should be rows, pass 'index'.

        Returns
        -------
        DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [24148 24151])
                            ("data" variable nil (reparse-symbol function_parameters) [24153 24157])
                            ("orient" variable nil (reparse-symbol function_parameters) [24159 24165])
                            ("dtype" variable nil (reparse-symbol function_parameters) [24177 24182]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24117 25306])
                    ("" code nil (reparse-symbol indented_block_body) [25327 25374])
                    ("to_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25391 25395])
                            ("orient" variable nil (reparse-symbol function_parameters) [25397 25403]))                          
                        :documentation "Convert DataFrame to dictionary.

        Parameters
        ----------
        orient : str {'dict', 'list', 'series', 'split', 'records'}
            Determines the type of the values of the dictionary.

            - dict (default) : dict like {column -> {index -> value}}
            - list : dict like {column -> [values]}
            - series : dict like {column -> Series(values)}
            - split : dict like
              {index -> [index], columns -> [columns], data -> [values]}
            - records : list like
              [{column -> value}, ... , {column -> value}]

            Abbreviations are allowed. `s` indicates `series` and `sp`
            indicates `split`.

        Returns
        -------
        result : dict like {column -> {index -> value}}
        ")
                        (reparse-symbol indented_block_body) [25379 27180])
                    ("to_gbq" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27196 27200])
                            ("destination_table" variable nil (reparse-symbol function_parameters) [27202 27219])
                            ("project_id" variable nil (reparse-symbol function_parameters) [27221 27231])
                            ("chunksize" variable nil (reparse-symbol function_parameters) [27238 27247])
                            ("verbose" variable nil (reparse-symbol function_parameters) [27270 27277])
                            ("reauth" variable nil (reparse-symbol function_parameters) [27284 27290]))                          
                        :documentation "Write a DataFrame to a Google BigQuery table.

        THIS IS AN EXPERIMENTAL LIBRARY

        If the table exists, the dataframe will be written to the table using
        the defined table schema and column types. For simplicity, this method
        uses the Google BigQuery streaming API. The to_gbq method chunks data
        into a default chunk size of 10,000. Failures return the complete error
        response which can be quite long depending on the size of the insert.
        There are several important limitations of the Google streaming API
        which are detailed at:
        https://developers.google.com/bigquery/streaming-data-into-bigquery.

        Parameters
        ----------
        dataframe : DataFrame
            DataFrame to be written
        destination_table : string
            Name of table to be written, in the form 'dataset.tablename'
        project_id : str
            Google BigQuery Account project ID.
        chunksize : int (default 10000)
            Number of rows to be inserted in each chunk from the dataframe.
        verbose : boolean (default True)
            Show percentage complete
        reauth : boolean (default False)
            Force Google BigQuery to reauthenticate the user. This is useful
            if multiple accounts are used.

        ")
                        (reparse-symbol indented_block_body) [27185 28843])
                    ("from_records" function
                       (:documentation "
        Convert structured or record ndarray to DataFrame

        Parameters
        ----------
        data : ndarray (structured dtype), list of tuples, dict, or DataFrame
        index : string, list of fields, array-like
            Field of array to use as the index, alternately a specific set of
            input labels to use
        exclude : sequence, default None
            Columns or fields to exclude
        columns : sequence, default None
            Column names to use. If the passed data do not have names
            associated with them, this argument provides names for the
            columns. Otherwise this argument indicates the order of the columns
            in the result (any names not found in the data will become all-NA
            columns)
        coerce_float : boolean, default False
            Attempt to convert values to non-string, non-numeric objects (like
            decimal.Decimal) to floating point, useful for SQL result sets

        Returns
        -------
        df : DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28882 28885])
                            ("data" variable nil (reparse-symbol function_parameters) [28887 28891])
                            ("index" variable nil (reparse-symbol function_parameters) [28893 28898])
                            ("exclude" variable nil (reparse-symbol function_parameters) [28905 28912])
                            ("columns" variable nil (reparse-symbol function_parameters) [28919 28926])
                            ("coerce_float" variable nil (reparse-symbol function_parameters) [28954 28966])
                            ("nrows" variable nil (reparse-symbol function_parameters) [28974 28979]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [28848 33503])
                    ("to_records" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33523 33527])
                            ("index" variable nil (reparse-symbol function_parameters) [33529 33534])
                            ("convert_datetime64" variable nil (reparse-symbol function_parameters) [33541 33559]))                          
                        :documentation "
        Convert DataFrame to record array. Index will be put in the
        'index' field of the record array if requested

        Parameters
        ----------
        index : boolean, default True
            Include index in resulting record array, stored in 'index' field
        convert_datetime64 : boolean, default True
            Whether to convert the index to datetime.datetime if it is a
            DatetimeIndex

        Returns
        -------
        y : recarray
        ")
                        (reparse-symbol indented_block_body) [33508 35287])
                    ("from_items" function
                       (:documentation "
        Convert (key, value) pairs to DataFrame. The keys will be the axis
        index (usually the columns, but depends on the specified
        orientation). The values should be arrays or Series.

        Parameters
        ----------
        items : sequence of (key, value) pairs
            Values should be arrays or Series.
        columns : sequence of column labels, optional
            Must be passed if orient='index'.
        orient : {'columns', 'index'}, default 'columns'
            The \"orientation\" of the data. If the keys of the
            input correspond to column labels, pass 'columns'
            (default). Otherwise if the keys correspond to the index,
            pass 'index'.

        Returns
        -------
        frame : DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [35324 35327])
                            ("items" variable nil (reparse-symbol function_parameters) [35329 35334])
                            ("columns" variable nil (reparse-symbol function_parameters) [35336 35343])
                            ("orient" variable nil (reparse-symbol function_parameters) [35350 35356]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35292 37356])
                    ("_from_arrays" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [37395 37398])
                            ("arrays" variable nil (reparse-symbol function_parameters) [37400 37406])
                            ("columns" variable nil (reparse-symbol function_parameters) [37408 37415])
                            ("index" variable nil (reparse-symbol function_parameters) [37417 37422])
                            ("dtype" variable nil (reparse-symbol function_parameters) [37424 37429]))                          )
                        (reparse-symbol indented_block_body) [37361 37536])
                    ("from_csv" function
                       (:documentation "
        Read delimited file into DataFrame

        Parameters
        ----------
        path : string file path or file handle / StringIO
        header : int, default 0
            Row to use at header (skip prior rows)
        sep : string, default ','
            Field delimiter
        index_col : int or sequence, default 0
            Column to use for index. If a sequence is given, a MultiIndex
            is used. Different default from read_table
        parse_dates : boolean, default True
            Parse dates. Different default from read_table
        tupleize_cols : boolean, default False
            write multi_index columns as a list of tuples (if True)
            or new (expanded format) if False)
        infer_datetime_format: boolean, default False
            If True and `parse_dates` is True for a column, try to infer the
            datetime format based on the first datetime string. If the format
            can be inferred, there often will be a large parsing speed-up.

        Notes
        -----
        Preferable to use read_table for most general purposes but from_csv
        makes for an easy roundtrip to and from file, especially with a
        DataFrame of time series data

        Returns
        -------
        y : DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [37571 37574])
                            ("path" variable nil (reparse-symbol function_parameters) [37576 37580])
                            ("header" variable nil (reparse-symbol function_parameters) [37582 37588])
                            ("sep" variable nil (reparse-symbol function_parameters) [37592 37595])
                            ("index_col" variable nil (reparse-symbol function_parameters) [37601 37610])
                            ("parse_dates" variable nil (reparse-symbol function_parameters) [37631 37642])
                            ("encoding" variable nil (reparse-symbol function_parameters) [37649 37657])
                            ("tupleize_cols" variable nil (reparse-symbol function_parameters) [37664 37677])
                            ("infer_datetime_format" variable nil (reparse-symbol function_parameters) [37702 37723]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [37541 39358])
                    ("to_sparse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39377 39381])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [39383 39393])
                            ("kind" variable nil (reparse-symbol function_parameters) [39400 39404]))                          
                        :documentation "
        Convert to SparseDataFrame

        Parameters
        ----------
        fill_value : float, default NaN
        kind : {'block', 'integer'}

        Returns
        -------
        y : SparseDataFrame
        ")
                        (reparse-symbol indented_block_body) [39363 39880])
                    ("to_panel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39898 39902]))                          
                        :documentation "
        Transform long (stacked) format (DataFrame) into wide (3D, Panel)
        format.

        Currently the index of the DataFrame must be a 2-level MultiIndex. This
        may be generalized later

        Returns
        -------
        panel : Panel
        ")
                        (reparse-symbol indented_block_body) [39885 41636])
                    ("to_wide" variable nil (reparse-symbol indented_block_body) [41641 41681])
                    ("to_csv" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41698 41702])
                            ("path_or_buf" variable nil (reparse-symbol function_parameters) [41704 41715])
                            ("sep" variable nil (reparse-symbol function_parameters) [41722 41725])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [41731 41737])
                            ("float_format" variable nil (reparse-symbol function_parameters) [41742 41754])
                            ("columns" variable nil (reparse-symbol function_parameters) [41776 41783])
                            ("header" variable nil (reparse-symbol function_parameters) [41790 41796])
                            ("index" variable nil (reparse-symbol function_parameters) [41803 41808])
                            ("index_label" variable nil (reparse-symbol function_parameters) [41815 41826])
                            ("mode" variable nil (reparse-symbol function_parameters) [41848 41852])
                            ("encoding" variable nil (reparse-symbol function_parameters) [41858 41866])
                            ("quoting" variable nil (reparse-symbol function_parameters) [41873 41880])
                            ("quotechar" variable nil (reparse-symbol function_parameters) [41902 41911])
                            ("line_terminator" variable nil (reparse-symbol function_parameters) [41917 41932])
                            ("chunksize" variable nil (reparse-symbol function_parameters) [41939 41948])
                            ("tupleize_cols" variable nil (reparse-symbol function_parameters) [41970 41983])
                            ("date_format" variable nil (reparse-symbol function_parameters) [41991 42002])
                            ("doublequote" variable nil (reparse-symbol function_parameters) [42009 42020])
                            ("escapechar" variable nil (reparse-symbol function_parameters) [42042 42052])
                            ("decimal" variable nil (reparse-symbol function_parameters) [42059 42066])
                            ("kwds" variable nil (reparse-symbol function_parameters) [42072 42078]))                          )
                        (reparse-symbol indented_block_body) [41687 45686])
                    ("to_excel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45704 45708])
                            ("excel_writer" variable nil (reparse-symbol function_parameters) [45710 45722])
                            ("sheet_name" variable nil (reparse-symbol function_parameters) [45724 45734])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [45745 45751])
                            ("float_format" variable nil (reparse-symbol function_parameters) [45773 45785])
                            ("columns" variable nil (reparse-symbol function_parameters) [45792 45799])
                            ("header" variable nil (reparse-symbol function_parameters) [45806 45812])
                            ("index" variable nil (reparse-symbol function_parameters) [45819 45824])
                            ("index_label" variable nil (reparse-symbol function_parameters) [45848 45859])
                            ("startrow" variable nil (reparse-symbol function_parameters) [45866 45874])
                            ("startcol" variable nil (reparse-symbol function_parameters) [45878 45886])
                            ("engine" variable nil (reparse-symbol function_parameters) [45890 45896])
                            ("merge_cells" variable nil (reparse-symbol function_parameters) [45920 45931])
                            ("encoding" variable nil (reparse-symbol function_parameters) [45938 45946])
                            ("inf_rep" variable nil (reparse-symbol function_parameters) [45953 45960]))                          
                        :documentation "
        Write DataFrame to a excel sheet

        Parameters
        ----------
        excel_writer : string or ExcelWriter object
            File path or existing ExcelWriter
        sheet_name : string, default 'Sheet1'
            Name of sheet which will contain DataFrame
        na_rep : string, default ''
            Missing data representation
        float_format : string, default None
            Format string for floating point numbers
        columns : sequence, optional
            Columns to write
        header : boolean or list of string, default True
            Write out column names. If a list of string is given it is
            assumed to be aliases for the column names
        index : boolean, default True
            Write row names (index)
        index_label : string or sequence, default None
            Column label for index column(s) if desired. If None is given, and
            `header` and `index` are True, then the index names are used. A
            sequence should be given if the DataFrame uses MultiIndex.
        startrow :
            upper left cell row to dump data frame
        startcol :
            upper left cell column to dump data frame
        engine : string, default None
            write engine to use - you can also set this via the options
            ``io.excel.xlsx.writer``, ``io.excel.xls.writer``, and
            ``io.excel.xlsm.writer``.
        merge_cells : boolean, default True
            Write MultiIndex and Hierarchical Rows as merged cells.
        encoding: string, default None
            encoding of the resulting excel file. Only necessary for xlwt,
            other writers support unicode natively.
        inf_rep : string, default 'inf'
            Representation for infinity (there is no native representation for
            infinity in Excel)

        Notes
        -----
        If passing an existing ExcelWriter object, then the sheet will be added
        to the existing workbook.  This can be used to save different
        DataFrames to one workbook:

        >>> writer = ExcelWriter('output.xlsx')
        >>> df1.to_excel(writer,'Sheet1')
        >>> df2.to_excel(writer,'Sheet2')
        >>> writer.save()
        ")
                        (reparse-symbol indented_block_body) [45691 49254])
                    ("to_stata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49281 49285])
                            ("fname" variable nil (reparse-symbol function_parameters) [49287 49292])
                            ("convert_dates" variable nil (reparse-symbol function_parameters) [49294 49307])
                            ("write_index" variable nil (reparse-symbol function_parameters) [49314 49325])
                            ("encoding" variable nil (reparse-symbol function_parameters) [49332 49340])
                            ("byteorder" variable nil (reparse-symbol function_parameters) [49364 49373])
                            ("time_stamp" variable nil (reparse-symbol function_parameters) [49380 49390])
                            ("data_label" variable nil (reparse-symbol function_parameters) [49397 49407]))                          
                        :documentation "
        A class for writing Stata binary dta files from array-like objects

        Parameters
        ----------
        fname : file path or buffer
            Where to save the dta file.
        convert_dates : dict
            Dictionary mapping column of datetime types to the stata internal
            format that you want to use for the dates. Options are
            'tc', 'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either a
            number or a name.
        encoding : str
            Default is latin-1. Note that Stata does not support unicode.
        byteorder : str
            Can be \">\", \"<\", \"little\", or \"big\". The default is None which uses
            `sys.byteorder`

        Examples
        --------
        >>> writer = StataWriter('./data_file.dta', data)
        >>> writer.write_file()

        Or with dates

        >>> writer = StataWriter('./date_data_file.dta', data, {2 : 'tw'})
        >>> writer.write_file()
        ")
                        (reparse-symbol indented_block_body) [49259 50740])
                    ("" code nil (reparse-symbol indented_block_body) [50754 50790])
                    ("to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50809 50813])
                            ("buf" variable nil (reparse-symbol function_parameters) [50815 50818])
                            ("columns" variable nil (reparse-symbol function_parameters) [50825 50832])
                            ("col_space" variable nil (reparse-symbol function_parameters) [50839 50848])
                            ("colSpace" variable nil (reparse-symbol function_parameters) [50855 50863])
                            ("header" variable nil (reparse-symbol function_parameters) [50888 50894])
                            ("index" variable nil (reparse-symbol function_parameters) [50901 50906])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [50913 50919])
                            ("formatters" variable nil (reparse-symbol function_parameters) [50927 50937])
                            ("float_format" variable nil (reparse-symbol function_parameters) [50962 50974])
                            ("sparsify" variable nil (reparse-symbol function_parameters) [50981 50989])
                            ("index_names" variable nil (reparse-symbol function_parameters) [50996 51007])
                            ("justify" variable nil (reparse-symbol function_parameters) [51032 51039])
                            ("line_width" variable nil (reparse-symbol function_parameters) [51046 51056])
                            ("max_rows" variable nil (reparse-symbol function_parameters) [51063 51071])
                            ("max_cols" variable nil (reparse-symbol function_parameters) [51078 51086])
                            ("show_dimensions" variable nil (reparse-symbol function_parameters) [51111 51126]))                          
                        :documentation "
        Render a DataFrame to a console-friendly tabular output.
        ")
                        (reparse-symbol indented_block_body) [50795 52364])
                    ("" code nil (reparse-symbol indented_block_body) [52378 52414])
                    ("to_html" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52431 52435])
                            ("buf" variable nil (reparse-symbol function_parameters) [52437 52440])
                            ("columns" variable nil (reparse-symbol function_parameters) [52447 52454])
                            ("col_space" variable nil (reparse-symbol function_parameters) [52461 52470])
                            ("colSpace" variable nil (reparse-symbol function_parameters) [52477 52485])
                            ("header" variable nil (reparse-symbol function_parameters) [52508 52514])
                            ("index" variable nil (reparse-symbol function_parameters) [52521 52526])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [52533 52539])
                            ("formatters" variable nil (reparse-symbol function_parameters) [52547 52557])
                            ("float_format" variable nil (reparse-symbol function_parameters) [52580 52592])
                            ("sparsify" variable nil (reparse-symbol function_parameters) [52599 52607])
                            ("index_names" variable nil (reparse-symbol function_parameters) [52614 52625])
                            ("justify" variable nil (reparse-symbol function_parameters) [52648 52655])
                            ("bold_rows" variable nil (reparse-symbol function_parameters) [52662 52671])
                            ("classes" variable nil (reparse-symbol function_parameters) [52678 52685])
                            ("escape" variable nil (reparse-symbol function_parameters) [52692 52698])
                            ("max_rows" variable nil (reparse-symbol function_parameters) [52721 52729])
                            ("max_cols" variable nil (reparse-symbol function_parameters) [52736 52744])
                            ("show_dimensions" variable nil (reparse-symbol function_parameters) [52751 52766]))                          
                        :documentation "
        Render a DataFrame as an HTML table.

        `to_html`-specific options:

        bold_rows : boolean, default True
            Make the row labels bold in the output
        classes : str or list or tuple, default None
            CSS class(es) to apply to the resulting html table
        escape : boolean, default True
            Convert the characters <, >, and & to HTML-safe sequences.=
        max_rows : int, optional
            Maximum number of rows to show before truncating. If None, show
            all.
        max_cols : int, optional
            Maximum number of columns to show before truncating. If None, show
            all.

        ")
                        (reparse-symbol indented_block_body) [52419 54639])
                    ("" code nil (reparse-symbol indented_block_body) [54653 54689])
                    ("to_latex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54707 54711])
                            ("buf" variable nil (reparse-symbol function_parameters) [54713 54716])
                            ("columns" variable nil (reparse-symbol function_parameters) [54723 54730])
                            ("col_space" variable nil (reparse-symbol function_parameters) [54737 54746])
                            ("colSpace" variable nil (reparse-symbol function_parameters) [54753 54761])
                            ("header" variable nil (reparse-symbol function_parameters) [54785 54791])
                            ("index" variable nil (reparse-symbol function_parameters) [54798 54803])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [54810 54816])
                            ("formatters" variable nil (reparse-symbol function_parameters) [54824 54834])
                            ("float_format" variable nil (reparse-symbol function_parameters) [54858 54870])
                            ("sparsify" variable nil (reparse-symbol function_parameters) [54877 54885])
                            ("index_names" variable nil (reparse-symbol function_parameters) [54892 54903])
                            ("bold_rows" variable nil (reparse-symbol function_parameters) [54927 54936])
                            ("longtable" variable nil (reparse-symbol function_parameters) [54943 54952])
                            ("escape" variable nil (reparse-symbol function_parameters) [54960 54966]))                          
                        :documentation "
        Render a DataFrame to a tabular environment table. You can splice
        this into a LaTeX document. Requires \\\\usepackage{booktabs}.

        `to_latex`-specific options:

        bold_rows : boolean, default True
            Make the row labels bold in the output
        longtable : boolean, default False
            Use a longtable environment instead of tabular. Requires adding
            a \\\\usepackage{longtable} to your LaTeX preamble.
        escape : boolean, default True
            When set to False prevents from escaping latex special
            characters in column names.

        ")
                        (reparse-symbol indented_block_body) [54694 56527])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56541 56545])
                            ("verbose" variable nil (reparse-symbol function_parameters) [56547 56554])
                            ("buf" variable nil (reparse-symbol function_parameters) [56561 56564])
                            ("max_cols" variable nil (reparse-symbol function_parameters) [56571 56579])
                            ("memory_usage" variable nil (reparse-symbol function_parameters) [56586 56598])
                            ("null_counts" variable nil (reparse-symbol function_parameters) [56605 56616]))                          
                        :documentation "
        Concise summary of a DataFrame.

        Parameters
        ----------
        verbose : {None, True, False}, optional
            Whether to print the full summary.
            None follows the `display.max_info_columns` setting.
            True or False overrides the `display.max_info_columns` setting.
        buf : writable buffer, defaults to sys.stdout
        max_cols : int, default None
            Determines whether full summary or short summary is printed.
            None follows the `display.max_info_columns` setting.
        memory_usage : boolean, default None
            Specifies whether total memory usage of the DataFrame
            elements (including index) should be displayed. None follows
            the `display.memory_usage` setting. True or False overrides
            the `display.memory_usage` setting. Memory usage is shown in
            human-readable units (base-2 representation).
        null_counts : boolean, default None
            Whether to show the non-null counts
            If None, then only show if the frame is smaller than max_info_rows and max_info_columns.
            If True, always show counts.
            If False, never show counts.

        ")
                        (reparse-symbol indented_block_body) [56532 61268])
                    ("memory_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61290 61294])
                            ("index" variable nil (reparse-symbol function_parameters) [61296 61301]))                          
                        :documentation "Memory usage of DataFrame columns.

        Parameters
        ----------
        index : bool
            Specifies whether to include memory usage of DataFrame's
            index in returned Series. If `index=True` (default is False)
            the first index of the Series is `Index`.

        Returns
        -------
        sizes : Series
            A series with column names as index and memory usage of
            columns with units of bytes.

        Notes
        -----
        Memory usage does not include memory consumed by elements that
        are not components of the array.

        See Also
        --------
        numpy.ndarray.nbytes
        ")
                        (reparse-symbol indented_block_body) [61273 62258])
                    ("transpose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62277 62281]))                          
                        :documentation "Transpose index and columns")
                        (reparse-symbol indented_block_body) [62263 62380])
                    ("T" variable nil (reparse-symbol indented_block_body) [62385 62408])
                    ("_unpickle_frame_compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62565 62569])
                            ("state" variable nil (reparse-symbol function_parameters) [62571 62576]))                          )
                        (reparse-symbol indented_block_body) [62538 62972])
                    ("_unpickle_matrix_compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63005 63009])
                            ("state" variable nil (reparse-symbol function_parameters) [63011 63016]))                          )
                        (reparse-symbol indented_block_body) [62977 63620])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63827 63831])
                            ("index" variable nil (reparse-symbol function_parameters) [63833 63838])
                            ("col" variable nil (reparse-symbol function_parameters) [63840 63843])
                            ("takeable" variable nil (reparse-symbol function_parameters) [63845 63853]))                          
                        :documentation "
        Quickly retrieve single value at passed column and index

        Parameters
        ----------
        index : row label
        col : column label
        takeable : interpret the index/col as indexers, default False

        Returns
        -------
        value : scalar value
        ")
                        (reparse-symbol indented_block_body) [63813 64450])
                    ("set_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64469 64473])
                            ("index" variable nil (reparse-symbol function_parameters) [64475 64480])
                            ("col" variable nil (reparse-symbol function_parameters) [64482 64485])
                            ("value" variable nil (reparse-symbol function_parameters) [64487 64492])
                            ("takeable" variable nil (reparse-symbol function_parameters) [64494 64502]))                          
                        :documentation "
        Put single value at passed column and index

        Parameters
        ----------
        index : row label
        col : column label
        value : scalar value
        takeable : interpret the index/col as indexers, default False

        Returns
        -------
        frame : DataFrame
            If label pair is contained, will be reference to calling DataFrame,
            otherwise a new object
        ")
                        (reparse-symbol indented_block_body) [64455 65503])
                    ("irow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65517 65521])
                            ("i" variable nil (reparse-symbol function_parameters) [65523 65524])
                            ("copy" variable nil (reparse-symbol function_parameters) [65526 65530]))                          )
                        (reparse-symbol indented_block_body) [65508 65575])
                    ("icol" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65589 65593])
                            ("i" variable nil (reparse-symbol function_parameters) [65595 65596]))                          )
                        (reparse-symbol indented_block_body) [65580 65635])
                    ("_ixs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65649 65653])
                            ("i" variable nil (reparse-symbol function_parameters) [65655 65656])
                            ("axis" variable nil (reparse-symbol function_parameters) [65658 65662]))                          
                        :documentation "
        i : int, slice, or sequence of integers
        axis : int
        ")
                        (reparse-symbol indented_block_body) [65640 67937])
                    ("iget_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67957 67961])
                            ("i" variable nil (reparse-symbol function_parameters) [67963 67964])
                            ("j" variable nil (reparse-symbol function_parameters) [67966 67967]))                          )
                        (reparse-symbol indented_block_body) [67942 68000])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68021 68025])
                            ("key" variable nil (reparse-symbol function_parameters) [68027 68030]))                          )
                        (reparse-symbol indented_block_body) [68005 68851])
                    ("_getitem_column" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68876 68880])
                            ("key" variable nil (reparse-symbol function_parameters) [68882 68885]))                          
                        :documentation " return the actual column ")
                        (reparse-symbol indented_block_body) [68856 69243])
                    ("_getitem_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69267 69271])
                            ("key" variable nil (reparse-symbol function_parameters) [69273 69276]))                          )
                        (reparse-symbol indented_block_body) [69248 69319])
                    ("_getitem_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69343 69347])
                            ("key" variable nil (reparse-symbol function_parameters) [69349 69352]))                          )
                        (reparse-symbol indented_block_body) [69324 70544])
                    ("_getitem_multilevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70573 70577])
                            ("key" variable nil (reparse-symbol function_parameters) [70579 70582]))                          )
                        (reparse-symbol indented_block_body) [70549 71642])
                    ("_getitem_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71666 71670])
                            ("key" variable nil (reparse-symbol function_parameters) [71672 71675]))                          )
                        (reparse-symbol indented_block_body) [71647 71827])
                    ("query" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71842 71846])
                            ("expr" variable nil (reparse-symbol function_parameters) [71848 71852])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [71854 71862]))                          
                        :documentation "Query the columns of a frame with a boolean expression.

        .. versionadded:: 0.13

        Parameters
        ----------
        expr : string
            The query string to evaluate.  You can refer to variables
            in the environment by prefixing them with an '@' character like
            ``@a + b``.
        kwargs : dict
            See the documentation for :func:`pandas.eval` for complete details
            on the keyword arguments accepted by :meth:`DataFrame.query`.

        Returns
        -------
        q : DataFrame

        Notes
        -----
        The result of the evaluation of this expression is first passed to
        :attr:`DataFrame.loc` and if that fails because of a
        multidimensional key (e.g., a DataFrame) then the result will be passed
        to :meth:`DataFrame.__getitem__`.

        This method uses the top-level :func:`pandas.eval` function to
        evaluate the passed query.

        The :meth:`~pandas.DataFrame.query` method uses a slightly
        modified Python syntax by default. For example, the ``&`` and ``|``
        (bitwise) operators have the precedence of their boolean cousins,
        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,
        however the semantics are different.

        You can change the semantics of the expression by passing the keyword
        argument ``parser='python'``. This enforces the same semantics as
        evaluation in Python space. Likewise, you can pass ``engine='python'``
        to evaluate an expression using Python itself as a backend. This is not
        recommended as it is inefficient compared to using ``numexpr`` as the
        engine.

        The :attr:`DataFrame.index` and
        :attr:`DataFrame.columns` attributes of the
        :class:`~pandas.DataFrame` instance are placed in the query namespace
        by default, which allows you to treat both the index and columns of the
        frame as a column in the frame.
        The identifier ``index`` is used for the frame index; you can also
        use the name of the index to identify it in a query.

        For further details and examples see the ``query`` documentation in
        :ref:`indexing <indexing.query>`.

        See Also
        --------
        pandas.eval
        DataFrame.eval

        Examples
        --------
        >>> from numpy.random import randn
        >>> from pandas import DataFrame
        >>> df = DataFrame(randn(10, 2), columns=list('ab'))
        >>> df.query('a > b')
        >>> df[df.a > df.b]  # same result as the previous expression
        ")
                        (reparse-symbol indented_block_body) [71832 74786])
                    ("eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74800 74804])
                            ("expr" variable nil (reparse-symbol function_parameters) [74806 74810])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [74812 74820]))                          
                        :documentation "Evaluate an expression in the context of the calling DataFrame
        instance.

        Parameters
        ----------
        expr : string
            The expression string to evaluate.
        kwargs : dict
            See the documentation for :func:`~pandas.eval` for complete details
            on the keyword arguments accepted by
            :meth:`~pandas.DataFrame.query`.

        Returns
        -------
        ret : ndarray, scalar, or pandas object

        See Also
        --------
        pandas.DataFrame.query
        pandas.eval

        Notes
        -----
        For more details see the API documentation for :func:`~pandas.eval`.
        For detailed examples see :ref:`enhancing performance with eval
        <enhancingperf.eval>`.

        Examples
        --------
        >>> from numpy.random import randn
        >>> from pandas import DataFrame
        >>> df = DataFrame(randn(10, 2), columns=list('ab'))
        >>> df.eval('a + b')
        >>> df.eval('c = a + b')
        ")
                        (reparse-symbol indented_block_body) [74791 76243])
                    ("select_dtypes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76266 76270])
                            ("include" variable nil (reparse-symbol function_parameters) [76272 76279])
                            ("exclude" variable nil (reparse-symbol function_parameters) [76286 76293]))                          
                        :documentation "Return a subset of a DataFrame including/excluding columns based on
        their ``dtype``.

        Parameters
        ----------
        include, exclude : list-like
            A list of dtypes or strings to be included/excluded. You must pass
            in a non-empty sequence for at least one of these.

        Raises
        ------
        ValueError
            * If both of ``include`` and ``exclude`` are empty
            * If ``include`` and ``exclude`` have overlapping elements
            * If any kind of string dtype is passed in.
        TypeError
            * If either of ``include`` or ``exclude`` is not a sequence

        Returns
        -------
        subset : DataFrame
            The subset of the frame including the dtypes in ``include`` and
            excluding the dtypes in ``exclude``.

        Notes
        -----
        * To select all *numeric* types use the numpy dtype ``numpy.number``
        * To select strings you must use the ``object`` dtype, but note that
          this will return *all* object dtype columns
        * See the `numpy dtype hierarchy
          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__
        * To select Pandas categorical dtypes, use 'category'

        Examples
        --------
        >>> df = pd.DataFrame({'a': np.random.randn(6).astype('f4'),
        ...                    'b': [True, False] * 3,
        ...                    'c': [1.0, 2.0] * 3})
        >>> df
                a      b  c
        0  0.3962   True  1
        1  0.1459  False  2
        2  0.2623   True  1
        3  0.0764  False  2
        4 -0.9703   True  1
        5 -1.2094  False  2
        >>> df.select_dtypes(include=['float64'])
           c
        0  1
        1  2
        2  1
        3  2
        4  1
        5  2
        >>> df.select_dtypes(exclude=['floating'])
               b
        0   True
        1  False
        2   True
        3  False
        4   True
        5  False
        ")
                        (reparse-symbol indented_block_body) [76248 80639])
                    ("_box_item_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80665 80669])
                            ("key" variable nil (reparse-symbol function_parameters) [80671 80674])
                            ("values" variable nil (reparse-symbol function_parameters) [80676 80682]))                          )
                        (reparse-symbol indented_block_body) [80644 80919])
                    ("_box_col_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80944 80948])
                            ("values" variable nil (reparse-symbol function_parameters) [80950 80956])
                            ("items" variable nil (reparse-symbol function_parameters) [80958 80963]))                          
                        :documentation " provide boxed values for a column ")
                        (reparse-symbol indented_block_body) [80924 81171])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81192 81196])
                            ("key" variable nil (reparse-symbol function_parameters) [81198 81201])
                            ("value" variable nil (reparse-symbol function_parameters) [81203 81208]))                          )
                        (reparse-symbol indented_block_body) [81176 81665])
                    ("_setitem_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81689 81693])
                            ("key" variable nil (reparse-symbol function_parameters) [81695 81698])
                            ("value" variable nil (reparse-symbol function_parameters) [81700 81705]))                          )
                        (reparse-symbol indented_block_body) [81670 81793])
                    ("_setitem_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81817 81821])
                            ("key" variable nil (reparse-symbol function_parameters) [81823 81826])
                            ("value" variable nil (reparse-symbol function_parameters) [81828 81833]))                          )
                        (reparse-symbol indented_block_body) [81798 82791])
                    ("_setitem_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82815 82819])
                            ("key" variable nil (reparse-symbol function_parameters) [82821 82824])
                            ("value" variable nil (reparse-symbol function_parameters) [82826 82831]))                          )
                        (reparse-symbol indented_block_body) [82796 83164])
                    ("_ensure_valid_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83193 83197])
                            ("value" variable nil (reparse-symbol function_parameters) [83199 83204]))                          
                        :documentation "
        ensure that if we don't have an index, that we can create one from the
        passed value
        ")
                        (reparse-symbol indented_block_body) [83169 84082])
                    ("_set_item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84101 84105])
                            ("key" variable nil (reparse-symbol function_parameters) [84107 84110])
                            ("value" variable nil (reparse-symbol function_parameters) [84112 84117]))                          
                        :documentation "
        Add series to DataFrame in specified column.

        If series is a numpy-array (not a Series/TimeSeries), it must be the
        same length as the DataFrames index or an error will be thrown.

        Series/TimeSeries will be conformed to the DataFrames index to
        ensure homogeneity.
        ")
                        (reparse-symbol indented_block_body) [84087 84776])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84792 84796])
                            ("loc" variable nil (reparse-symbol function_parameters) [84798 84801])
                            ("column" variable nil (reparse-symbol function_parameters) [84803 84809])
                            ("value" variable nil (reparse-symbol function_parameters) [84811 84816])
                            ("allow_duplicates" variable nil (reparse-symbol function_parameters) [84818 84834]))                          
                        :documentation "
        Insert column into DataFrame at specified location.

        If `allow_duplicates` is False, raises Exception if column
        is already contained in the DataFrame.

        Parameters
        ----------
        loc : int
            Must have 0 <= loc <= len(columns)
        column : object
        value : int, Series, or array-like
        ")
                        (reparse-symbol indented_block_body) [84781 85400])
                    ("assign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85416 85420])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [85422 85430]))                          
                        :documentation "
        Assign new columns to a DataFrame, returning a new object
        (a copy) with all the original columns in addition to the new ones.

        .. versionadded:: 0.16.0

        Parameters
        ----------
        kwargs : keyword, value pairs
            keywords are the column names. If the values are
            callable, they are computed on the DataFrame and
            assigned to the new columns. If the values are
            not callable, (e.g. a Series, scalar, or array),
            they are simply assigned.

        Returns
        -------
        df : DataFrame
            A new DataFrame with the new columns in addition to
            all the existing columns.

        Notes
        -----
        Since ``kwargs`` is a dictionary, the order of your
        arguments may not be preserved, and so the order of the
        new columns is not well defined. Assigning multiple
        columns within the same ``assign`` is possible, but you cannot
        reference other columns created within the same ``assign`` call.

        Examples
        --------
        >>> df = DataFrame({'A': range(1, 11), 'B': np.random.randn(10)})

        Where the value is a callable, evaluated on `df`:

        >>> df.assign(ln_A = lambda x: np.log(x.A))
            A         B      ln_A
        0   1  0.426905  0.000000
        1   2 -0.780949  0.693147
        2   3 -0.418711  1.098612
        3   4 -0.269708  1.386294
        4   5 -0.274002  1.609438
        5   6 -0.500792  1.791759
        6   7  1.649697  1.945910
        7   8 -1.495604  2.079442
        8   9  0.549296  2.197225
        9  10 -0.758542  2.302585

        Where the value already exists and is inserted:

        >>> newcol = np.log(df['A'])
        >>> df.assign(ln_A=newcol)
            A         B      ln_A
        0   1  0.426905  0.000000
        1   2 -0.780949  0.693147
        2   3 -0.418711  1.098612
        3   4 -0.269708  1.386294
        4   5 -0.274002  1.609438
        5   6 -0.500792  1.791759
        6   7  1.649697  1.945910
        7   8 -1.495604  2.079442
        8   9  0.549296  2.197225
        9  10 -0.758542  2.302585
        ")
                        (reparse-symbol indented_block_body) [85405 87956])
                    ("_sanitize_column" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87982 87986])
                            ("key" variable nil (reparse-symbol function_parameters) [87988 87991])
                            ("value" variable nil (reparse-symbol function_parameters) [87993 87998]))                          )
                        (reparse-symbol indented_block_body) [87961 91205])
                    ("_series" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91236 91240]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [91210 91454])
                    ("lookup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91470 91474])
                            ("row_labels" variable nil (reparse-symbol function_parameters) [91476 91486])
                            ("col_labels" variable nil (reparse-symbol function_parameters) [91488 91498]))                          
                        :documentation "Label-based \"fancy indexing\" function for DataFrame.
        Given equal-length arrays of row and column labels, return an
        array of the values corresponding to each (row, col) pair.

        Parameters
        ----------
        row_labels : sequence
            The row labels to use for lookup
        col_labels : sequence
            The column labels to use for lookup

        Notes
        -----
        Akin to::

            result = []
            for row, col in zip(row_labels, col_labels):
                result.append(df.get_value(row, col))

        Examples
        --------
        values : ndarray
            The found values

        ")
                        (reparse-symbol indented_block_body) [91459 93144])
                    ("_reindex_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93275 93279])
                            ("axes" variable nil (reparse-symbol function_parameters) [93281 93285])
                            ("level" variable nil (reparse-symbol function_parameters) [93287 93292])
                            ("limit" variable nil (reparse-symbol function_parameters) [93294 93299])
                            ("method" variable nil (reparse-symbol function_parameters) [93301 93307])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [93309 93319])
                            ("copy" variable nil (reparse-symbol function_parameters) [93321 93325]))                          )
                        (reparse-symbol indented_block_body) [93257 93755])
                    ("_reindex_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93779 93783])
                            ("new_index" variable nil (reparse-symbol function_parameters) [93785 93794])
                            ("method" variable nil (reparse-symbol function_parameters) [93796 93802])
                            ("copy" variable nil (reparse-symbol function_parameters) [93804 93808])
                            ("level" variable nil (reparse-symbol function_parameters) [93810 93815])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [93817 93827])
                            ("limit" variable nil (reparse-symbol function_parameters) [93855 93860]))                          )
                        (reparse-symbol indented_block_body) [93760 94211])
                    ("_reindex_columns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94237 94241])
                            ("new_columns" variable nil (reparse-symbol function_parameters) [94243 94254])
                            ("copy" variable nil (reparse-symbol function_parameters) [94256 94260])
                            ("level" variable nil (reparse-symbol function_parameters) [94262 94267])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [94269 94279])
                            ("limit" variable nil (reparse-symbol function_parameters) [94309 94314]))                          )
                        (reparse-symbol indented_block_body) [94216 94675])
                    ("_reindex_multi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94699 94703])
                            ("axes" variable nil (reparse-symbol function_parameters) [94705 94709])
                            ("copy" variable nil (reparse-symbol function_parameters) [94711 94715])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [94717 94727]))                          
                        :documentation " we are guaranteed non-Nones in the axes! ")
                        (reparse-symbol indented_block_body) [94680 95596])
                    ("" code nil (reparse-symbol indented_block_body) [95610 95656])
                    ("reindex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95673 95677])
                            ("index" variable nil (reparse-symbol function_parameters) [95679 95684])
                            ("columns" variable nil (reparse-symbol function_parameters) [95691 95698])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [95705 95713]))                          )
                        (reparse-symbol indented_block_body) [95661 95848])
                    ("" code nil (reparse-symbol indented_block_body) [95862 95913])
                    ("reindex_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95935 95939])
                            ("labels" variable nil (reparse-symbol function_parameters) [95941 95947])
                            ("axis" variable nil (reparse-symbol function_parameters) [95949 95953])
                            ("method" variable nil (reparse-symbol function_parameters) [95957 95963])
                            ("level" variable nil (reparse-symbol function_parameters) [95970 95975])
                            ("copy" variable nil (reparse-symbol function_parameters) [95982 95986])
                            ("limit" variable nil (reparse-symbol function_parameters) [96014 96019])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [96026 96036]))                          )
                        (reparse-symbol indented_block_body) [95918 96351])
                    ("" code nil (reparse-symbol indented_block_body) [96365 96410])
                    ("rename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96426 96430])
                            ("index" variable nil (reparse-symbol function_parameters) [96432 96437])
                            ("columns" variable nil (reparse-symbol function_parameters) [96444 96451])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [96458 96466]))                          )
                        (reparse-symbol indented_block_body) [96415 96599])
                    ("set_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96618 96622])
                            ("keys" variable nil (reparse-symbol function_parameters) [96624 96628])
                            ("drop" variable nil (reparse-symbol function_parameters) [96630 96634])
                            ("append" variable nil (reparse-symbol function_parameters) [96641 96647])
                            ("inplace" variable nil (reparse-symbol function_parameters) [96655 96662])
                            ("verify_integrity" variable nil (reparse-symbol function_parameters) [96688 96704]))                          
                        :documentation "
        Set the DataFrame index (row labels) using one or more existing
        columns. By default yields a new object.

        Parameters
        ----------
        keys : column label or list of column labels / arrays
        drop : boolean, default True
            Delete columns to be used as the new index
        append : boolean, default False
            Whether to append columns to existing index
        inplace : boolean, default False
            Modify the DataFrame in place (do not create a new object)
        verify_integrity : boolean, default False
            Check the new index for duplicates. Otherwise defer the check until
            necessary. Setting to False will improve the performance of this
            method

        Examples
        --------
        >>> indexed_df = df.set_index(['A', 'B'])
        >>> indexed_df2 = df.set_index(['A', [0, 1, 2, 0, 1, 2]])
        >>> indexed_df3 = df.set_index([[0, 1, 2, 0, 1, 2]])

        Returns
        -------
        dataframe : DataFrame
        ")
                        (reparse-symbol indented_block_body) [96604 99644])
                    ("reset_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99665 99669])
                            ("level" variable nil (reparse-symbol function_parameters) [99671 99676])
                            ("drop" variable nil (reparse-symbol function_parameters) [99683 99687])
                            ("inplace" variable nil (reparse-symbol function_parameters) [99695 99702])
                            ("col_level" variable nil (reparse-symbol function_parameters) [99710 99719])
                            ("col_fill" variable nil (reparse-symbol function_parameters) [99743 99751]))                          
                        :documentation "
        For DataFrame with multi-level index, return new DataFrame with
        labeling information in the columns under the index names, defaulting
        to 'level_0', 'level_1', etc. if any are None. For a standard index,
        the index name will be used (if set), otherwise a default 'index' or
        'level_0' (if 'index' is already taken) will be used.

        Parameters
        ----------
        level : int, str, tuple, or list, default None
            Only remove the given levels from the index. Removes all levels by
            default
        drop : boolean, default False
            Do not try to insert index into dataframe columns. This resets
            the index to the default integer index.
        inplace : boolean, default False
            Modify the DataFrame in place (do not create a new object)
        col_level : int or str, default 0
            If the columns have multiple levels, determines which level the
            labels are inserted into. By default it is inserted into the first
            level.
        col_fill : object, default ''
            If the columns have multiple levels, determines how the other
            levels are named. If None then the index name is repeated.

        Returns
        -------
        resetted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [99649 104357])
                    ("dropna" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104489 104493])
                            ("axis" variable nil (reparse-symbol function_parameters) [104495 104499])
                            ("how" variable nil (reparse-symbol function_parameters) [104503 104506])
                            ("thresh" variable nil (reparse-symbol function_parameters) [104514 104520])
                            ("subset" variable nil (reparse-symbol function_parameters) [104527 104533])
                            ("inplace" variable nil (reparse-symbol function_parameters) [104555 104562]))                          
                        :documentation "
        Return object with labels on given axis omitted where alternately any
        or all of the data are missing

        Parameters
        ----------
        axis : {0, 1}, or tuple/list thereof
            Pass tuple or list to drop on multiple axes
        how : {'any', 'all'}
            * any : if any NA values are present, drop that label
            * all : if all values are NA, drop that label
        thresh : int, default None
            int value : require that many non-NA values
        subset : array-like
            Labels along other axis to consider, e.g. if you are dropping rows
            these would be a list of columns to include
        inplace : boolean, defalt False
            If True, do operation inplace and return None.

        Returns
        -------
        dropped : DataFrame
        ")
                        (reparse-symbol indented_block_body) [104478 106770])
                    ("" code nil (reparse-symbol indented_block_body) [106791 106835])
                    ("drop_duplicates" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106860 106864])
                            ("subset" variable nil (reparse-symbol function_parameters) [106866 106872])
                            ("take_last" variable nil (reparse-symbol function_parameters) [106879 106888])
                            ("inplace" variable nil (reparse-symbol function_parameters) [106896 106903]))                          
                        :documentation "
        Return DataFrame with duplicate rows removed, optionally only
        considering certain columns

        Parameters
        ----------
        subset : column label or sequence of labels, optional
            Only consider certain columns for identifying duplicates, by
            default use all of the columns
        take_last : boolean, default False
            Take the last observed row in a row. Defaults to the first row
        inplace : boolean, default False
            Whether to drop duplicates in place or to return a copy
        cols : kwargs only argument of subset [deprecated]

        Returns
        -------
        deduplicated : DataFrame
        ")
                        (reparse-symbol indented_block_body) [106840 107881])
                    ("" code nil (reparse-symbol indented_block_body) [107902 107946])
                    ("duplicated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107966 107970])
                            ("subset" variable nil (reparse-symbol function_parameters) [107972 107978])
                            ("take_last" variable nil (reparse-symbol function_parameters) [107985 107994]))                          
                        :documentation "
        Return boolean Series denoting duplicate rows, optionally only
        considering certain columns

        Parameters
        ----------
        subset : column label or sequence of labels, optional
            Only consider certain columns for identifying duplicates, by
            default use all of the columns
        take_last : boolean, default False
            For a set of distinct duplicate rows, flag all but the last row as
            duplicated. Default is for all but the first row to be flagged
        cols : kwargs only argument of subset [deprecated]

        Returns
        -------
        duplicated : Series
        ")
                        (reparse-symbol indented_block_body) [107951 109539])
                    ("sort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109644 109648])
                            ("columns" variable nil (reparse-symbol function_parameters) [109650 109657])
                            ("axis" variable nil (reparse-symbol function_parameters) [109664 109668])
                            ("ascending" variable nil (reparse-symbol function_parameters) [109672 109681])
                            ("inplace" variable nil (reparse-symbol function_parameters) [109701 109708])
                            ("kind" variable nil (reparse-symbol function_parameters) [109716 109720])
                            ("na_position" variable nil (reparse-symbol function_parameters) [109734 109745]))                          
                        :documentation "
        Sort DataFrame either by labels (along either axis) or by the values in
        column(s)

        Parameters
        ----------
        columns : object
            Column name(s) in frame. Accepts a column name or a list
            for a nested sort. A tuple will be interpreted as the
            levels of a multi-index.
        ascending : boolean or list, default True
            Sort ascending vs. descending. Specify list for multiple sort
            orders
        axis : {0, 1}
            Sort index/rows versus columns
        inplace : boolean, default False
            Sort the DataFrame without creating a new instance
        kind : {'quicksort', 'mergesort', 'heapsort'}, optional
            This option is only applied when sorting on a single column or label.
        na_position : {'first', 'last'} (optional, default='last')
            'first' puts NaNs at the beginning
            'last' puts NaNs at the end

        Examples
        --------
        >>> result = df.sort(['A', 'B'], ascending=[1, 0])

        Returns
        -------
        sorted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [109635 111038])
                    ("sort_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111058 111062])
                            ("axis" variable nil (reparse-symbol function_parameters) [111064 111068])
                            ("by" variable nil (reparse-symbol function_parameters) [111072 111074])
                            ("ascending" variable nil (reparse-symbol function_parameters) [111081 111090])
                            ("inplace" variable nil (reparse-symbol function_parameters) [111097 111104])
                            ("kind" variable nil (reparse-symbol function_parameters) [111131 111135])
                            ("na_position" variable nil (reparse-symbol function_parameters) [111149 111160]))                          
                        :documentation "
        Sort DataFrame either by labels (along either axis) or by the values in
        a column

        Parameters
        ----------
        axis : {0, 1}
            Sort index/rows versus columns
        by : object
            Column name(s) in frame. Accepts a column name or a list
            for a nested sort. A tuple will be interpreted as the
            levels of a multi-index.
        ascending : boolean or list, default True
            Sort ascending vs. descending. Specify list for multiple sort
            orders
        inplace : boolean, default False
            Sort the DataFrame without creating a new instance
        na_position : {'first', 'last'} (optional, default='last')
            'first' puts NaNs at the beginning
            'last' puts NaNs at the end
        kind : {'quicksort', 'mergesort', 'heapsort'}, optional
            This option is only applied when sorting on a single column or label.

        Examples
        --------
        >>> result = df.sort_index(by=['A', 'B'], ascending=[True, False])

        Returns
        -------
        sorted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [111043 115423])
                    ("sortlevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115442 115446])
                            ("level" variable nil (reparse-symbol function_parameters) [115448 115453])
                            ("axis" variable nil (reparse-symbol function_parameters) [115457 115461])
                            ("ascending" variable nil (reparse-symbol function_parameters) [115465 115474])
                            ("inplace" variable nil (reparse-symbol function_parameters) [115499 115506])
                            ("sort_remaining" variable nil (reparse-symbol function_parameters) [115514 115528]))                          
                        :documentation "
        Sort multilevel index by chosen axis and primary level. Data will be
        lexicographically sorted by the chosen level followed by the other
        levels (in order)

        Parameters
        ----------
        level : int
        axis : {0, 1}
        ascending : boolean, default True
        inplace : boolean, default False
            Sort the DataFrame without creating a new instance
        sort_remaining : boolean, default True
            Sort by the other levels too.

        Returns
        -------
        sorted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [115428 117084])
                    ("swaplevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117103 117107])
                            ("i" variable nil (reparse-symbol function_parameters) [117109 117110])
                            ("j" variable nil (reparse-symbol function_parameters) [117112 117113])
                            ("axis" variable nil (reparse-symbol function_parameters) [117115 117119]))                          
                        :documentation "
        Swap levels i and j in a MultiIndex on a particular axis

        Parameters
        ----------
        i, j : int, string (can be mixed)
            Level of index to be swapped. Can pass level name as string.

        Returns
        -------
        swapped : type of caller (new object)
        ")
                        (reparse-symbol indented_block_body) [117089 117693])
                    ("reorder_levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117717 117721])
                            ("order" variable nil (reparse-symbol function_parameters) [117723 117728])
                            ("axis" variable nil (reparse-symbol function_parameters) [117730 117734]))                          
                        :documentation "
        Rearrange index levels using input order.
        May not drop or duplicate levels

        Parameters
        ----------
        order : list of int or list of str
            List representing new level order. Reference level by number
            (position) or by key (label).
        axis : int
            Where to reorder levels.

        Returns
        -------
        type of caller (new object)
        ")
                        (reparse-symbol indented_block_body) [117698 118622])
                    ("_combine_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118762 118766])
                            ("other" variable nil (reparse-symbol function_parameters) [118768 118773])
                            ("func" variable nil (reparse-symbol function_parameters) [118775 118779])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [118781 118791])
                            ("level" variable nil (reparse-symbol function_parameters) [118798 118803]))                          )
                        (reparse-symbol indented_block_body) [118743 120627])
                    ("_combine_series" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120652 120656])
                            ("other" variable nil (reparse-symbol function_parameters) [120658 120663])
                            ("func" variable nil (reparse-symbol function_parameters) [120665 120669])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [120671 120681])
                            ("axis" variable nil (reparse-symbol function_parameters) [120688 120692])
                            ("level" variable nil (reparse-symbol function_parameters) [120723 120728]))                          )
                        (reparse-symbol indented_block_body) [120632 121149])
                    ("_combine_series_infer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121180 121184])
                            ("other" variable nil (reparse-symbol function_parameters) [121186 121191])
                            ("func" variable nil (reparse-symbol function_parameters) [121193 121197])
                            ("level" variable nil (reparse-symbol function_parameters) [121199 121204])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [121211 121221]))                          )
                        (reparse-symbol indented_block_body) [121154 122179])
                    ("_combine_match_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122209 122213])
                            ("other" variable nil (reparse-symbol function_parameters) [122215 122220])
                            ("func" variable nil (reparse-symbol function_parameters) [122222 122226])
                            ("level" variable nil (reparse-symbol function_parameters) [122228 122233])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [122240 122250]))                          )
                        (reparse-symbol indented_block_body) [122184 122689])
                    ("_combine_match_columns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122721 122725])
                            ("other" variable nil (reparse-symbol function_parameters) [122727 122732])
                            ("func" variable nil (reparse-symbol function_parameters) [122734 122738])
                            ("level" variable nil (reparse-symbol function_parameters) [122740 122745])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [122752 122762]))                          )
                        (reparse-symbol indented_block_body) [122694 123161])
                    ("_combine_const" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123185 123189])
                            ("other" variable nil (reparse-symbol function_parameters) [123191 123196])
                            ("func" variable nil (reparse-symbol function_parameters) [123198 123202])
                            ("raise_on_error" variable nil (reparse-symbol function_parameters) [123204 123218]))                          )
                        (reparse-symbol indented_block_body) [123166 123407])
                    ("_compare_frame_evaluate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123440 123444])
                            ("other" variable nil (reparse-symbol function_parameters) [123446 123451])
                            ("func" variable nil (reparse-symbol function_parameters) [123453 123457])
                            ("str_rep" variable nil (reparse-symbol function_parameters) [123459 123466]))                          )
                        (reparse-symbol indented_block_body) [123412 124318])
                    ("_compare_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124342 124346])
                            ("other" variable nil (reparse-symbol function_parameters) [124348 124353])
                            ("func" variable nil (reparse-symbol function_parameters) [124355 124359])
                            ("str_rep" variable nil (reparse-symbol function_parameters) [124361 124368]))                          )
                        (reparse-symbol indented_block_body) [124323 124598])
                    ("_flex_compare_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124627 124631])
                            ("other" variable nil (reparse-symbol function_parameters) [124633 124638])
                            ("func" variable nil (reparse-symbol function_parameters) [124640 124644])
                            ("str_rep" variable nil (reparse-symbol function_parameters) [124646 124653])
                            ("level" variable nil (reparse-symbol function_parameters) [124655 124660]))                          )
                        (reparse-symbol indented_block_body) [124603 124849])
                    ("combine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124866 124870])
                            ("other" variable nil (reparse-symbol function_parameters) [124872 124877])
                            ("func" variable nil (reparse-symbol function_parameters) [124879 124883])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [124885 124895])
                            ("overwrite" variable nil (reparse-symbol function_parameters) [124902 124911]))                          
                        :documentation "
        Add two DataFrame objects and do not propagate NaN values, so if for a
        (column, time) one frame is missing a value, it will default to the
        other frame's value (which might be NaN as well)

        Parameters
        ----------
        other : DataFrame
        func : function
        fill_value : scalar value
        overwrite : boolean, default True
            If True then overwrite values for common keys in the calling frame

        Returns
        -------
        result : DataFrame
        ")
                        (reparse-symbol indented_block_body) [124854 128011])
                    ("combine_first" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [128034 128038])
                            ("other" variable nil (reparse-symbol function_parameters) [128040 128045]))                          
                        :documentation "
        Combine two DataFrame objects and default to non-null values in frame
        calling the method. Result index columns will be the union of the
        respective indexes and columns

        Parameters
        ----------
        other : DataFrame

        Examples
        --------
        a's values prioritized, use values from b to fill holes:

        >>> a.combine_first(b)


        Returns
        -------
        combined : DataFrame
        ")
                        (reparse-symbol indented_block_body) [128016 129110])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129126 129130])
                            ("other" variable nil (reparse-symbol function_parameters) [129132 129137])
                            ("join" variable nil (reparse-symbol function_parameters) [129139 129143])
                            ("overwrite" variable nil (reparse-symbol function_parameters) [129152 129161])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [129168 129179])
                            ("raise_conflict" variable nil (reparse-symbol function_parameters) [129201 129215]))                          
                        :documentation "
        Modify DataFrame in place using non-NA values from passed
        DataFrame. Aligns on indices

        Parameters
        ----------
        other : DataFrame, or object coercible into a DataFrame
        join : {'left'}, default 'left'
        overwrite : boolean, default True
            If True then overwrite values for common keys in the calling frame
        filter_func : callable(1d-array) -> 1d-array<boolean>, default None
            Can choose to replace values other than NA. Return True for values
            that should be updated
        raise_conflict : boolean
            If True, will raise an error if the DataFrame and other both
            contain data in the same place.
        ")
                        (reparse-symbol indented_block_body) [129115 131052])
                    ("first_valid_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131175 131179]))                          
                        :documentation "
        Return label for first non-NA/null value
        ")
                        (reparse-symbol indented_block_body) [131153 131303])
                    ("last_valid_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131329 131333]))                          
                        :documentation "
        Return label for last non-NA/null value
        ")
                        (reparse-symbol indented_block_body) [131308 131457])
                    ("pivot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131570 131574])
                            ("index" variable nil (reparse-symbol function_parameters) [131576 131581])
                            ("columns" variable nil (reparse-symbol function_parameters) [131588 131595])
                            ("values" variable nil (reparse-symbol function_parameters) [131602 131608]))                          
                        :documentation "
        Reshape data (produce a \"pivot\" table) based on column values. Uses
        unique values from index / columns to form axes and return either
        DataFrame or Panel, depending on whether you request a single value
        column (DataFrame) or all columns (Panel)

        Parameters
        ----------
        index : string or object
            Column name to use to make new frame's index
        columns : string or object
            Column name to use to make new frame's columns
        values : string or object, optional
            Column name to use for populating new frame's values

        Notes
        -----
        For finer-tuned control, see hierarchical indexing documentation along
        with the related stack/unstack methods

        Examples
        --------
        >>> df
            foo   bar  baz
        0   one   A    1.
        1   one   B    2.
        2   one   C    3.
        3   two   A    4.
        4   two   B    5.
        5   two   C    6.

        >>> df.pivot('foo', 'bar', 'baz')
             A   B   C
        one  1   2   3
        two  4   5   6

        >>> df.pivot('foo', 'bar')['baz']
             A   B   C
        one  1   2   3
        two  4   5   6

        Returns
        -------
        pivoted : DataFrame
            If no values column specified, will have hierarchically indexed
            columns
        ")
                        (reparse-symbol indented_block_body) [131560 133135])
                    ("stack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133150 133154])
                            ("level" variable nil (reparse-symbol function_parameters) [133156 133161])
                            ("dropna" variable nil (reparse-symbol function_parameters) [133166 133172]))                          
                        :documentation "
        Pivot a level of the (possibly hierarchical) column labels, returning a
        DataFrame (or Series in the case of an object with a single level of
        column labels) having a hierarchical index with a new inner-most level
        of row labels.
        The level involved will automatically get sorted.

        Parameters
        ----------
        level : int, string, or list of these, default last level
            Level(s) to stack, can pass level name
        dropna : boolean, default True
            Whether to drop rows in the resulting Frame/Series with no valid
            values

        Examples
        ----------
        >>> s
             a   b
        one  1.  2.
        two  3.  4.

        >>> s.stack()
        one a    1
            b    2
        two a    3
            b    4

        Returns
        -------
        stacked : DataFrame or Series
        ")
                        (reparse-symbol indented_block_body) [133140 134329])
                    ("unstack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134346 134350])
                            ("level" variable nil (reparse-symbol function_parameters) [134352 134357]))                          
                        :documentation "
        Pivot a level of the (necessarily hierarchical) index labels, returning
        a DataFrame having a new level of column labels whose inner-most level
        consists of the pivoted index labels. If the index is not a MultiIndex,
        the output will be a Series (the analogue of stack when the columns are
        not a MultiIndex).
        The level involved will automatically get sorted.

        Parameters
        ----------
        level : int, string, or list of these, default -1 (last level)
            Level(s) of index to unstack, can pass level name

        See also
        --------
        DataFrame.pivot : Pivot a table based on column values.
        DataFrame.stack : Pivot a level of the column labels (inverse operation
            from `unstack`).

        Examples
        --------
        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),
        ...                                    ('two', 'a'), ('two', 'b')])
        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)
        >>> s
        one  a   1
             b   2
        two  a   3
             b   4
        dtype: float64

        >>> s.unstack(level=-1)
             a   b
        one  1  2
        two  3  4

        >>> s.unstack(level=0)
           one  two
        a  1   3
        b  2   4

        >>> df = s.unstack(level=0)
        >>> df.unstack()
        one  a  1.
             b  3.
        two  a  2.
             b  4.

        Returns
        -------
        unstacked : DataFrame or Series
        ")
                        (reparse-symbol indented_block_body) [134334 135999])
                    ("diff" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136116 136120])
                            ("periods" variable nil (reparse-symbol function_parameters) [136122 136129]))                          
                        :documentation "
        1st discrete difference of object

        Parameters
        ----------
        periods : int, default 1
            Periods to shift for forming difference

        Returns
        -------
        diffed : DataFrame
        ")
                        (reparse-symbol indented_block_body) [136107 136473])
                    ("apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136592 136596])
                            ("func" variable nil (reparse-symbol function_parameters) [136598 136602])
                            ("axis" variable nil (reparse-symbol function_parameters) [136604 136608])
                            ("broadcast" variable nil (reparse-symbol function_parameters) [136612 136621])
                            ("raw" variable nil (reparse-symbol function_parameters) [136629 136632])
                            ("reduce" variable nil (reparse-symbol function_parameters) [136640 136646])
                            ("args" variable nil (reparse-symbol function_parameters) [136667 136671])
                            ("kwds" variable nil (reparse-symbol function_parameters) [136676 136682]))                          
                        :documentation "
        Applies function along input axis of DataFrame.

        Objects passed to functions are Series objects having index
        either the DataFrame's index (axis=0) or the columns (axis=1).
        Return type depends on whether passed function aggregates, or the
        reduce argument if the DataFrame is empty.

        Parameters
        ----------
        func : function
            Function to apply to each column/row
        axis : {0, 1}
            * 0 : apply function to each column
            * 1 : apply function to each row
        broadcast : boolean, default False
            For aggregation functions, return object of same size with values
            propagated
        reduce : boolean or None, default None
            Try to apply reduction procedures. If the DataFrame is empty,
            apply will use reduce to determine whether the result should be a
            Series or a DataFrame. If reduce is None (the default), apply's
            return value will be guessed by calling func an empty Series (note:
            while guessing, exceptions raised by func will be ignored). If
            reduce is True a Series will always be returned, and if False a
            DataFrame will always be returned.
        raw : boolean, default False
            If False, convert each row or column into a Series. If raw=True the
            passed function will receive ndarray objects instead. If you are
            just applying a NumPy reduction function this will achieve much
            better performance
        args : tuple
            Positional arguments to pass to function in addition to the
            array/series
        Additional keyword arguments will be passed as keywords to the function

        Notes
        -----
        In the current implementation apply calls func twice on the
        first column/row to decide whether it can take a fast or slow
        code path. This can lead to unexpected behavior if func has
        side-effects, as they will take effect twice for the first
        column/row.

        Examples
        --------
        >>> df.apply(numpy.sqrt) # returns DataFrame
        >>> df.apply(numpy.sum, axis=0) # equiv to df.sum(0)
        >>> df.apply(numpy.sum, axis=1) # equiv to df.sum(1)

        See also
        --------
        DataFrame.applymap: For elementwise operations

        Returns
        -------
        applied : Series or DataFrame
        ")
                        (reparse-symbol indented_block_body) [136582 140258])
                    ("_apply_empty_result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140287 140291])
                            ("func" variable nil (reparse-symbol function_parameters) [140293 140297])
                            ("axis" variable nil (reparse-symbol function_parameters) [140299 140303])
                            ("reduce" variable nil (reparse-symbol function_parameters) [140305 140311])
                            ("args" variable nil (reparse-symbol function_parameters) [140313 140318])
                            ("kwds" variable nil (reparse-symbol function_parameters) [140320 140326]))                          )
                        (reparse-symbol indented_block_body) [140263 140702])
                    ("_apply_raw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140722 140726])
                            ("func" variable nil (reparse-symbol function_parameters) [140728 140732])
                            ("axis" variable nil (reparse-symbol function_parameters) [140734 140738]))                          )
                        (reparse-symbol indented_block_body) [140707 141156])
                    ("_apply_standard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141181 141185])
                            ("func" variable nil (reparse-symbol function_parameters) [141187 141191])
                            ("axis" variable nil (reparse-symbol function_parameters) [141193 141197])
                            ("ignore_failures" variable nil (reparse-symbol function_parameters) [141199 141214])
                            ("reduce" variable nil (reparse-symbol function_parameters) [141222 141228]))                          )
                        (reparse-symbol indented_block_body) [141161 144364])
                    ("_apply_broadcast" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144390 144394])
                            ("func" variable nil (reparse-symbol function_parameters) [144396 144400])
                            ("axis" variable nil (reparse-symbol function_parameters) [144402 144406]))                          )
                        (reparse-symbol indented_block_body) [144369 145001])
                    ("applymap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145019 145023])
                            ("func" variable nil (reparse-symbol function_parameters) [145025 145029]))                          
                        :documentation "
        Apply a function to a DataFrame that is intended to operate
        elementwise, i.e. like doing map(func, series) for each series in the
        DataFrame

        Parameters
        ----------
        func : function
            Python function, returns a single value from a single value

        Returns
        -------
        applied : DataFrame

        See also
        --------
        DataFrame.apply : For operations on rows/columns

        ")
                        (reparse-symbol indented_block_body) [145006 145831])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145956 145960])
                            ("other" variable nil (reparse-symbol function_parameters) [145962 145967])
                            ("ignore_index" variable nil (reparse-symbol function_parameters) [145969 145981])
                            ("verify_integrity" variable nil (reparse-symbol function_parameters) [145989 146005]))                          
                        :documentation "
        Append rows of `other` to the end of this frame, returning a new
        object. Columns not in this frame are added as new columns.

        Parameters
        ----------
        other : DataFrame or Series/dict-like object, or list of these
            The data to append.
        ignore_index : boolean, default False
            If True, do not use the index labels.
        verify_integrity : boolean, default False
            If True, raise ValueError on creating index with duplicates.

        Returns
        -------
        appended : DataFrame

        Notes
        -----
        If a list of dict/series is passed and the keys are all contained in the
        DataFrame's index, the order of the columns in the resulting DataFrame
        will be unchanged.

        See also
        --------
        pandas.concat : General function to concatenate DataFrame, Series
            or Panel objects

        Examples
        --------

        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))
        >>> df
           A  B
        0  1  2
        1  3  4
        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))
        >>> df.append(df2)
           A  B
        0  1  2
        1  3  4
        0  5  6
        1  7  8

        With `ignore_index` set to True:

        >>> df.append(df2, ignore_index=True)
           A  B
        0  1  2
        1  3  4
        2  5  6
        3  7  8

        ")
                        (reparse-symbol indented_block_body) [145945 148854])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148868 148872])
                            ("other" variable nil (reparse-symbol function_parameters) [148874 148879])
                            ("on" variable nil (reparse-symbol function_parameters) [148881 148883])
                            ("how" variable nil (reparse-symbol function_parameters) [148890 148893])
                            ("lsuffix" variable nil (reparse-symbol function_parameters) [148902 148909])
                            ("rsuffix" variable nil (reparse-symbol function_parameters) [148914 148921])
                            ("sort" variable nil (reparse-symbol function_parameters) [148939 148943]))                          
                        :documentation "
        Join columns with other DataFrame either on index or on a key
        column. Efficiently Join multiple DataFrame objects by index at once by
        passing a list.

        Parameters
        ----------
        other : DataFrame, Series with name field set, or list of DataFrame
            Index should be similar to one of the columns in this one. If a
            Series is passed, its name attribute must be set, and that will be
            used as the column name in the resulting joined DataFrame
        on : column name, tuple/list of column names, or array-like
            Column(s) to use for joining, otherwise join on index. If multiples
            columns given, the passed DataFrame must have a MultiIndex. Can
            pass an array as the join key if not already contained in the
            calling DataFrame. Like an Excel VLOOKUP operation
        how : {'left', 'right', 'outer', 'inner'}
            How to handle indexes of the two objects. Default: 'left'
            for joining on index, None otherwise

            * left: use calling frame's index
            * right: use input frame's index
            * outer: form union of indexes
            * inner: use intersection of indexes
        lsuffix : string
            Suffix to use from left frame's overlapping columns
        rsuffix : string
            Suffix to use from right frame's overlapping columns
        sort : boolean, default False
            Order result DataFrame lexicographically by the join key. If False,
            preserves the index order of the calling (left) DataFrame

        Notes
        -----
        on, lsuffix, and rsuffix options are not supported when passing a list
        of DataFrame objects

        Returns
        -------
        joined : DataFrame
        ")
                        (reparse-symbol indented_block_body) [148859 150942])
                    ("_join_compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150964 150968])
                            ("other" variable nil (reparse-symbol function_parameters) [150970 150975])
                            ("on" variable nil (reparse-symbol function_parameters) [150977 150979])
                            ("how" variable nil (reparse-symbol function_parameters) [150986 150989])
                            ("lsuffix" variable nil (reparse-symbol function_parameters) [150998 151005])
                            ("rsuffix" variable nil (reparse-symbol function_parameters) [151010 151017])
                            ("sort" variable nil (reparse-symbol function_parameters) [151043 151047]))                          )
                        (reparse-symbol indented_block_body) [150947 152397])
                    ("" code nil (reparse-symbol indented_block_body) [152415 152419])
                    ("" code nil (reparse-symbol indented_block_body) [152433 152456])
                    ("merge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152471 152475])
                            ("right" variable nil (reparse-symbol function_parameters) [152477 152482])
                            ("how" variable nil (reparse-symbol function_parameters) [152484 152487])
                            ("on" variable nil (reparse-symbol function_parameters) [152497 152499])
                            ("left_on" variable nil (reparse-symbol function_parameters) [152506 152513])
                            ("right_on" variable nil (reparse-symbol function_parameters) [152520 152528])
                            ("left_index" variable nil (reparse-symbol function_parameters) [152549 152559])
                            ("right_index" variable nil (reparse-symbol function_parameters) [152567 152578])
                            ("sort" variable nil (reparse-symbol function_parameters) [152586 152590])
                            ("suffixes" variable nil (reparse-symbol function_parameters) [152612 152620])
                            ("copy" variable nil (reparse-symbol function_parameters) [152635 152639]))                          )
                        (reparse-symbol indented_block_body) [152461 152930])
                    ("corr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153053 153057])
                            ("method" variable nil (reparse-symbol function_parameters) [153059 153065])
                            ("min_periods" variable nil (reparse-symbol function_parameters) [153077 153088]))                          
                        :documentation "
        Compute pairwise correlation of columns, excluding NA/null values

        Parameters
        ----------
        method : {'pearson', 'kendall', 'spearman'}
            * pearson : standard correlation coefficient
            * kendall : Kendall Tau correlation coefficient
            * spearman : Spearman rank correlation
        min_periods : int, optional
            Minimum number of observations required per pair of columns
            to have a valid result. Currently only available for pearson
            and spearman correlation

        Returns
        -------
        y : DataFrame
        ")
                        (reparse-symbol indented_block_body) [153044 154942])
                    ("cov" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154955 154959])
                            ("min_periods" variable nil (reparse-symbol function_parameters) [154961 154972]))                          
                        :documentation "
        Compute pairwise covariance of columns, excluding NA/null values

        Parameters
        ----------
        min_periods : int, optional
            Minimum number of observations required per pair of columns
            to have a valid result.

        Returns
        -------
        y : DataFrame

        Notes
        -----
        `y` contains the covariance matrix of the DataFrame's time series.
        The covariance is normalized by N-1 (unbiased estimator).
        ")
                        (reparse-symbol indented_block_body) [154947 156129])
                    ("corrwith" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156147 156151])
                            ("other" variable nil (reparse-symbol function_parameters) [156153 156158])
                            ("axis" variable nil (reparse-symbol function_parameters) [156160 156164])
                            ("drop" variable nil (reparse-symbol function_parameters) [156168 156172]))                          
                        :documentation "
        Compute pairwise correlation between rows or columns of two DataFrame
        objects.

        Parameters
        ----------
        other : DataFrame
        axis : {0, 1}
            0 to compute column-wise, 1 for row-wise
        drop : boolean, default False
            Drop missing indices from result, default returns union of all

        Returns
        -------
        correls : Series
        ")
                        (reparse-symbol indented_block_body) [156134 157502])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [157627 157631])
                            ("axis" variable nil (reparse-symbol function_parameters) [157633 157637])
                            ("level" variable nil (reparse-symbol function_parameters) [157641 157646])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [157653 157665]))                          
                        :documentation "
        Return Series with number of non-NA/null observations over requested
        axis. Works with non-floating point data as well (detects NaN and None)

        Parameters
        ----------
        axis : {0, 1}
            0 for row-wise, 1 for column-wise
        level : int or level name, default None
            If the axis is a MultiIndex (hierarchical), count along a
            particular level, collapsing into a DataFrame
        numeric_only : boolean, default False
            Include only float, int, boolean data

        Returns
        -------
        count : Series (or DataFrame if level specified)
        ")
                        (reparse-symbol indented_block_body) [157617 159051])
                    ("_count_level" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159073 159077])
                            ("level" variable nil (reparse-symbol function_parameters) [159079 159084])
                            ("axis" variable nil (reparse-symbol function_parameters) [159086 159090])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [159094 159106]))                          )
                        (reparse-symbol indented_block_body) [159056 160516])
                    ("_reduce" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160533 160537])
                            ("op" variable nil (reparse-symbol function_parameters) [160539 160541])
                            ("name" variable nil (reparse-symbol function_parameters) [160543 160547])
                            ("axis" variable nil (reparse-symbol function_parameters) [160549 160553])
                            ("skipna" variable nil (reparse-symbol function_parameters) [160557 160563])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [160570 160582])
                            ("filter_type" variable nil (reparse-symbol function_parameters) [160605 160616])
                            ("kwds" variable nil (reparse-symbol function_parameters) [160623 160629]))                          )
                        (reparse-symbol indented_block_body) [160521 163526])
                    ("idxmin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163542 163546])
                            ("axis" variable nil (reparse-symbol function_parameters) [163548 163552])
                            ("skipna" variable nil (reparse-symbol function_parameters) [163556 163562]))                          
                        :documentation "
        Return index of first occurrence of minimum over requested axis.
        NA/null values are excluded.

        Parameters
        ----------
        axis : {0, 1}
            0 for row-wise, 1 for column-wise
        skipna : boolean, default True
            Exclude NA/null values. If an entire row/column is NA, the result
            will be NA

        Returns
        -------
        idxmin : Series

        Notes
        -----
        This method is the DataFrame version of ``ndarray.argmin``.

        See Also
        --------
        Series.idxmin
        ")
                        (reparse-symbol indented_block_body) [163531 164441])
                    ("idxmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [164457 164461])
                            ("axis" variable nil (reparse-symbol function_parameters) [164463 164467])
                            ("skipna" variable nil (reparse-symbol function_parameters) [164471 164477]))                          
                        :documentation "
        Return index of first occurrence of maximum over requested axis.
        NA/null values are excluded.

        Parameters
        ----------
        axis : {0, 1}
            0 for row-wise, 1 for column-wise
        skipna : boolean, default True
            Exclude NA/null values. If an entire row/column is NA, the result
            will be first index.

        Returns
        -------
        idxmax : Series

        Notes
        -----
        This method is the DataFrame version of ``ndarray.argmax``.

        See Also
        --------
        Series.idxmax
        ")
                        (reparse-symbol indented_block_body) [164446 165366])
                    ("_get_agg_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165389 165393])
                            ("axis_num" variable nil (reparse-symbol function_parameters) [165395 165403]))                          
                        :documentation " let's be explict about this ")
                        (reparse-symbol indented_block_body) [165371 165652])
                    ("mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165666 165670])
                            ("axis" variable nil (reparse-symbol function_parameters) [165672 165676])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [165680 165692]))                          
                        :documentation "
        Gets the mode of each element along the axis selected. Empty if nothing
        has 2+ occurrences. Adds a row for each mode per label, fills in gaps
        with nan.

        Parameters
        ----------
        axis : {0, 1, 'index', 'columns'} (default 0)
            * 0/'index' : get mode of each column
            * 1/'columns' : get mode of each row
        numeric_only : boolean, default False
            if True, only apply to numeric columns

        Returns
        -------
        modes : DataFrame (sorted)
        ")
                        (reparse-symbol indented_block_body) [165657 166399])
                    ("quantile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166417 166421])
                            ("q" variable nil (reparse-symbol function_parameters) [166423 166424])
                            ("axis" variable nil (reparse-symbol function_parameters) [166430 166434])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [166438 166450]))                          
                        :documentation "
        Return values at the given quantile over requested axis, a la
        numpy.percentile.

        Parameters
        ----------
        q : float or array-like, default 0.5 (50% quantile)
            0 <= q <= 1, the quantile(s) to compute
        axis : {0, 1}
            0 for row-wise, 1 for column-wise

        Returns
        -------
        quantiles : Series or DataFrame
            If ``q`` is an array, a DataFrame will be returned where the
            index is ``q``, the columns are the columns of self, and the
            values are the quantiles.
            If ``q`` is a float, a Series will be returned where the
            index is the columns of self and the values are the quantiles.

        Examples
        --------

        >>> df = DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),
                          columns=['a', 'b'])
        >>> df.quantile(.1)
        a    1.3
        b    3.7
        dtype: float64
        >>> df.quantile([.1, .5])
               a     b
        0.1  1.3   3.7
        0.5  2.5  55.0
        ")
                        (reparse-symbol indented_block_body) [166404 169015])
                    ("rank" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [169029 169033])
                            ("axis" variable nil (reparse-symbol function_parameters) [169035 169039])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [169043 169055])
                            ("method" variable nil (reparse-symbol function_parameters) [169062 169068])
                            ("na_option" variable nil (reparse-symbol function_parameters) [169093 169102])
                            ("ascending" variable nil (reparse-symbol function_parameters) [169111 169120])
                            ("pct" variable nil (reparse-symbol function_parameters) [169127 169130]))                          
                        :documentation "
        Compute numerical data ranks (1 through n) along axis. Equal values are
        assigned a rank that is the average of the ranks of those values

        Parameters
        ----------
        axis : {0, 1}, default 0
            Ranks over columns (0) or rows (1)
        numeric_only : boolean, default None
            Include only float, int, boolean data
        method : {'average', 'min', 'max', 'first', 'dense'}
            * average: average rank of group
            * min: lowest rank in group
            * max: highest rank in group
            * first: ranks assigned in order they appear in the array
            * dense: like 'min', but rank always increases by 1 between groups
        na_option : {'keep', 'top', 'bottom'}
            * keep: leave NA values where they are
            * top: smallest rank if ascending
            * bottom: smallest rank if descending
        ascending : boolean, default True
            False for ranks by high (1) to low (N)
        pct : boolean, default False
            Computes percentage rank of data

        Returns
        -------
        ranks : DataFrame
        ")
                        (reparse-symbol indented_block_body) [169020 171107])
                    ("to_timestamp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171129 171133])
                            ("freq" variable nil (reparse-symbol function_parameters) [171135 171139])
                            ("how" variable nil (reparse-symbol function_parameters) [171146 171149])
                            ("axis" variable nil (reparse-symbol function_parameters) [171159 171163])
                            ("copy" variable nil (reparse-symbol function_parameters) [171167 171171]))                          
                        :documentation "
        Cast to DatetimeIndex of timestamps, at *beginning* of period

        Parameters
        ----------
        freq : string, default frequency of PeriodIndex
            Desired frequency
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end
        axis : {0, 1} default 0
            The axis to convert (the index by default)
        copy : boolean, default True
            If false then underlying input data is not copied

        Returns
        -------
        df : DataFrame with DatetimeIndex
        ")
                        (reparse-symbol indented_block_body) [171112 172283])
                    ("to_period" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [172302 172306])
                            ("freq" variable nil (reparse-symbol function_parameters) [172308 172312])
                            ("axis" variable nil (reparse-symbol function_parameters) [172319 172323])
                            ("copy" variable nil (reparse-symbol function_parameters) [172327 172331]))                          
                        :documentation "
        Convert DataFrame from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed)

        Parameters
        ----------
        freq : string, default
        axis : {0, 1}, default 0
            The axis to convert (the index by default)
        copy : boolean, default True
            If False then underlying input data is not copied

        Returns
        -------
        ts : TimeSeries with PeriodIndex
        ")
                        (reparse-symbol indented_block_body) [172288 173285])
                    ("isin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [173299 173303])
                            ("values" variable nil (reparse-symbol function_parameters) [173305 173311]))                          
                        :documentation "
        Return boolean DataFrame showing whether each element in the
        DataFrame is contained in values.

        Parameters
        ----------
        values : iterable, Series, DataFrame or dictionary
            The result will only be true at a location if all the
            labels match. If `values` is a Series, that's the index. If
            `values` is a dictionary, the keys must be the column names,
            which must match. If `values` is a DataFrame,
            then both the index and column labels must match.

        Returns
        -------

        DataFrame of booleans

        Examples
        --------
        When ``values`` is a list:

        >>> df = DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})
        >>> df.isin([1, 3, 12, 'a'])
               A      B
        0   True   True
        1  False  False
        2   True  False

        When ``values`` is a dict:

        >>> df = DataFrame({'A': [1, 2, 3], 'B': [1, 4, 7]})
        >>> df.isin({'A': [1, 3], 'B': [4, 7, 12]})
               A      B
        0   True  False  # Note that B didn't match the 1 here.
        1  False   True
        2   True   True

        When ``values`` is a Series or DataFrame:

        >>> df = DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})
        >>> other = DataFrame({'A': [1, 3, 3, 2], 'B': ['e', 'f', 'f', 'e']})
        >>> df.isin(other)
               A      B
        0   True  False
        1  False  False  # Column A in `other` has a 3, but not at index 1.
        2   True   True
        ")
                        (reparse-symbol indented_block_body) [173290 176318])
                    ("combineAdd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [176438 176442])
                            ("other" variable nil (reparse-symbol function_parameters) [176444 176449]))                          
                        :documentation "
        Add two DataFrame objects and do not propagate
        NaN values, so if for a (column, time) one frame is missing a
        value, it will default to the other frame's value (which might
        be NaN as well)

        Parameters
        ----------
        other : DataFrame

        Returns
        -------
        DataFrame
        ")
                        (reparse-symbol indented_block_body) [176423 176858])
                    ("combineMult" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [176879 176883])
                            ("other" variable nil (reparse-symbol function_parameters) [176885 176890]))                          
                        :documentation "
        Multiply two DataFrame objects and do not propagate NaN values, so if
        for a (column, time) one frame is missing a value, it will default to
        the other frame's value (which might be NaN as well)

        Parameters
        ----------
        other : DataFrame

        Returns
        -------
        DataFrame
        ")
                        (reparse-symbol indented_block_body) [176863 177296]))                  
                :type "class")
                nil [5326 177296])
            ("DataFrame" code nil nil [177298 177434])
            ("DataFrame" code nil nil [177435 177470])
            ("_EMPTY_SERIES" variable nil nil [177472 177498])
            ("_arrays_to_mgr" function
               (:documentation "
    Segregate Series based on type and coerce into matrices.
    Needs to handle a lot of exceptional cases.
    "
                :arguments 
                  ( ("arrays" variable nil (reparse-symbol function_parameters) [177519 177525])
                    ("arr_names" variable nil (reparse-symbol function_parameters) [177527 177536])
                    ("index" variable nil (reparse-symbol function_parameters) [177538 177543])
                    ("columns" variable nil (reparse-symbol function_parameters) [177545 177552])
                    ("dtype" variable nil (reparse-symbol function_parameters) [177554 177559]))                  )
                nil [177500 178120])
            ("extract_index" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [178140 178144]))              ) nil [178122 179753])
            ("_prep_ndarray" function (:arguments 
              ( ("values" variable nil (reparse-symbol function_parameters) [179773 179779])
                ("copy" variable nil (reparse-symbol function_parameters) [179781 179785]))              ) nil [179755 180753])
            ("_to_arrays" function
               (:documentation "
    Return list of arrays, columns
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [180770 180774])
                    ("columns" variable nil (reparse-symbol function_parameters) [180776 180783])
                    ("coerce_float" variable nil (reparse-symbol function_parameters) [180785 180797])
                    ("dtype" variable nil (reparse-symbol function_parameters) [180805 180810]))                  )
                nil [180755 182650])
            ("_masked_rec_array_to_mgr" function
               (:documentation " extract from a masked rec array and create the manager "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [182681 182685])
                    ("index" variable nil (reparse-symbol function_parameters) [182687 182692])
                    ("columns" variable nil (reparse-symbol function_parameters) [182694 182701])
                    ("dtype" variable nil (reparse-symbol function_parameters) [182703 182708])
                    ("copy" variable nil (reparse-symbol function_parameters) [182710 182714]))                  )
                nil [182652 183763])
            ("_reorder_arrays" function (:arguments 
              ( ("arrays" variable nil (reparse-symbol function_parameters) [183785 183791])
                ("arr_columns" variable nil (reparse-symbol function_parameters) [183793 183804])
                ("columns" variable nil (reparse-symbol function_parameters) [183806 183813]))              ) nil [183765 184203])
            ("_list_to_arrays" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [184225 184229])
                ("columns" variable nil (reparse-symbol function_parameters) [184231 184238])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [184240 184252])
                ("dtype" variable nil (reparse-symbol function_parameters) [184260 184265]))              ) nil [184205 184595])
            ("_list_of_series_to_arrays" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [184627 184631])
                ("columns" variable nil (reparse-symbol function_parameters) [184633 184640])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [184642 184654])
                ("dtype" variable nil (reparse-symbol function_parameters) [184662 184667]))              ) nil [184597 185621])
            ("_list_of_dict_to_arrays" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [185651 185655])
                ("columns" variable nil (reparse-symbol function_parameters) [185657 185664])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [185666 185678])
                ("dtype" variable nil (reparse-symbol function_parameters) [185686 185691]))              ) nil [185623 186158])
            ("_convert_object_array" function (:arguments 
              ( ("content" variable nil (reparse-symbol function_parameters) [186186 186193])
                ("columns" variable nil (reparse-symbol function_parameters) [186195 186202])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [186204 186216])
                ("dtype" variable nil (reparse-symbol function_parameters) [186224 186229]))              ) nil [186160 186939])
            ("_get_names_from_index" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [186967 186971]))              ) nil [186941 187364])
            ("_homogenize" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [187382 187386])
                ("index" variable nil (reparse-symbol function_parameters) [187388 187393])
                ("dtype" variable nil (reparse-symbol function_parameters) [187395 187400]))              ) nil [187366 188374])
            ("_from_nested_dict" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [188398 188402]))              ) nil [188376 188687])
            ("_put_str" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [188702 188703])
                ("space" variable nil (reparse-symbol function_parameters) [188705 188710]))              ) nil [188689 188756])
            ("pandas.tools.plotting" include nil nil [188867 188902])
            ("DataFrame" variable nil nil [188904 188935])
            ("DataFrame" variable nil nil [188936 188967])
            ("" code nil nil [188979 189025])
            ("boxplot" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [189038 189042])
                    ("column" variable nil (reparse-symbol function_parameters) [189044 189050])
                    ("by" variable nil (reparse-symbol function_parameters) [189057 189059])
                    ("ax" variable nil (reparse-symbol function_parameters) [189066 189068])
                    ("fontsize" variable nil (reparse-symbol function_parameters) [189075 189083])
                    ("rot" variable nil (reparse-symbol function_parameters) [189102 189105])
                    ("grid" variable nil (reparse-symbol function_parameters) [189109 189113])
                    ("figsize" variable nil (reparse-symbol function_parameters) [189120 189127])
                    ("layout" variable nil (reparse-symbol function_parameters) [189134 189140])
                    ("return_type" variable nil (reparse-symbol function_parameters) [189147 189158])
                    ("kwds" variable nil (reparse-symbol function_parameters) [189177 189183]))                  )
                nil [189026 189539])
            ("DataFrame" variable nil nil [189540 189567])
            ("ops" code nil nil [189569 189635])
            ("ops" code nil nil [189636 189708])
            ("if" code nil nil [189710 189860]))          
      :file "frame.py"
      :pointmax 189860
      :fsize 189859
      :lastmodtime '(21808 10978 0 0)
      :unmatched-syntax '((NAME 168099 . 168103) (IF 168131 . 168133) (ELSE 168147 . 168151) (NAME 166266 . 166270) (IF 166278 . 166280) (ELSE 166298 . 166302) (INDENT_BLOCK 161153 . 162291) (NEWLINE 161113 . 161114) (COLON 161112 . 161113) (TRY 161002 . 161005) (AS 161108 . 161110) (NAME 157320 . 157325) (IF 157330 . 157332) (ELSE 157343 . 157347) (NAME 147806 . 147811) (IF 147819 . 147821) (ELSE 147841 . 147845) (INDENT_BLOCK 143518 . 143836) (NEWLINE 143517 . 143518) (COLON 143516 . 143517) (TRY 143346 . 143349) (AS 143512 . 143514) (NAME 142154 . 142159) (IF 142169 . 142171) (ELSE 142192 . 142196) (NAME 128653 . 128661) (IF 128673 . 128675) (ELSE 128697 . 128701) (NAME 128590 . 128598) (IF 128610 . 128612) (ELSE 128634 . 128638) (NAME 116541 . 116543) (IF 116554 . 116556) (ELSE 116567 . 116571) (NAME 103719 . 103723) (IF 103734 . 103736) (ELSE 103757 . 103761) (INDENT_BLOCK 88501 . 88745) (NEWLINE 88462 . 88463) (COLON 88461 . 88462) (TRY 88358 . 88361) (AS 88457 . 88459) (INDENT_BLOCK 15071 . 15247) (NEWLINE 15070 . 15071) (COLON 15069 . 15070) (TRY 14974 . 14977) (AS 15062 . 15064) (INDENT_BLOCK 10573 . 10755) (NEWLINE 10572 . 10573) (COLON 10571 . 10572) (TRY 10458 . 10461) (AS 10567 . 10569)))
    (semanticdb-table "index.py"
      :major-mode 'python-mode
      :tags nil
      :file "index.py"
      :pointmax 173980
      :fsize 173979
      :lastmodtime '(21808 10978 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "generic.py"
      :file "generic.py"
      :fsize 153157
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "series.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Data structure for 1-dimensional cross-sectional and time series data
\"\"\"" code nil nil [1 78])
            ("__future__" include nil nil [79 110])
            ("types" include nil nil [185 197])
            ("warnings" include nil nil [198 213])
            ("numpy" include nil nil [215 245])
            ("numpy" include nil nil [246 264])
            ("numpy.ma" include nil nil [265 286])
            ("" code nil nil [319 938])
            ("" code nil nil [969 1053])
            ("pandas.core.indexing" include nil nil [1054 1128])
            ("pandas.core" include nil nil [1129 1166])
            ("pandas.core.internals" include nil nil [1167 1219])
            ("pandas.core.categorical" include nil nil [1220 1288])
            ("pandas.core.strings" include nil nil [1289 1334])
            ("" code nil nil [1369 1459])
            ("pandas.tseries.index" include nil nil [1460 1506])
            ("pandas.tseries.tdi" include nil nil [1507 1552])
            ("pandas.tseries.period" include nil nil [1553 1606])
            ("pandas" include nil nil [1607 1632])
            ("pandas.util.terminal" include nil nil [1633 1683])
            ("pandas.compat" include nil nil [1684 1739])
            ("pandas.core.ops" include nil nil [1741 1770])
            ("pandas.core.algorithms" include nil nil [1771 1814])
            ("pandas.core.common" include nil nil [1816 1848])
            ("pandas.core.datetools" include nil nil [1849 1890])
            ("pandas.core.format" include nil nil [1891 1923])
            ("pandas.core.nanops" include nil nil [1924 1959])
            ("pandas.util.decorators" include nil nil [1960 2019])
            ("pandas.lib" include nil nil [2021 2045])
            ("pandas.tslib" include nil nil [2046 2074])
            ("pandas.index" include nil nil [2075 2104])
            ("numpy" include nil nil [2106 2147])
            ("pandas.core.config" include nil nil [2148 2189])
            ("__all__" variable nil nil [2191 2211])
            ("_shared_doc_kwargs" variable nil nil [2214 2457])
            ("_coerce_method" function
               (:documentation " install the scalar coercion methods "
                :arguments 
                  ( ("converter" variable nil (reparse-symbol function_parameters) [2479 2488]))                  )
                nil [2460 2748])
            ("Series" type
               (:documentation "
    One-dimensional ndarray with axis labels (including time series).

    Labels need not be unique but must be any hashable type. The object
    supports both integer- and label-based indexing and provides a host of
    methods for performing operations involving the index. Statistical
    methods from ndarray have been overridden to automatically exclude
    missing data (currently represented as NaN)

    Operations between Series (+, -, /, *, **) align values based on their
    associated index values-- they need not be the same length. The result
    index will be the sorted union of the two indexes.

    Parameters
    ----------
    data : array-like, dict, or scalar value
        Contains data stored in Series
    index : array-like or Index (1d)
        Values must be unique and hashable, same length as data. Index
        object (or other iterable of same length as data) Will default to
        np.arange(len(data)) if not provided. If both a dict and index
        sequence are used, the index will override the keys found in the
        dict.
    dtype : numpy.dtype or None
        If None, dtype will be inferred
    copy : boolean, default False
        Copy input data
    "
                :superclasses ("base.IndexOpsMixin" "generic.NDFrame")
                :members 
                  ( ("_metadata" variable nil (reparse-symbol indented_block_body) [4110 4130])
                    ("_accessors" variable nil (reparse-symbol indented_block_body) [4135 4179])
                    ("_allow_index_ops" variable nil (reparse-symbol indented_block_body) [4184 4207])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4386 8164])
                            ("generic" code nil (reparse-symbol indented_block_body) [8173 8224])
                            ("object" code nil (reparse-symbol indented_block_body) [8234 8272])
                            ("self" code nil (reparse-symbol indented_block_body) [8281 8320]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4226 4230])
                            ("data" variable nil (reparse-symbol function_parameters) [4232 4236])
                            ("index" variable nil (reparse-symbol function_parameters) [4243 4248])
                            ("dtype" variable nil (reparse-symbol function_parameters) [4255 4260])
                            ("name" variable nil (reparse-symbol function_parameters) [4267 4271])
                            ("copy" variable nil (reparse-symbol function_parameters) [4295 4299])
                            ("fastpath" variable nil (reparse-symbol function_parameters) [4307 4315]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4213 8321])
                    ("from_array" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8358 8361])
                            ("arr" variable nil (reparse-symbol function_parameters) [8363 8366])
                            ("index" variable nil (reparse-symbol function_parameters) [8368 8373])
                            ("name" variable nil (reparse-symbol function_parameters) [8380 8384])
                            ("dtype" variable nil (reparse-symbol function_parameters) [8391 8396])
                            ("copy" variable nil (reparse-symbol function_parameters) [8403 8407])
                            ("fastpath" variable nil (reparse-symbol function_parameters) [8434 8442]))                          )
                        (reparse-symbol indented_block_body) [8326 8714])
                    ("_constructor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8750 8754]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8719 8779])
                    ("_can_hold_na" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8827 8831]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8796 8873])
                    ("is_time_series" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8911 8915]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8878 8987])
                    ("_index" variable nil (reparse-symbol indented_block_body) [8992 9005])
                    ("_set_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9025 9029])
                            ("axis" variable nil (reparse-symbol function_parameters) [9031 9035])
                            ("labels" variable nil (reparse-symbol function_parameters) [9037 9043])
                            ("fastpath" variable nil (reparse-symbol function_parameters) [9045 9053]))                          
                        :documentation " override generic, we want to set the _typ here ")
                        (reparse-symbol indented_block_body) [9011 9705])
                    ("_set_subtyp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9726 9730])
                            ("is_all_dates" variable nil (reparse-symbol function_parameters) [9732 9744]))                          )
                        (reparse-symbol indented_block_body) [9710 9907])
                    ("_update_inplace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9932 9936])
                            ("result" variable nil (reparse-symbol function_parameters) [9938 9944])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9946 9954]))                          )
                        (reparse-symbol indented_block_body) [9912 10100])
                    ("dtype" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10157 10161]))                          
                        :documentation " return the dtype object of the underlying data ")
                        (reparse-symbol indented_block_body) [10133 10259])
                    ("dtypes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10289 10293]))                          
                        :documentation " return the dtype object of the underlying data ")
                        (reparse-symbol indented_block_body) [10264 10391])
                    ("ftype" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10420 10424]))                          
                        :documentation " return if the data is sparse|dense ")
                        (reparse-symbol indented_block_body) [10396 10510])
                    ("ftypes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10540 10544]))                          
                        :documentation " return if the data is sparse|dense ")
                        (reparse-symbol indented_block_body) [10515 10630])
                    ("values" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10660 10664]))                          
                        :documentation "
        Return Series as ndarray

        Returns
        -------
        arr : numpy.ndarray
        ")
                        (reparse-symbol indented_block_body) [10635 10818])
                    ("get_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10838 10842]))                          
                        :documentation " same as values (but handles sparseness conversions); is a view ")
                        (reparse-symbol indented_block_body) [10823 10963])
                    ("ravel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10989 10993])
                            ("order" variable nil (reparse-symbol function_parameters) [10995 11000]))                          
                        :documentation "
        Return the flattened underlying data as an ndarray

        See also
        --------
        numpy.ndarray.ravel
        ")
                        (reparse-symbol indented_block_body) [10979 11199])
                    ("compress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11217 11221])
                            ("condition" variable nil (reparse-symbol function_parameters) [11223 11232])
                            ("axis" variable nil (reparse-symbol function_parameters) [11234 11238])
                            ("out" variable nil (reparse-symbol function_parameters) [11242 11245])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11252 11260]))                          
                        :documentation "
        Return selected slices of an array along given axis as a Series

        See also
        --------
        numpy.ndarray.compress
        ")
                        (reparse-symbol indented_block_body) [11204 11456])
                    ("nonzero" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11473 11477]))                          
                        :documentation "
        Return the indices of the elements that are non-zero

        This method is equivalent to calling `numpy.nonzero` on the
        series data. For compatability with NumPy, the return value is
        the same (a tuple with an array of indices for each dimension),
        but it will always be a one-item tuple because series only have
        one dimension.

        Examples
        --------
        >>> s = pd.Series([0, 3, 0, 4])
        >>> s.nonzero()
        (array([1, 3]),)
        >>> s.iloc[s.nonzero()[0]]
        1    3
        3    4
        dtype: int64

        See Also
        --------
        numpy.nonzero
        ")
                        (reparse-symbol indented_block_body) [11461 12176])
                    ("put" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12189 12193])
                            ("args" variable nil (reparse-symbol function_parameters) [12195 12200])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12202 12210]))                          
                        :documentation "
        return a ndarray with the values put

        See also
        --------
        numpy.ndarray.put
        ")
                        (reparse-symbol indented_block_body) [12181 12384])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12401 12405]))                          
                        :documentation "
        return the length of the Series
        ")
                        (reparse-symbol indented_block_body) [12389 12503])
                    ("view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12517 12521])
                            ("dtype" variable nil (reparse-symbol function_parameters) [12523 12528]))                          )
                        (reparse-symbol indented_block_body) [12508 12664])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12683 12687])
                            ("result" variable nil (reparse-symbol function_parameters) [12689 12695]))                          
                        :documentation "
        the array interface, return my values
        ")
                        (reparse-symbol indented_block_body) [12669 12806])
                    ("__array_wrap__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12830 12834])
                            ("result" variable nil (reparse-symbol function_parameters) [12836 12842])
                            ("context" variable nil (reparse-symbol function_parameters) [12844 12851]))                          
                        :documentation "
        Gets called after a ufunc
        ")
                        (reparse-symbol indented_block_body) [12811 13040])
                    ("__array_prepare__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13067 13071])
                            ("result" variable nil (reparse-symbol function_parameters) [13073 13079])
                            ("context" variable nil (reparse-symbol function_parameters) [13081 13088]))                          
                        :documentation "
        Gets called prior to a ufunc
        ")
                        (reparse-symbol indented_block_body) [13045 13655])
                    ("real" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13697 13701]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13674 13736])
                    ("real" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13767 13771])
                            ("v" variable nil (reparse-symbol function_parameters) [13773 13774]))                          
                        :decorators 
                          ( ("real.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13741 13806])
                    ("imag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13834 13838]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13811 13873])
                    ("imag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13904 13908])
                            ("v" variable nil (reparse-symbol function_parameters) [13910 13911]))                          
                        :decorators 
                          ( ("imag.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13878 13943])
                    ("__float__" variable nil (reparse-symbol indented_block_body) [13963 13996])
                    ("__long__" variable nil (reparse-symbol indented_block_body) [14001 14031])
                    ("__int__" variable nil (reparse-symbol indented_block_body) [14036 14065])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14122 14126]))                          )
                        (reparse-symbol indented_block_body) [14105 14183])
                    ("_unpickle_series_compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14216 14220])
                            ("state" variable nil (reparse-symbol function_parameters) [14222 14227]))                          )
                        (reparse-symbol indented_block_body) [14188 15049])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15092 15096]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15069 15127])
                    ("_ixs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15141 15145])
                            ("i" variable nil (reparse-symbol function_parameters) [15147 15148])
                            ("axis" variable nil (reparse-symbol function_parameters) [15150 15154]))                          
                        :documentation "
        Return the i-th value or values in the Series by location

        Parameters
        ----------
        i : int, slice, or sequence of integers

        Returns
        -------
        value : scalar (int) or Series (slice, sequence)
        ")
                        (reparse-symbol indented_block_body) [15132 16140])
                    ("_is_mixed_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16178 16182]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16145 16206])
                    ("_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16222 16226])
                            ("slobj" variable nil (reparse-symbol function_parameters) [16228 16233])
                            ("axis" variable nil (reparse-symbol function_parameters) [16235 16239])
                            ("kind" variable nil (reparse-symbol function_parameters) [16243 16247]))                          )
                        (reparse-symbol indented_block_body) [16211 16375])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16396 16400])
                            ("key" variable nil (reparse-symbol function_parameters) [16402 16405]))                          )
                        (reparse-symbol indented_block_body) [16380 17882])
                    ("_get_with" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17901 17905])
                            ("key" variable nil (reparse-symbol function_parameters) [17907 17910]))                          )
                        (reparse-symbol indented_block_body) [17887 19837])
                    ("_get_values_tuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19864 19868])
                            ("key" variable nil (reparse-symbol function_parameters) [19870 19873]))                          )
                        (reparse-symbol indented_block_body) [19842 20347])
                    ("_get_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20368 20372])
                            ("indexer" variable nil (reparse-symbol function_parameters) [20374 20381]))                          )
                        (reparse-symbol indented_block_body) [20352 20602])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20623 20627])
                            ("key" variable nil (reparse-symbol function_parameters) [20629 20632])
                            ("value" variable nil (reparse-symbol function_parameters) [20634 20639]))                          )
                        (reparse-symbol indented_block_body) [20607 22687])
                    ("_set_with_engine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22713 22717])
                            ("key" variable nil (reparse-symbol function_parameters) [22719 22722])
                            ("value" variable nil (reparse-symbol function_parameters) [22724 22729]))                          )
                        (reparse-symbol indented_block_body) [22692 22950])
                    ("_set_with" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22969 22973])
                            ("key" variable nil (reparse-symbol function_parameters) [22975 22978])
                            ("value" variable nil (reparse-symbol function_parameters) [22980 22985]))                          )
                        (reparse-symbol indented_block_body) [22955 24106])
                    ("_set_labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24127 24131])
                            ("key" variable nil (reparse-symbol function_parameters) [24133 24136])
                            ("value" variable nil (reparse-symbol function_parameters) [24138 24143]))                          )
                        (reparse-symbol indented_block_body) [24111 24513])
                    ("_set_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24534 24538])
                            ("key" variable nil (reparse-symbol function_parameters) [24540 24543])
                            ("value" variable nil (reparse-symbol function_parameters) [24545 24550]))                          )
                        (reparse-symbol indented_block_body) [24518 24720])
                    ("_get_val_at" variable nil (reparse-symbol indented_block_body) [24753 24786])
                    ("repeat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24803 24807])
                            ("reps" variable nil (reparse-symbol function_parameters) [24809 24813]))                          
                        :documentation "
        return a new Series with the values repeated reps times

        See also
        --------
        numpy.ndarray.repeat
        ")
                        (reparse-symbol indented_block_body) [24792 25172])
                    ("reshape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25189 25193])
                            ("args" variable nil (reparse-symbol function_parameters) [25195 25200])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25202 25210]))                          
                        :documentation "
        return an ndarray with the values shape
        if the specified shape matches exactly the current shape, then
        return self (for compat)

        See also
        --------
        numpy.ndarray.take
        ")
                        (reparse-symbol indented_block_body) [25177 25743])
                    ("iget_value" variable nil (reparse-symbol indented_block_body) [25748 25765])
                    ("iget" variable nil (reparse-symbol indented_block_body) [25770 25781])
                    ("irow" variable nil (reparse-symbol indented_block_body) [25786 25797])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25817 25821])
                            ("label" variable nil (reparse-symbol function_parameters) [25823 25828])
                            ("takeable" variable nil (reparse-symbol function_parameters) [25830 25838]))                          
                        :documentation "
        Quickly retrieve single value at passed index label

        Parameters
        ----------
        index : label
        takeable : interpret the index as indexers, default False

        Returns
        -------
        value : scalar value
        ")
                        (reparse-symbol indented_block_body) [25803 26268])
                    ("set_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26287 26291])
                            ("label" variable nil (reparse-symbol function_parameters) [26293 26298])
                            ("value" variable nil (reparse-symbol function_parameters) [26300 26305])
                            ("takeable" variable nil (reparse-symbol function_parameters) [26307 26315]))                          
                        :documentation "
        Quickly set single value at passed label. If label is not contained, a
        new object is created with the label placed at the end of the result
        index

        Parameters
        ----------
        label : object
            Partial indexing with MultiIndex not allowed
        value : object
            Scalar value
        takeable : interpret the index as indexers, default False

        Returns
        -------
        series : Series
            If label is contained, will be reference to calling Series,
            otherwise a new object
        ")
                        (reparse-symbol indented_block_body) [26273 27243])
                    ("reset_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27264 27268])
                            ("level" variable nil (reparse-symbol function_parameters) [27270 27275])
                            ("drop" variable nil (reparse-symbol function_parameters) [27282 27286])
                            ("name" variable nil (reparse-symbol function_parameters) [27294 27298])
                            ("inplace" variable nil (reparse-symbol function_parameters) [27305 27312]))                          
                        :documentation "
        Analogous to the :meth:`pandas.DataFrame.reset_index` function, see
        docstring there.

        Parameters
        ----------
        level : int, str, tuple, or list, default None
            Only remove the given levels from the index. Removes all levels by
            default
        drop : boolean, default False
            Do not try to insert index into dataframe columns
        name : object, default None
            The name of the column corresponding to the Series values
        inplace : boolean, default False
            Modify the Series in place (do not create a new object)

        Returns
        ----------
        resetted : DataFrame, or Series if drop == True
        ")
                        (reparse-symbol indented_block_body) [27248 29066])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29087 29091]))                          
                        :documentation "
        Return a string representation for a particular DataFrame

        Invoked by unicode(df) in py2 only. Yields a Unicode String in both
        py2/py3.
        ")
                        (reparse-symbol indented_block_body) [29071 29639])
                    ("_repr_footer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29661 29665]))                          )
                        (reparse-symbol indented_block_body) [29644 30675])
                    ("to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30694 30698])
                            ("buf" variable nil (reparse-symbol function_parameters) [30700 30703])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [30710 30716])
                            ("float_format" variable nil (reparse-symbol function_parameters) [30724 30736])
                            ("header" variable nil (reparse-symbol function_parameters) [30743 30749])
                            ("length" variable nil (reparse-symbol function_parameters) [30774 30780])
                            ("dtype" variable nil (reparse-symbol function_parameters) [30788 30793])
                            ("name" variable nil (reparse-symbol function_parameters) [30801 30805])
                            ("max_rows" variable nil (reparse-symbol function_parameters) [30813 30821]))                          
                        :documentation "
        Render a string representation of the Series

        Parameters
        ----------
        buf : StringIO-like, optional
            buffer to write to
        na_rep : string, optional
            string representation of NAN to use, default 'NaN'
        float_format : one-parameter function, optional
            formatter function to apply to columns' elements if they are floats
            default None
        header: boolean, default True
            Add the Series header (index name)
        length : boolean, default False
            Add the Series length
        dtype : boolean, default False
            Add the Series dtype
        name : boolean, default False
            Add the Series name if not None
        max_rows : int, optional
            Maximum number of rows to show before truncating. If None, show
            all.

        Returns
        -------
        formatted : string (if not buffer passed)
        ")
                        (reparse-symbol indented_block_body) [30680 32539])
                    ("_get_repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32567 32571])
                            ("name" variable nil (reparse-symbol function_parameters) [32573 32577])
                            ("header" variable nil (reparse-symbol function_parameters) [32585 32591])
                            ("length" variable nil (reparse-symbol function_parameters) [32598 32604])
                            ("dtype" variable nil (reparse-symbol function_parameters) [32611 32616])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [32623 32629])
                            ("float_format" variable nil (reparse-symbol function_parameters) [32649 32661])
                            ("max_rows" variable nil (reparse-symbol function_parameters) [32668 32676]))                          
                        :documentation "

        Internal function, should always return unicode string
        ")
                        (reparse-symbol indented_block_body) [32544 33495])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33513 33517]))                          )
                        (reparse-symbol indented_block_body) [33500 33887])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33906 33910]))                          
                        :documentation "
        Lazily iterate over (index, value) tuples
        ")
                        (reparse-symbol indented_block_body) [33892 34036])
                    ("if" code nil (reparse-symbol indented_block_body) [34041 34102])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34219 34223]))                          )
                        (reparse-symbol indented_block_body) [34210 34278])
                    ("tolist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34294 34298]))                          
                        :documentation " Convert Series to a nested list ")
                        (reparse-symbol indented_block_body) [34283 34375])
                    ("to_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34392 34396]))                          
                        :documentation "
        Convert Series to {label -> value} dict

        Returns
        -------
        value_dict : dict
        ")
                        (reparse-symbol indented_block_body) [34380 34574])
                    ("to_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34592 34596])
                            ("name" variable nil (reparse-symbol function_parameters) [34598 34602]))                          
                        :documentation "
        Convert Series to DataFrame

        Parameters
        ----------
        name : object, default None
            The passed name should substitute for the series name (if it has
            one).

        Returns
        -------
        data_frame : DataFrame
        ")
                        (reparse-symbol indented_block_body) [34579 35084])
                    ("to_sparse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35103 35107])
                            ("kind" variable nil (reparse-symbol function_parameters) [35109 35113])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [35123 35133]))                          
                        :documentation "
        Convert Series to SparseSeries

        Parameters
        ----------
        kind : {'block', 'integer'}
        fill_value : float, defaults to NaN (missing)

        Returns
        -------
        sp : SparseSeries
        ")
                        (reparse-symbol indented_block_body) [35089 35559])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35730 35734])
                            ("level" variable nil (reparse-symbol function_parameters) [35736 35741]))                          
                        :documentation "
        Return number of non-NA/null observations in the Series

        Parameters
        ----------
        level : int or level name, default None
            If the axis is a MultiIndex (hierarchical), count along a
            particular level, collapsing into a smaller Series

        Returns
        -------
        nobs : int or Series (if level specified)
        ")
                        (reparse-symbol indented_block_body) [35720 36956])
                    ("mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36970 36974]))                          
                        :documentation "Returns the mode(s) of the dataset.

        Empty if nothing occurs at least 2 times.  Always returns Series even
        if only one value.

        Parameters
        ----------
        sort : bool, default True
            If True, will lexicographically sort values, if False skips
            sorting. Result ordering when ``sort=False`` is not defined.

        Returns
        -------
        modes : Series (sorted)
        ")
                        (reparse-symbol indented_block_body) [36961 37555])
                    ("" code nil (reparse-symbol indented_block_body) [37569 37628])
                    ("drop_duplicates" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37653 37657])
                            ("take_last" variable nil (reparse-symbol function_parameters) [37659 37668])
                            ("inplace" variable nil (reparse-symbol function_parameters) [37676 37683]))                          )
                        (reparse-symbol indented_block_body) [37633 37832])
                    ("" code nil (reparse-symbol indented_block_body) [37846 37900])
                    ("duplicated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37920 37924])
                            ("take_last" variable nil (reparse-symbol function_parameters) [37926 37935]))                          )
                        (reparse-symbol indented_block_body) [37905 38011])
                    ("idxmin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38027 38031])
                            ("axis" variable nil (reparse-symbol function_parameters) [38033 38037])
                            ("out" variable nil (reparse-symbol function_parameters) [38044 38047])
                            ("skipna" variable nil (reparse-symbol function_parameters) [38054 38060]))                          
                        :documentation "
        Index of first occurrence of minimum of values.

        Parameters
        ----------
        skipna : boolean, default True
            Exclude NA/null values

        Returns
        -------
        idxmin : Index of minimum of values

        Notes
        -----
        This method is the Series version of ``ndarray.argmin``.

        See Also
        --------
        DataFrame.idxmin
        numpy.ndarray.argmin
        ")
                        (reparse-symbol indented_block_body) [38016 38667])
                    ("idxmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38683 38687])
                            ("axis" variable nil (reparse-symbol function_parameters) [38689 38693])
                            ("out" variable nil (reparse-symbol function_parameters) [38700 38703])
                            ("skipna" variable nil (reparse-symbol function_parameters) [38710 38716]))                          
                        :documentation "
        Index of first occurrence of maximum of values.

        Parameters
        ----------
        skipna : boolean, default True
            Exclude NA/null values

        Returns
        -------
        idxmax : Index of maximum of values

        Notes
        -----
        This method is the Series version of ``ndarray.argmax``.

        See Also
        --------
        DataFrame.idxmax
        numpy.ndarray.argmax
        ")
                        (reparse-symbol indented_block_body) [38672 39323])
                    ("argmin" variable nil (reparse-symbol indented_block_body) [39349 39364])
                    ("argmax" variable nil (reparse-symbol indented_block_body) [39369 39384])
                    ("" code nil (reparse-symbol indented_block_body) [39399 39425])
                    ("round" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39440 39444])
                            ("decimals" variable nil (reparse-symbol function_parameters) [39446 39454])
                            ("out" variable nil (reparse-symbol function_parameters) [39458 39461]))                          
                        :documentation "

        ")
                        (reparse-symbol indented_block_body) [39430 39732])
                    ("quantile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39750 39754])
                            ("q" variable nil (reparse-symbol function_parameters) [39756 39757]))                          
                        :documentation "
        Return value at the given quantile, a la numpy.percentile.

        Parameters
        ----------
        q : float or array-like, default 0.5 (50% quantile)
            0 <= q <= 1, the quantile(s) to compute

        Returns
        -------
        quantile : float or Series
            if ``q`` is an array, a Series will be returned where the
            index is ``q`` and the values are the quantiles.

        Examples
        --------

        >>> s = Series([1, 2, 3, 4])
        >>> s.quantile(.5)
            2.5
        >>> s.quantile([.25, .5, .75])
        0.25    1.75
        0.50    2.50
        0.75    3.25
        dtype: float64
        ")
                        (reparse-symbol indented_block_body) [39737 40801])
                    ("ptp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40814 40818])
                            ("axis" variable nil (reparse-symbol function_parameters) [40820 40824])
                            ("out" variable nil (reparse-symbol function_parameters) [40831 40834]))                          )
                        (reparse-symbol indented_block_body) [40806 40898])
                    ("corr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40912 40916])
                            ("other" variable nil (reparse-symbol function_parameters) [40918 40923])
                            ("method" variable nil (reparse-symbol function_parameters) [40925 40931])
                            ("min_periods" variable nil (reparse-symbol function_parameters) [40956 40967]))                          
                        :documentation "
        Compute correlation with `other` Series, excluding missing values

        Parameters
        ----------
        other : Series
        method : {'pearson', 'kendall', 'spearman'}
            * pearson : standard correlation coefficient
            * kendall : Kendall Tau correlation coefficient
            * spearman : Spearman rank correlation
        min_periods : int, optional
            Minimum number of observations needed to have a valid result


        Returns
        -------
        correlation : float
        ")
                        (reparse-symbol indented_block_body) [40903 41772])
                    ("cov" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41785 41789])
                            ("other" variable nil (reparse-symbol function_parameters) [41791 41796])
                            ("min_periods" variable nil (reparse-symbol function_parameters) [41798 41809]))                          
                        :documentation "
        Compute covariance with Series, excluding missing values

        Parameters
        ----------
        other : Series
        min_periods : int, optional
            Minimum number of observations needed to have a valid result

        Returns
        -------
        covariance : float

        Normalized by N-1 (unbiased estimator).
        ")
                        (reparse-symbol indented_block_body) [41777 42415])
                    ("diff" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42429 42433])
                            ("periods" variable nil (reparse-symbol function_parameters) [42435 42442]))                          
                        :documentation "
        1st discrete difference of object

        Parameters
        ----------
        periods : int, default 1
            Periods to shift for forming difference

        Returns
        -------
        diffed : Series
        ")
                        (reparse-symbol indented_block_body) [42420 42834])
                    ("autocorr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42852 42856])
                            ("lag" variable nil (reparse-symbol function_parameters) [42858 42861]))                          
                        :documentation "
        Lag-N autocorrelation

        Parameters
        ----------
        lag : int, default 1
            Number of lags to apply before performing autocorrelation.

        Returns
        -------
        autocorr : float
        ")
                        (reparse-symbol indented_block_body) [42839 43159])
                    ("dot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43172 43176])
                            ("other" variable nil (reparse-symbol function_parameters) [43178 43183]))                          
                        :documentation "
        Matrix multiplication with DataFrame or inner-product with Series
        objects

        Parameters
        ----------
        other : Series or DataFrame

        Returns
        -------
        dot_product : scalar or Series
        ")
                        (reparse-symbol indented_block_body) [43164 44676])
                    ("searchsorted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44698 44702])
                            ("v" variable nil (reparse-symbol function_parameters) [44704 44705])
                            ("side" variable nil (reparse-symbol function_parameters) [44707 44711])
                            ("sorter" variable nil (reparse-symbol function_parameters) [44720 44726]))                          
                        :documentation "Find indices where elements should be inserted to maintain order.

        Find the indices into a sorted Series `self` such that, if the
        corresponding elements in `v` were inserted before the indices, the
        order of `self` would be preserved.

        Parameters
        ----------
        v : array_like
            Values to insert into `a`.
        side : {'left', 'right'}, optional
            If 'left', the index of the first suitable location found is given.
            If 'right', return the last such index.  If there is no suitable
            index, return either 0 or N (where N is the length of `a`).
        sorter : 1-D array_like, optional
            Optional array of integer indices that sort `self` into ascending
            order. They are typically the result of ``np.argsort``.

        Returns
        -------
        indices : array of ints
            Array of insertion points with the same shape as `v`.

        See Also
        --------
        Series.sort
        Series.order
        numpy.searchsorted

        Notes
        -----
        Binary search is used to find the required insertion points.

        Examples
        --------
        >>> x = pd.Series([1, 2, 3])
        >>> x
        0    1
        1    2
        2    3
        dtype: int64
        >>> x.searchsorted(4)
        array([3])
        >>> x.searchsorted([0, 4])
        array([0, 3])
        >>> x.searchsorted([1, 3], side='left')
        array([0, 2])
        >>> x.searchsorted([1, 3], side='right')
        array([1, 3])
        >>> x.searchsorted([1, 2], side='right', sorter=[0, 2, 1])
        array([1, 3])
        ")
                        (reparse-symbol indented_block_body) [44681 46606])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46725 46729])
                            ("to_append" variable nil (reparse-symbol function_parameters) [46731 46740])
                            ("verify_integrity" variable nil (reparse-symbol function_parameters) [46742 46758]))                          
                        :documentation "
        Concatenate two or more Series. The indexes must not overlap

        Parameters
        ----------
        to_append : Series or list/tuple of Series
        verify_integrity : boolean, default False
            If True, raise Exception on creating index with duplicates

        Returns
        -------
        appended : Series
        ")
                        (reparse-symbol indented_block_body) [46714 47435])
                    ("_binop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47451 47455])
                            ("other" variable nil (reparse-symbol function_parameters) [47457 47462])
                            ("func" variable nil (reparse-symbol function_parameters) [47464 47468])
                            ("level" variable nil (reparse-symbol function_parameters) [47470 47475])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [47482 47492]))                          
                        :documentation "
        Perform generic binary operation with optional fill value

        Parameters
        ----------
        other : Series
        func : binary operator
        fill_value : float or object
            Value to substitute for NA/null values. If both Series are NA in a
            location, the result will be NA regardless of the passed fill value
        level : int or level name, default None
            Broadcast across a level, matching Index values on the
            passed MultiIndex level

        Returns
        -------
        combined : Series
        ")
                        (reparse-symbol indented_block_body) [47440 49038])
                    ("combine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49055 49059])
                            ("other" variable nil (reparse-symbol function_parameters) [49061 49066])
                            ("func" variable nil (reparse-symbol function_parameters) [49068 49072])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [49074 49084]))                          
                        :documentation "
        Perform elementwise binary operation on two Series using given function
        with optional fill value when an index is missing from one Series or
        the other

        Parameters
        ----------
        other : Series or scalar value
        func : function
        fill_value : scalar value

        Returns
        -------
        result : Series
        ")
                        (reparse-symbol indented_block_body) [49043 50094])
                    ("combine_first" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50117 50121])
                            ("other" variable nil (reparse-symbol function_parameters) [50123 50128]))                          
                        :documentation "
        Combine Series values, choosing the calling Series's values
        first. Result index will be the union of the two indexes

        Parameters
        ----------
        other : Series

        Returns
        -------
        y : Series
        ")
                        (reparse-symbol indented_block_body) [50099 50757])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50773 50777])
                            ("other" variable nil (reparse-symbol function_parameters) [50779 50784]))                          
                        :documentation "
        Modify Series in place using non-NA values from passed
        Series. Aligns on index

        Parameters
        ----------
        other : Series
        ")
                        (reparse-symbol indented_block_body) [50762 51152])
                    ("sort_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51275 51279])
                            ("ascending" variable nil (reparse-symbol function_parameters) [51281 51290]))                          
                        :documentation "
        Sort object by labels (along an axis)

        Parameters
        ----------
        ascending : boolean or list, default True
            Sort ascending vs. descending. Specify list for multiple sort
            orders

        Examples
        --------
        >>> result1 = s.sort_index(ascending=False)
        >>> result2 = s.sort_index(ascending=[1, 0])

        Returns
        -------
        sorted_obj : Series
        ")
                        (reparse-symbol indented_block_body) [51260 52364])
                    ("argsort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52381 52385])
                            ("axis" variable nil (reparse-symbol function_parameters) [52387 52391])
                            ("kind" variable nil (reparse-symbol function_parameters) [52395 52399])
                            ("order" variable nil (reparse-symbol function_parameters) [52413 52418]))                          
                        :documentation "
        Overrides ndarray.argsort. Argsorts the value, omitting NA/null values,
        and places the result in the same locations as the non-NA values

        Parameters
        ----------
        axis : int (can only be zero)
        kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'
            Choice of sorting algorithm. See np.sort for more
            information. 'mergesort' is the only stable algorithm
        order : ignored

        Returns
        -------
        argsorted : Series, with -1 indicated where nan values are present

        See also
        --------
        numpy.ndarray.argsort
        ")
                        (reparse-symbol indented_block_body) [52369 53644])
                    ("rank" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53658 53662])
                            ("method" variable nil (reparse-symbol function_parameters) [53664 53670])
                            ("na_option" variable nil (reparse-symbol function_parameters) [53682 53691])
                            ("ascending" variable nil (reparse-symbol function_parameters) [53700 53709])
                            ("pct" variable nil (reparse-symbol function_parameters) [53729 53732]))                          
                        :documentation "
        Compute data ranks (1 through n). Equal values are assigned a rank that
        is the average of the ranks of those values

        Parameters
        ----------
        method : {'average', 'min', 'max', 'first', 'dense'}
            * average: average rank of group
            * min: lowest rank in group
            * max: highest rank in group
            * first: ranks assigned in order they appear in the array
            * dense: like 'min', but rank always increases by 1 between groups
        na_option : {'keep'}
            keep: leave NA values where they are
        ascending : boolean, default True
            False for ranks by high (1) to low (N)
        pct : boolean, default False
            Computes percentage rank of data

        Returns
        -------
        ranks : Series
        ")
                        (reparse-symbol indented_block_body) [53649 54827])
                    ("sort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54841 54845])
                            ("axis" variable nil (reparse-symbol function_parameters) [54847 54851])
                            ("ascending" variable nil (reparse-symbol function_parameters) [54855 54864])
                            ("kind" variable nil (reparse-symbol function_parameters) [54871 54875])
                            ("na_position" variable nil (reparse-symbol function_parameters) [54889 54900])
                            ("inplace" variable nil (reparse-symbol function_parameters) [54909 54916]))                          
                        :documentation "
        Sort values and index labels by value. This is an inplace sort by default.
        Series.order is the equivalent but returns a new Series.

        Parameters
        ----------
        axis : int (can only be zero)
        ascending : boolean, default True
            Sort ascending. Passing False sorts descending
        kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'
            Choice of sorting algorithm. See np.sort for more
            information. 'mergesort' is the only stable algorithm
        na_position : {'first', 'last'} (optional, default='last')
            'first' puts NaNs at the beginning
            'last' puts NaNs at the end
        inplace : boolean, default True
            Do operation in place.

        See Also
        --------
        Series.order
        ")
                        (reparse-symbol indented_block_body) [54832 55940])
                    ("order" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55955 55959])
                            ("na_last" variable nil (reparse-symbol function_parameters) [55961 55968])
                            ("ascending" variable nil (reparse-symbol function_parameters) [55975 55984])
                            ("kind" variable nil (reparse-symbol function_parameters) [55991 55995])
                            ("na_position" variable nil (reparse-symbol function_parameters) [56009 56020])
                            ("inplace" variable nil (reparse-symbol function_parameters) [56029 56036]))                          
                        :documentation "
        Sorts Series object, by value, maintaining index-value link.
        This will return a new Series by default. Series.sort is the equivalent but as an inplace method.

        Parameters
        ----------
        na_last : boolean (optional, default=True) (DEPRECATED; use na_position)
            Put NaN's at beginning or end
        ascending : boolean, default True
            Sort ascending. Passing False sorts descending
        kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'
            Choice of sorting algorithm. See np.sort for more
            information. 'mergesort' is the only stable algorithm
        na_position : {'first', 'last'} (optional, default='last')
            'first' puts NaNs at the beginning
            'last' puts NaNs at the end
        inplace : boolean, default False
            Do operation in place.

        Returns
        -------
        y : Series

        See Also
        --------
        Series.sort
        ")
                        (reparse-symbol indented_block_body) [55945 58762])
                    ("nlargest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58780 58784])
                            ("n" variable nil (reparse-symbol function_parameters) [58786 58787])
                            ("take_last" variable nil (reparse-symbol function_parameters) [58791 58800]))                          
                        :documentation "Return the largest `n` elements.

        Parameters
        ----------
        n : int
            Return this many descending sorted values
        take_last : bool
            Where there are duplicate values, take the last duplicate

        Returns
        -------
        top_n : Series
            The n largest values in the Series, in sorted order

        Notes
        -----
        Faster than ``.order(ascending=False).head(n)`` for small `n` relative
        to the size of the ``Series`` object.

        See Also
        --------
        Series.nsmallest

        Examples
        --------
        >>> import pandas as pd
        >>> import numpy as np
        >>> s = pd.Series(np.random.randn(1e6))
        >>> s.nlargest(10)  # only sorts up to the N requested
        ")
                        (reparse-symbol indented_block_body) [58767 59687])
                    ("nsmallest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59706 59710])
                            ("n" variable nil (reparse-symbol function_parameters) [59712 59713])
                            ("take_last" variable nil (reparse-symbol function_parameters) [59717 59726]))                          
                        :documentation "Return the smallest `n` elements.

        Parameters
        ----------
        n : int
            Return this many ascending sorted values
        take_last : bool
            Where there are duplicate values, take the last duplicate

        Returns
        -------
        bottom_n : Series
            The n smallest values in the Series, in sorted order

        Notes
        -----
        Faster than ``.order().head(n)`` for small `n` relative to
        the size of the ``Series`` object.

        See Also
        --------
        Series.nlargest

        Examples
        --------
        >>> import pandas as pd
        >>> import numpy as np
        >>> s = pd.Series(np.random.randn(1e6))
        >>> s.nsmallest(10)  # only sorts up to the N requested
        ")
                        (reparse-symbol indented_block_body) [59692 60603])
                    ("sortlevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60622 60626])
                            ("level" variable nil (reparse-symbol function_parameters) [60628 60633])
                            ("ascending" variable nil (reparse-symbol function_parameters) [60637 60646])
                            ("sort_remaining" variable nil (reparse-symbol function_parameters) [60653 60667]))                          
                        :documentation "
        Sort Series with MultiIndex by chosen level. Data will be
        lexicographically sorted by the chosen level followed by the other
        levels (in order)

        Parameters
        ----------
        level : int or level name, default None
        ascending : bool, default True

        Returns
        -------
        sorted : Series
        ")
                        (reparse-symbol indented_block_body) [60608 61500])
                    ("swaplevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61519 61523])
                            ("i" variable nil (reparse-symbol function_parameters) [61525 61526])
                            ("j" variable nil (reparse-symbol function_parameters) [61528 61529])
                            ("copy" variable nil (reparse-symbol function_parameters) [61531 61535]))                          
                        :documentation "
        Swap levels i and j in a MultiIndex

        Parameters
        ----------
        i, j : int, string (can be mixed)
            Level of index to be swapped. Can pass level name as string.

        Returns
        -------
        swapped : Series
        ")
                        (reparse-symbol indented_block_body) [61505 61996])
                    ("reorder_levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62020 62024])
                            ("order" variable nil (reparse-symbol function_parameters) [62026 62031]))                          
                        :documentation "
        Rearrange index levels using input order. May not drop or duplicate
        levels

        Parameters
        ----------
        order: list of int representing new level order.
               (reference level by number or key)
        axis: where to reorder levels

        Returns
        -------
        type of caller (new object)
        ")
                        (reparse-symbol indented_block_body) [62001 62662])
                    ("unstack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62679 62683])
                            ("level" variable nil (reparse-symbol function_parameters) [62685 62690]))                          
                        :documentation "
        Unstack, a.k.a. pivot, Series with MultiIndex to produce DataFrame.
        The level involved will automatically get sorted.

        Parameters
        ----------
        level : int, string, or list of these, default last level
            Level(s) to unstack, can pass level name

        Examples
        --------
        >>> s
        one  a   1.
        one  b   2.
        two  a   3.
        two  b   4.

        >>> s.unstack(level=-1)
             a   b
        one  1.  2.
        two  3.  4.

        >>> s.unstack(level=0)
           one  two
        a  1.   2.
        b  3.   4.

        Returns
        -------
        unstacked : DataFrame
        ")
                        (reparse-symbol indented_block_body) [62667 63470])
                    ("map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63587 63591])
                            ("arg" variable nil (reparse-symbol function_parameters) [63593 63596])
                            ("na_action" variable nil (reparse-symbol function_parameters) [63598 63607]))                          
                        :documentation "
        Map values of Series using input correspondence (which can be
        a dict, Series, or function)

        Parameters
        ----------
        arg : function, dict, or Series
        na_action : {None, 'ignore'}
            If 'ignore', propagate NA values

        Examples
        --------
        >>> x
        one   1
        two   2
        three 3

        >>> y
        1  foo
        2  bar
        3  baz

        >>> x.map(y)
        one   foo
        two   bar
        three baz

        Returns
        -------
        y : Series
            same index as caller
        ")
                        (reparse-symbol indented_block_body) [63579 65141])
                    ("apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65156 65160])
                            ("func" variable nil (reparse-symbol function_parameters) [65162 65166])
                            ("convert_dtype" variable nil (reparse-symbol function_parameters) [65168 65181])
                            ("args" variable nil (reparse-symbol function_parameters) [65188 65192])
                            ("kwds" variable nil (reparse-symbol function_parameters) [65197 65203]))                          
                        :documentation "
        Invoke function on values of Series. Can be ufunc (a NumPy function
        that applies to the entire Series) or a Python function that only works
        on single values

        Parameters
        ----------
        func : function
        convert_dtype : boolean, default True
            Try to find better dtype for elementwise function results. If
            False, leave as dtype=object
        args : tuple
            Positional arguments to pass to function in addition to the value
        Additional keyword arguments will be passed as keywords to the function

        See also
        --------
        Series.map: For element-wise operations

        Returns
        -------
        y : Series or DataFrame if func returns a Series
        ")
                        (reparse-symbol indented_block_body) [65146 66877])
                    ("_reduce" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66894 66898])
                            ("op" variable nil (reparse-symbol function_parameters) [66900 66902])
                            ("name" variable nil (reparse-symbol function_parameters) [66904 66908])
                            ("axis" variable nil (reparse-symbol function_parameters) [66910 66914])
                            ("skipna" variable nil (reparse-symbol function_parameters) [66918 66924])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [66931 66943])
                            ("filter_type" variable nil (reparse-symbol function_parameters) [66966 66977])
                            ("kwds" variable nil (reparse-symbol function_parameters) [66984 66990]))                          
                        :documentation "
        perform a reduction operation

        if we have an ndarray as a value, then simply perform the operation,
        otherwise delegate to the object

        ")
                        (reparse-symbol indented_block_body) [66882 67775])
                    ("_maybe_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67795 67799])
                            ("func" variable nil (reparse-symbol function_parameters) [67801 67805])
                            ("dropna" variable nil (reparse-symbol function_parameters) [67807 67813]))                          
                        :documentation "
        evaluate a function with possible input/output conversion if we are i8

        Parameters
        ----------
        dropna : bool, default False
           whether to drop values if necessary

        ")
                        (reparse-symbol indented_block_body) [67780 68748])
                    ("_reindex_indexer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68774 68778])
                            ("new_index" variable nil (reparse-symbol function_parameters) [68780 68789])
                            ("indexer" variable nil (reparse-symbol function_parameters) [68791 68798])
                            ("copy" variable nil (reparse-symbol function_parameters) [68800 68804]))                          )
                        (reparse-symbol indented_block_body) [68753 69070])
                    ("_needs_reindex_multi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69100 69104])
                            ("axes" variable nil (reparse-symbol function_parameters) [69106 69110])
                            ("method" variable nil (reparse-symbol function_parameters) [69112 69118])
                            ("level" variable nil (reparse-symbol function_parameters) [69120 69125]))                          
                        :documentation " check if we do need a multi reindex; this is for compat with
        higher dims
        ")
                        (reparse-symbol indented_block_body) [69075 69254])
                    ("" code nil (reparse-symbol indented_block_body) [69268 69321])
                    ("rename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69337 69341])
                            ("index" variable nil (reparse-symbol function_parameters) [69343 69348])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [69355 69363]))                          )
                        (reparse-symbol indented_block_body) [69326 69431])
                    ("" code nil (reparse-symbol indented_block_body) [69445 69499])
                    ("reindex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69516 69520])
                            ("index" variable nil (reparse-symbol function_parameters) [69522 69527])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [69534 69542]))                          )
                        (reparse-symbol indented_block_body) [69504 69611])
                    ("reindex_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69633 69637])
                            ("labels" variable nil (reparse-symbol function_parameters) [69639 69645])
                            ("axis" variable nil (reparse-symbol function_parameters) [69647 69651])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [69655 69663]))                          
                        :documentation " for compatibility with higher dims ")
                        (reparse-symbol indented_block_body) [69616 69863])
                    ("take" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69877 69881])
                            ("indices" variable nil (reparse-symbol function_parameters) [69883 69890])
                            ("axis" variable nil (reparse-symbol function_parameters) [69892 69896])
                            ("convert" variable nil (reparse-symbol function_parameters) [69900 69907])
                            ("is_copy" variable nil (reparse-symbol function_parameters) [69914 69921]))                          
                        :documentation "
        return Series corresponding to requested indices

        Parameters
        ----------
        indices : list / array of ints
        convert : translate negative to positive indices (default)

        Returns
        -------
        taken : Series

        See also
        --------
        numpy.ndarray.take
        ")
                        (reparse-symbol indented_block_body) [69868 70688])
                    ("isin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70702 70706])
                            ("values" variable nil (reparse-symbol function_parameters) [70708 70714]))                          
                        :documentation "
        Return a boolean :class:`~pandas.Series` showing whether each element
        in the :class:`~pandas.Series` is exactly contained in the passed
        sequence of ``values``.

        Parameters
        ----------
        values : list-like
            The sequence of values to test. Passing in a single string will
            raise a ``TypeError``. Instead, turn a single string into a
            ``list`` of one element.

        Returns
        -------
        isin : Series (bool dtype)

        Raises
        ------
        TypeError
          * If ``values`` is a string

        See Also
        --------
        pandas.DataFrame.isin

        Examples
        --------

        >>> s = pd.Series(list('abc'))
        >>> s.isin(['a', 'c', 'e'])
        0     True
        1    False
        2     True
        dtype: bool

        Passing a single string as ``s.isin('a')`` will raise an error. Use
        a list of one element instead:

        >>> s.isin(['a'])
        0     True
        1    False
        2    False
        dtype: bool

        ")
                        (reparse-symbol indented_block_body) [70693 72735])
                    ("between" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72752 72756])
                            ("left" variable nil (reparse-symbol function_parameters) [72758 72762])
                            ("right" variable nil (reparse-symbol function_parameters) [72764 72769])
                            ("inclusive" variable nil (reparse-symbol function_parameters) [72771 72780]))                          
                        :documentation "
        Return boolean Series equivalent to left <= series <= right. NA values
        will be treated as False

        Parameters
        ----------
        left : scalar
            Left boundary
        right : scalar
            Right boundary

        Returns
        -------
        is_between : Series
        ")
                        (reparse-symbol indented_block_body) [72740 73320])
                    ("from_csv" function
                       (:documentation "
        Read delimited file into Series

        Parameters
        ----------
        path : string file path or file handle / StringIO
        sep : string, default ','
            Field delimiter
        parse_dates : boolean, default True
            Parse dates. Different default from read_table
        header : int, default 0
            Row to use at header (skip prior rows)
        index_col : int or sequence, default 0
            Column to use for index. If a sequence is given, a MultiIndex
            is used. Different default from read_table
        encoding : string, optional
            a string representing the encoding to use if the contents are
            non-ascii, for python versions prior to 3
        infer_datetime_format: boolean, default False
            If True and `parse_dates` is True for a column, try to infer the
            datetime format based on the first datetime string. If the format
            can be inferred, there often will be a large parsing speed-up.

        Returns
        -------
        y : Series
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [73355 73358])
                            ("path" variable nil (reparse-symbol function_parameters) [73360 73364])
                            ("sep" variable nil (reparse-symbol function_parameters) [73366 73369])
                            ("parse_dates" variable nil (reparse-symbol function_parameters) [73375 73386])
                            ("header" variable nil (reparse-symbol function_parameters) [73393 73399])
                            ("index_col" variable nil (reparse-symbol function_parameters) [73423 73432])
                            ("encoding" variable nil (reparse-symbol function_parameters) [73436 73444])
                            ("infer_datetime_format" variable nil (reparse-symbol function_parameters) [73451 73472]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [73325 74979])
                    ("to_csv" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74995 74999])
                            ("path" variable nil (reparse-symbol function_parameters) [75001 75005])
                            ("index" variable nil (reparse-symbol function_parameters) [75007 75012])
                            ("sep" variable nil (reparse-symbol function_parameters) [75019 75022])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [75028 75034])
                            ("float_format" variable nil (reparse-symbol function_parameters) [75054 75066])
                            ("header" variable nil (reparse-symbol function_parameters) [75073 75079])
                            ("index_label" variable nil (reparse-symbol function_parameters) [75102 75113])
                            ("mode" variable nil (reparse-symbol function_parameters) [75120 75124])
                            ("nanRep" variable nil (reparse-symbol function_parameters) [75130 75136])
                            ("encoding" variable nil (reparse-symbol function_parameters) [75143 75151])
                            ("date_format" variable nil (reparse-symbol function_parameters) [75173 75184])
                            ("decimal" variable nil (reparse-symbol function_parameters) [75191 75198]))                          
                        :documentation "
        Write Series to a comma-separated values (csv) file

        Parameters
        ----------
        path : string file path or file handle / StringIO. If None is provided
            the result is returned as a string.
        na_rep : string, default ''
            Missing data representation
        float_format : string, default None
            Format string for floating point numbers
        header : boolean, default False
            Write out series name
        index : boolean, default True
            Write row names (index)
        index_label : string or sequence, default None
            Column label for index column(s) if desired. If None is given, and
            `header` and `index` are True, then the index names are used. A
            sequence should be given if the DataFrame uses MultiIndex.
        mode : Python write mode, default 'w'
        sep : character, default \",\"
            Field delimiter for the output file.
        encoding : string, optional
            a string representing the encoding to use if the contents are
            non-ascii, for python versions prior to 3
        date_format: string, default None
            Format string for datetime objects.
        decimal: string, default '.'
            Character recognized as decimal separator. E.g. use ',' for European data
        ")
                        (reparse-symbol indented_block_body) [74984 77042])
                    ("dropna" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77058 77062])
                            ("axis" variable nil (reparse-symbol function_parameters) [77064 77068])
                            ("inplace" variable nil (reparse-symbol function_parameters) [77072 77079])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [77087 77095]))                          
                        :documentation "
        Return Series without null values

        Returns
        -------
        valid : Series
        inplace : boolean, default False
            Do operation in place.
        ")
                        (reparse-symbol indented_block_body) [77047 77665])
                    ("self" code nil (reparse-symbol indented_block_body) [77716 77816])
                    ("first_valid_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77844 77848]))                          
                        :documentation "
        Return label for first non-NA/null value
        ")
                        (reparse-symbol indented_block_body) [77822 78128])
                    ("last_valid_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78154 78158]))                          
                        :documentation "
        Return label for last non-NA/null value
        ")
                        (reparse-symbol indented_block_body) [78133 78459])
                    ("asof" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78585 78589])
                            ("where" variable nil (reparse-symbol function_parameters) [78591 78596]))                          
                        :documentation "
        Return last good (non-NaN) value in TimeSeries if value is NaN for
        requested date.

        If there is no good value, NaN is returned.

        Parameters
        ----------
        where : date or array of dates

        Notes
        -----
        Dates are assumed to be sorted

        Returns
        -------
        value or NaN
        ")
                        (reparse-symbol indented_block_body) [78576 79881])
                    ("to_timestamp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79903 79907])
                            ("freq" variable nil (reparse-symbol function_parameters) [79909 79913])
                            ("how" variable nil (reparse-symbol function_parameters) [79920 79923])
                            ("copy" variable nil (reparse-symbol function_parameters) [79933 79937]))                          
                        :documentation "
        Cast to datetimeindex of timestamps, at *beginning* of period

        Parameters
        ----------
        freq : string, default frequency of PeriodIndex
            Desired frequency
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end

        Returns
        -------
        ts : TimeSeries with DatetimeIndex
        ")
                        (reparse-symbol indented_block_body) [79886 80648])
                    ("to_period" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80667 80671])
                            ("freq" variable nil (reparse-symbol function_parameters) [80673 80677])
                            ("copy" variable nil (reparse-symbol function_parameters) [80684 80688]))                          
                        :documentation "
        Convert TimeSeries from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed)

        Parameters
        ----------
        freq : string, default

        Returns
        -------
        ts : TimeSeries with PeriodIndex
        ")
                        (reparse-symbol indented_block_body) [80653 81252])
                    ("_make_str_accessor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81386 81390]))                          )
                        (reparse-symbol indented_block_body) [81363 81861])
                    ("str" variable nil (reparse-symbol indented_block_body) [81866 81928])
                    ("_make_dt_accessor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82079 82083]))                          )
                        (reparse-symbol indented_block_body) [82057 82295])
                    ("dt" variable nil (reparse-symbol indented_block_body) [82300 82377])
                    ("_make_cat_accessor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82517 82521]))                          )
                        (reparse-symbol indented_block_body) [82494 82760])
                    ("cat" variable nil (reparse-symbol indented_block_body) [82765 82833]))                  
                :type "class")
                nil [2839 82834])
            ("Series" code nil nil [82835 82930])
            ("Series" code nil nil [82931 82963])
            ("_INDEX_TYPES" variable nil nil [82964 83006])
            ("remove_na" function
               (:documentation "
    Return series containing only true/non-NaN values, possibly empty.
    "
                :arguments 
                  ( ("series" variable nil (reparse-symbol function_parameters) [83130 83136]))                  )
                nil [83116 83282])
            ("_sanitize_index" function
               (:documentation " sanitize an index type to return an ndarray of the underlying, pass thru a non-Index "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [83304 83308])
                    ("index" variable nil (reparse-symbol function_parameters) [83310 83315])
                    ("copy" variable nil (reparse-symbol function_parameters) [83317 83321]))                  )
                nil [83284 83959])
            ("_sanitize_array" function
               (:documentation " sanitize input data to an ndarray, copy if specified, coerce to the dtype if specified "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [83980 83984])
                    ("index" variable nil (reparse-symbol function_parameters) [83986 83991])
                    ("dtype" variable nil (reparse-symbol function_parameters) [83993 83998])
                    ("copy" variable nil (reparse-symbol function_parameters) [84005 84009])
                    ("raise_cast_failure" variable nil (reparse-symbol function_parameters) [84037 84055]))                  )
                nil [83960 88543])
            ("TimeSeries" variable nil nil [88569 88588])
            ("pandas.tools.plotting" include nil nil [88696 88732])
            ("Series" variable nil nil [88734 88764])
            ("Series" variable nil nil [88765 88795])
            ("ops" code nil nil [88815 88879])
            ("ops" code nil nil [88880 88950]))          
      :file "series.py"
      :pointmax 88951
      :fsize 88950
      :lastmodtime '(21808 10978 0 0)
      :unmatched-syntax '((COLON 77714 . 77715) (NAME 77670 . 77675) (EXPONENT 77706 . 77708) (NAME 57429 . 57440) (IF 57450 . 57452) (ELSE 57461 . 57465) (NAME 29677 . 29684) (IF 29746 . 29748) (ELSE 29771 . 29775) (INDENT_BLOCK 21782 . 22171) (NEWLINE 21781 . 21782) (COLON 21780 . 21781) (TRY 20688 . 20691) (AS 21776 . 21778)))
    (semanticdb-table "categorical.py"
      :file "categorical.py"
      :fsize 59834
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "algorithms.py"
      :file "algorithms.py"
      :fsize 15711
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "common.py"
      :file "common.py"
      :fsize 104300
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "format.py"
      :file "format.py"
      :fsize 87545
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "nanops.py"
      :file "nanops.py"
      :fsize 21735
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "ops.py"
      :file "ops.py"
      :fsize 41122
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "config.py"
      :file "config.py"
      :fsize 22213
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "base.py"
      :file "base.py"
      :fsize 16845
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "internals.py"
      :file "internals.py"
      :fsize 150471
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "panel.py"
      :file "panel.py"
      :fsize 51749
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "indexing.py"
      :file "indexing.py"
      :fsize 63145
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "strings.py"
      :file "strings.py"
      :fsize 33962
      :lastmodtime '(21808 10978 0 0))
    (semanticdb-table "datetools.py"
      :file "datetools.py"
      :fsize 1729
      :lastmodtime '(21808 10978 0 0)))
  :file "!usr!local!lib!python2.7!dist-packages!pandas!core!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
