;; Object core/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "core/"
  :tables
  (list
    (semanticdb-table "base.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Base and utility classes for pandas objects.
\"\"\"" code nil nil [1 53])
            ("pandas" include nil nil [54 79])
            ("numpy" include nil nil [80 98])
            ("pandas.core" include nil nil [99 136])
            ("pandas.core.nanops" include nil nil [137 172])
            ("pandas.lib" include nil nil [173 197])
            ("pandas.util.decorators" include nil nil [198 257])
            ("pandas.core.strings" include nil nil [258 303])
            ("pandas.core.common" include nil nil [304 354])
            ("_shared_docs" variable nil nil [356 377])
            ("_indexops_doc_kwargs" variable nil nil [378 496])
            ("StringMixin" type
               (:documentation "implements string methods so long as object defines a `__unicode__`
    method.

    Handles Python2/3 compatibility transparently.
    "
                :superclasses ("object")
                :members 
                  ( ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [891 895]))                          )
                        (reparse-symbol indented_block_body) [875 938])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [955 959]))                          
                        :documentation "
        Return a string representation for a particular Object

        Invoked by str(df) in both py2/py3.
        Yields Bytestring in Py2, Unicode String in py3.
        ")
                        (reparse-symbol indented_block_body) [943 1245])
                    ("__bytes__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1264 1268]))                          
                        :documentation "
        Return a string representation for a particular object.

        Invoked by bytes(obj) in py3 only.
        Yields a bytestring in both py2/py3.
        ")
                        (reparse-symbol indented_block_body) [1250 1611])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1629 1633]))                          
                        :documentation "
        Return a string representation for a particular object.

        Yields Bytestring in Py2, Unicode String in py3.
        ")
                        (reparse-symbol indented_block_body) [1616 1807]))                  
                :type "class")
                nil [499 1807])
            ("PandasObject" type
               (:documentation "baseclass for various pandas objects"
                :superclasses ("StringMixin")
                :members 
                  ( ("_constructor" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1926 1930]))                          
                        :documentation "class constructor (for this class it's just `__class__`")
                        (reparse-symbol indented_block_body) [1895 2033])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2054 2058]))                          
                        :documentation "
        Return a string representation for a particular object.

        Invoked by unicode(obj) in py2 only. Yields a Unicode String in both
        py2/py3.
        ")
                        (reparse-symbol indented_block_body) [2038 2329])
                    ("_dir_additions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2353 2357]))                          
                        :documentation " add addtional __dir__ for this object ")
                        (reparse-symbol indented_block_body) [2334 2435])
                    ("_dir_deletions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2459 2463]))                          
                        :documentation " delete unwanted __dir__ for this object ")
                        (reparse-symbol indented_block_body) [2440 2543])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2560 2564]))                          
                        :documentation "
        Provide method name lookup and completion
        Only provide 'public' methods
        ")
                        (reparse-symbol indented_block_body) [2548 2805])
                    ("_reset_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2827 2831])
                            ("key" variable nil (reparse-symbol function_parameters) [2833 2836]))                          
                        :documentation "
        Reset cached properties. If ``key`` is passed, only clears that key.
        ")
                        (reparse-symbol indented_block_body) [2810 3123]))                  
                :type "class")
                nil [1809 3123])
            ("PandasDelegate" type
               (:documentation " an abstract base class for delegating methods/properties "
                :superclasses ("PandasObject")
                :members 
                  ( ("_delegate_property_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3261 3265])
                            ("name" variable nil (reparse-symbol function_parameters) [3267 3271])
                            ("args" variable nil (reparse-symbol function_parameters) [3273 3278])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3280 3288]))                          )
                        (reparse-symbol indented_block_body) [3234 3374])
                    ("_delegate_property_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3406 3410])
                            ("name" variable nil (reparse-symbol function_parameters) [3412 3416])
                            ("value" variable nil (reparse-symbol function_parameters) [3418 3423])
                            ("args" variable nil (reparse-symbol function_parameters) [3425 3430])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3432 3440]))                          )
                        (reparse-symbol indented_block_body) [3379 3522])
                    ("_delegate_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3548 3552])
                            ("name" variable nil (reparse-symbol function_parameters) [3554 3558])
                            ("args" variable nil (reparse-symbol function_parameters) [3560 3565])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3567 3575]))                          )
                        (reparse-symbol indented_block_body) [3527 3653])
                    ("_add_delegate_accessors" function
                       (:documentation "
        add accessors to cls from the delegate class

        Parameters
        ----------
        cls : the class to add the methods/properties to
        delegate : the class to get methods/properties & doc-strings
        acccessors : string list of accessors to add
        typ : 'property' or 'method'
        overwrite : boolean, default False
           overwrite the method/property in the target class if it exists

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3703 3706])
                            ("delegate" variable nil (reparse-symbol function_parameters) [3708 3716])
                            ("accessors" variable nil (reparse-symbol function_parameters) [3718 3727])
                            ("typ" variable nil (reparse-symbol function_parameters) [3729 3732])
                            ("overwrite" variable nil (reparse-symbol function_parameters) [3734 3743]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3658 5216]))                  
                :type "class")
                nil [3124 5216])
            ("AccessorProperty" type
               (:documentation "Descriptor for implementing accessor properties like Series.str
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5395 5427])
                            ("self" variable nil (reparse-symbol indented_block_body) [5436 5480])
                            ("self" variable nil (reparse-symbol indented_block_body) [5489 5524]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5346 5350])
                            ("accessor_cls" variable nil (reparse-symbol function_parameters) [5352 5364])
                            ("construct_accessor" variable nil (reparse-symbol function_parameters) [5366 5384]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5333 5525])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5542 5546])
                            ("instance" variable nil (reparse-symbol function_parameters) [5548 5556])
                            ("owner" variable nil (reparse-symbol function_parameters) [5558 5563]))                          )
                        (reparse-symbol indented_block_body) [5530 5754])
                    ("__set__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5771 5775])
                            ("instance" variable nil (reparse-symbol function_parameters) [5777 5785])
                            ("value" variable nil (reparse-symbol function_parameters) [5787 5792]))                          )
                        (reparse-symbol indented_block_body) [5759 5847])
                    ("__delete__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5867 5871])
                            ("instance" variable nil (reparse-symbol function_parameters) [5873 5881]))                          )
                        (reparse-symbol indented_block_body) [5852 5939]))                  
                :type "class")
                nil [5218 5939])
            ("FrozenList" type
               (:documentation "
    Container that doesn't allow setting item *but*
    because it's technically non-hashable, will be used
    for lookups, appropriately, etc.
    "
                :superclasses ("PandasObject" "list")
                :members 
                  ( ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6262 6266])
                            ("other" variable nil (reparse-symbol function_parameters) [6268 6273]))                          )
                        (reparse-symbol indented_block_body) [6250 6415])
                    ("__iadd__" variable nil (reparse-symbol indented_block_body) [6420 6438])
                    ("__getslice__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6483 6487])
                            ("i" variable nil (reparse-symbol function_parameters) [6489 6490])
                            ("j" variable nil (reparse-symbol function_parameters) [6492 6493]))                          )
                        (reparse-symbol indented_block_body) [6466 6570])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6591 6595])
                            ("n" variable nil (reparse-symbol function_parameters) [6597 6598]))                          )
                        (reparse-symbol indented_block_body) [6575 6788])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6806 6810])
                            ("other" variable nil (reparse-symbol function_parameters) [6812 6817]))                          )
                        (reparse-symbol indented_block_body) [6793 6939])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6955 6959])
                            ("other" variable nil (reparse-symbol function_parameters) [6961 6966]))                          )
                        (reparse-symbol indented_block_body) [6944 7105])
                    ("__req__" variable nil (reparse-symbol indented_block_body) [7110 7126])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7144 7148])
                            ("other" variable nil (reparse-symbol function_parameters) [7150 7155]))                          )
                        (reparse-symbol indented_block_body) [7132 7228])
                    ("__imul__" variable nil (reparse-symbol indented_block_body) [7233 7251])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7272 7276]))                          )
                        (reparse-symbol indented_block_body) [7257 7324])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7342 7346]))                          )
                        (reparse-symbol indented_block_body) [7329 7382])
                    ("_disabled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7401 7405])
                            ("args" variable nil (reparse-symbol function_parameters) [7407 7412])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7414 7422]))                          
                        :documentation "This method will not function because object is immutable.")
                        (reparse-symbol indented_block_body) [7387 7617])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7638 7642]))                          )
                        (reparse-symbol indented_block_body) [7622 7812])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7830 7834]))                          )
                        (reparse-symbol indented_block_body) [7817 7927])
                    ("__setitem__" variable nil (reparse-symbol indented_block_body) [7932 7999])
                    ("pop" variable nil (reparse-symbol indented_block_body) [8004 8062]))                  
                :type "class")
                nil [5941 8063])
            ("FrozenNDArray" type
               (:superclasses ("PandasObject" "np.ndarray")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [8184 8187])
                        ("data" variable nil (reparse-symbol function_parameters) [8189 8193])
                        ("dtype" variable nil (reparse-symbol function_parameters) [8195 8200])
                        ("copy" variable nil (reparse-symbol function_parameters) [8207 8211]))                      ) (reparse-symbol indented_block_body) [8172 8382])
                    ("_disabled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8401 8405])
                            ("args" variable nil (reparse-symbol function_parameters) [8407 8412])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8414 8422]))                          
                        :documentation "This method will not function because object is immutable.")
                        (reparse-symbol indented_block_body) [8387 8608])
                    ("__setitem__" variable nil (reparse-symbol indented_block_body) [8613 8680])
                    ("put" variable nil (reparse-symbol indented_block_body) [8685 8717])
                    ("_shallow_copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8741 8745]))                          )
                        (reparse-symbol indented_block_body) [8723 8775])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8791 8795]))                          
                        :documentation "returns *copy* of underlying array")
                        (reparse-symbol indented_block_body) [8780 8909])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8930 8934]))                          
                        :documentation "
        Return a string representation for this object.

        Invoked by unicode(df) in py2 only. Yields a Unicode String in both
        py2/py3.
        ")
                        (reparse-symbol indented_block_body) [8914 9315]))                  
                :type "class")
                nil [8064 9315])
            ("IndexOpsMixin" type
               (:documentation " common ops mixin to support a unified inteface / docs for Series / Index "
                :superclasses ("object")
                :members 
                  ( ("__array_priority__" variable nil (reparse-symbol indented_block_body) [9464 9489])
                    ("transpose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9509 9513]))                          
                        :documentation " return the transpose, which is by definition self ")
                        (reparse-symbol indented_block_body) [9495 9602])
                    ("T" variable nil (reparse-symbol indented_block_body) [9607 9687])
                    ("shape" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9717 9721]))                          
                        :documentation " return a tuple of the shape of the underlying data ")
                        (reparse-symbol indented_block_body) [9693 9824])
                    ("ndim" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9852 9856]))                          
                        :documentation " return the number of dimensions of the underlying data, by definition 1 ")
                        (reparse-symbol indented_block_body) [9829 9964])
                    ("item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9978 9982]))                          
                        :documentation " return the first element of the underlying data as a python scalar ")
                        (reparse-symbol indented_block_body) [9969 10339])
                    ("data" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10367 10371]))                          
                        :documentation " return the data pointer of the underlying data ")
                        (reparse-symbol indented_block_body) [10344 10469])
                    ("itemsize" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10501 10505]))                          
                        :documentation " return the size of the dtype of the item of the underlying data ")
                        (reparse-symbol indented_block_body) [10474 10624])
                    ("nbytes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10654 10658]))                          
                        :documentation " return the number of bytes in the underlying data ")
                        (reparse-symbol indented_block_body) [10629 10761])
                    ("strides" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10792 10796]))                          
                        :documentation " return the strides of the underlying data ")
                        (reparse-symbol indented_block_body) [10766 10892])
                    ("size" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10920 10924]))                          
                        :documentation " return the number of elements in the underlying data ")
                        (reparse-symbol indented_block_body) [10897 11028])
                    ("flags" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11057 11061]))                          
                        :documentation " return the ndarray.flags for the underlying data ")
                        (reparse-symbol indented_block_body) [11033 11162])
                    ("base" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11190 11194]))                          
                        :documentation " return the base object if the memory of the underlying data is shared ")
                        (reparse-symbol indented_block_body) [11167 11315])
                    ("max" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11328 11332]))                          
                        :documentation " The maximum value of the object ")
                        (reparse-symbol indented_block_body) [11320 11425])
                    ("argmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11441 11445])
                            ("axis" variable nil (reparse-symbol function_parameters) [11447 11451]))                          
                        :documentation "
        return a ndarray of the maximum argument indexer

        See also
        --------
        numpy.ndarray.argmax
        ")
                        (reparse-symbol indented_block_body) [11430 11649])
                    ("min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11662 11666]))                          
                        :documentation " The minimum value of the object ")
                        (reparse-symbol indented_block_body) [11654 11759])
                    ("argmin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11775 11779])
                            ("axis" variable nil (reparse-symbol function_parameters) [11781 11785]))                          
                        :documentation "
        return a ndarray of the minimum argument indexer

        See also
        --------
        numpy.ndarray.argmin
        ")
                        (reparse-symbol indented_block_body) [11764 11983])
                    ("hasnans" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12000 12004]))                          
                        :documentation " return if I have any nans; enables various perf speedups ")
                        (reparse-symbol indented_block_body) [11988 12118])
                    ("value_counts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12140 12144])
                            ("normalize" variable nil (reparse-symbol function_parameters) [12146 12155])
                            ("sort" variable nil (reparse-symbol function_parameters) [12163 12167])
                            ("ascending" variable nil (reparse-symbol function_parameters) [12174 12183])
                            ("bins" variable nil (reparse-symbol function_parameters) [12212 12216])
                            ("dropna" variable nil (reparse-symbol function_parameters) [12223 12229]))                          
                        :documentation "
        Returns object containing counts of unique values.

        The resulting object will be in descending order so that the
        first element is the most frequently-occurring element.
        Excludes NA values by default.

        Parameters
        ----------
        normalize : boolean, default False
            If True then the object returned will contain the relative
            frequencies of the unique values.
        sort : boolean, default True
            Sort by values
        ascending : boolean, default False
            Sort in ascending order
        bins : integer, optional
            Rather than count values, group them into half-open bins,
            a convenience for pd.cut, only works with numeric data
        dropna : boolean, default True
            Don't include counts of NaN.

        Returns
        -------
        counts : Series
        ")
                        (reparse-symbol indented_block_body) [12123 13834])
                    ("unique" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13850 13854]))                          
                        :documentation "
        Return array of unique values in the object. Significantly faster than
        numpy.unique. Includes NA values.

        Returns
        -------
        uniques : ndarray
        ")
                        (reparse-symbol indented_block_body) [13839 14243])
                    ("nunique" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14260 14264])
                            ("dropna" variable nil (reparse-symbol function_parameters) [14266 14272]))                          
                        :documentation "
        Return number of unique elements in the object.

        Excludes NA values by default.

        Parameters
        ----------
        dropna : boolean, default True
            Don't include NaN in the count.

        Returns
        -------
        nunique : int
        ")
                        (reparse-symbol indented_block_body) [14248 14713])
                    ("factorize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14733 14737])
                            ("sort" variable nil (reparse-symbol function_parameters) [14739 14743])
                            ("na_sentinel" variable nil (reparse-symbol function_parameters) [14751 14762]))                          
                        :documentation "
        Encode the object as an enumerated type or categorical variable

        Parameters
        ----------
        sort : boolean, default False
            Sort by values
        na_sentinel: int, default -1
            Value to mark \"not found\"

        Returns
        -------
        labels : the indexer to the original array
        uniques : the unique Index
        ")
                        (reparse-symbol indented_block_body) [14719 15282])
                    ("searchsorted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15304 15308])
                            ("key" variable nil (reparse-symbol function_parameters) [15310 15313])
                            ("side" variable nil (reparse-symbol function_parameters) [15315 15319]))                          
                        :documentation " np.ndarray searchsorted compat ")
                        (reparse-symbol indented_block_body) [15287 15564])
                    ("_make_str_accessor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15613 15617]))                          )
                        (reparse-symbol indented_block_body) [15590 16814])
                    ("str" variable nil (reparse-symbol indented_block_body) [16819 16876])
                    ("_dir_additions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16901 16905]))                          )
                        (reparse-symbol indented_block_body) [16882 16929])
                    ("_dir_deletions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16953 16957]))                          )
                        (reparse-symbol indented_block_body) [16934 17090])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [17095 17436])
                    ("" code nil (reparse-symbol indented_block_body) [17451 17507])
                    ("drop_duplicates" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17532 17536])
                            ("take_last" variable nil (reparse-symbol function_parameters) [17538 17547])
                            ("inplace" variable nil (reparse-symbol function_parameters) [17555 17562]))                          )
                        (reparse-symbol indented_block_body) [17512 17787])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [17792 18120])
                    ("" code nil (reparse-symbol indented_block_body) [18135 18186])
                    ("duplicated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18206 18210])
                            ("take_last" variable nil (reparse-symbol function_parameters) [18212 18221]))                          )
                        (reparse-symbol indented_block_body) [18191 18559])
                    ("_update_inplace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18677 18681])
                            ("result" variable nil (reparse-symbol function_parameters) [18683 18689])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18691 18699]))                          )
                        (reparse-symbol indented_block_body) [18657 18742]))                  
                :type "class")
                nil [9317 18742]))          
      :file "base.py"
      :pointmax 18742
      :fsize 18741
      :lastmodtime '(21949 21283 982394 994000)
      :unmatched-syntax nil)
    (semanticdb-table "frame.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
DataFrame
---------
An efficient 2D container for potentially mixed-type time series or other
labeled data series.

Similar to its R counterpart, data.frame, except providing automatic data
alignment and a host of useful data manipulation methods having to do with the
labeling information
\"\"\"" code nil nil [1 298])
            ("__future__" include nil nil [299 330])
            ("functools" include nil nil [404 420])
            ("collections" include nil nil [421 439])
            ("itertools" include nil nil [440 456])
            ("sys" include nil nil [457 467])
            ("types" include nil nil [468 480])
            ("warnings" include nil nil [481 496])
            ("numpy" include nil nil [498 525])
            ("numpy" include nil nil [526 544])
            ("numpy.ma" include nil nil [545 566])
            ("" code nil nil [599 1016])
            ("pandas.core.generic" include nil nil [1017 1070])
            ("pandas.core.index" include nil nil [1071 1133])
            ("" code nil nil [1167 1301])
            ("" code nil nil [1336 1488])
            ("pandas.core.series" include nil nil [1489 1526])
            ("pandas.core.categorical" include nil nil [1527 1574])
            ("pandas.computation.expressions" include nil nil [1575 1627])
            ("pandas.computation.eval" include nil nil [1628 1677])
            ("numpy" include nil nil [1678 1719])
            ("" code nil nil [1745 1851])
            ("pandas" include nil nil [1852 1877])
            ("pandas.sparse.array" include nil nil [1878 1921])
            ("pandas.util.decorators" include nil nil [1922 2013])
            ("pandas.tseries.period" include nil nil [2015 2060])
            ("pandas.tseries.index" include nil nil [2061 2107])
            ("pandas.core.algorithms" include nil nil [2109 2147])
            ("pandas.core.common" include nil nil [2148 2180])
            ("pandas.core.format" include nil nil [2181 2213])
            ("pandas.core.nanops" include nil nil [2214 2249])
            ("pandas.core.ops" include nil nil [2250 2279])
            ("pandas.lib" include nil nil [2281 2305])
            ("pandas.algos" include nil nil [2306 2335])
            ("pandas.core.config" include nil nil [2337 2378])
            ("_shared_doc_kwargs" variable nil nil [2475 2614])
            ("_numeric_only_doc" variable nil nil [2616 2794])
            ("_merge_doc" variable nil nil [2796 5269])
            ("DataFrame" type
               (:documentation " Two-dimensional size-mutable, potentially heterogeneous tabular data
    structure with labeled axes (rows and columns). Arithmetic operations
    align on both row and column labels. Can be thought of as a dict-like
    container for Series objects. The primary pandas data structure

    Parameters
    ----------
    data : numpy ndarray (structured or homogeneous), dict, or DataFrame
        Dict can contain Series, arrays, constants, or list-like objects
    index : Index or array-like
        Index to use for resulting frame. Will default to np.arange(n) if
        no indexing information part of input data and no index provided
    columns : Index or array-like
        Column labels to use for resulting frame. Will default to
        np.arange(n) if no column labels are provided
    dtype : dtype, default None
        Data type to force, otherwise infer
    copy : boolean, default False
        Copy data from inputs. Only affects DataFrame / 2d ndarray input

    Examples
    --------
    >>> d = {'col1': ts1, 'col2': ts2}
    >>> df = DataFrame(data=d, index=index)
    >>> df2 = DataFrame(np.random.randn(10, 5))
    >>> df3 = DataFrame(np.random.randn(10, 5),
    ...                 columns=['a', 'b', 'c', 'd', 'e'])

    See also
    --------
    DataFrame.from_records : constructor from tuples, also record arrays
    DataFrame.from_dict : from dicts of Series, arrays, or dicts
    DataFrame.from_csv : from CSV files
    DataFrame.from_items : from sequence of (key, value) pairs
    pandas.read_csv, pandas.read_table, pandas.read_clipboard
    "
                :superclasses ("NDFrame")
                :members 
                  ( ("_auto_consolidate" variable nil (reparse-symbol indented_block_body) [6983 7007])
                    ("_constructor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7044 7048]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7013 7076])
                    ("_constructor_sliced" variable nil (reparse-symbol indented_block_body) [7081 7109])
                    ("_constructor_expanddim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7156 7160]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7115 7228])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [7339 7378])
                            ("if" code nil (reparse-symbol indented_block_body) [7386 7456])
                            ("if" code nil (reparse-symbol indented_block_body) [7465 7527])
                            ("if" code nil (reparse-symbol indented_block_body) [7536 11483])
                            ("NDFrame" code nil (reparse-symbol indented_block_body) [11492 11534]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7246 7250])
                            ("data" variable nil (reparse-symbol function_parameters) [7252 7256])
                            ("index" variable nil (reparse-symbol function_parameters) [7263 7268])
                            ("columns" variable nil (reparse-symbol function_parameters) [7275 7282])
                            ("dtype" variable nil (reparse-symbol function_parameters) [7289 7294])
                            ("copy" variable nil (reparse-symbol function_parameters) [7318 7322]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7233 11535])
                    ("_init_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11555 11559])
                            ("data" variable nil (reparse-symbol function_parameters) [11561 11565])
                            ("index" variable nil (reparse-symbol function_parameters) [11567 11572])
                            ("columns" variable nil (reparse-symbol function_parameters) [11574 11581])
                            ("dtype" variable nil (reparse-symbol function_parameters) [11583 11588]))                          
                        :documentation "
        Segregate Series based on type and coerce into matrices.
        Needs to handle a lot of exceptional cases.
        ")
                        (reparse-symbol indented_block_body) [11540 13176])
                    ("_init_ndarray" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13199 13203])
                            ("values" variable nil (reparse-symbol function_parameters) [13205 13211])
                            ("index" variable nil (reparse-symbol function_parameters) [13213 13218])
                            ("columns" variable nil (reparse-symbol function_parameters) [13220 13227])
                            ("dtype" variable nil (reparse-symbol function_parameters) [13229 13234])
                            ("copy" variable nil (reparse-symbol function_parameters) [13263 13267]))                          )
                        (reparse-symbol indented_block_body) [13181 15802])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15830 15834]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15807 15879])
                    ("shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15908 15912]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15884 15967])
                    ("_repr_fits_vertical_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15997 16001]))                          
                        :documentation "
        Check length against max_rows.
        ")
                        (reparse-symbol indented_block_body) [15972 16154])
                    ("_repr_fits_horizontal_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16186 16190])
                            ("ignore_width" variable nil (reparse-symbol function_parameters) [16192 16204]))                          
                        :documentation "
        Check if full repr fits in horizontal boundaries imposed by the display
        options width and max_columns. In case off non-interactive session, no
        boundaries apply.

        ignore_width is here so ipnb+HTML output can behave the way
        users expect. display.max_columns remains in effect.
        GH3541, GH3573
        ")
                        (reparse-symbol indented_block_body) [16159 18049])
                    ("_info_repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18069 18073]))                          
                        :documentation "True if the repr should show the info view.")
                        (reparse-symbol indented_block_body) [18054 18332])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18353 18357]))                          
                        :documentation "
        Return a string representation for a particular DataFrame

        Invoked by unicode(df) in py2 only. Yields a Unicode String in both
        py2/py3.
        ")
                        (reparse-symbol indented_block_body) [18337 19149])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19170 19174]))                          
                        :documentation "
        Return a html representation for a particular DataFrame.
        Mainly for IPython notebook.
        ")
                        (reparse-symbol indented_block_body) [19154 20579])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20598 20602]))                          
                        :documentation "Iterator over (column, series) pairs")
                        (reparse-symbol indented_block_body) [20584 20909])
                    ("iterrows" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20927 20931]))                          
                        :documentation "
        Iterate over rows of DataFrame as (index, Series) pairs.

        Notes
        -----

        * ``iterrows`` does **not** preserve dtypes across the rows (dtypes
          are preserved across columns for DataFrames). For example,

            >>> df = DataFrame([[1, 1.0]], columns=['x', 'y'])
            >>> row = next(df.iterrows())[1]
            >>> print(row['x'].dtype)
            float64
            >>> print(df['x'].dtype)
            int64

        Returns
        -------
        it : generator
            A generator that iterates over the rows of the frame.
        ")
                        (reparse-symbol indented_block_body) [20914 21695])
                    ("itertuples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21715 21719])
                            ("index" variable nil (reparse-symbol function_parameters) [21721 21726]))                          
                        :documentation "
        Iterate over rows of DataFrame as tuples, with index value
        as first element of the tuple
        ")
                        (reparse-symbol indented_block_body) [21700 22115])
                    ("if" code nil (reparse-symbol indented_block_body) [22120 22181])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22198 22202]))                          
                        :documentation "Returns length of info axis, but here we use the index ")
                        (reparse-symbol indented_block_body) [22186 22306])
                    ("dot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22319 22323])
                            ("other" variable nil (reparse-symbol function_parameters) [22325 22330]))                          
                        :documentation "
        Matrix multiplication with DataFrame or Series objects

        Parameters
        ----------
        other : DataFrame or Series

        Returns
        -------
        dot_product : DataFrame or Series
        ")
                        (reparse-symbol indented_block_body) [22311 24008])
                    ("from_dict" function
                       (:documentation "
        Construct DataFrame from dict of array-like or dicts

        Parameters
        ----------
        data : dict
            {field : array-like} or {field : dict}
        orient : {'columns', 'index'}, default 'columns'
            The \"orientation\" of the data. If the keys of the passed dict
            should be the columns of the resulting DataFrame, pass 'columns'
            (default). Otherwise if the keys should be rows, pass 'index'.
        dtype : dtype, default None
            Data type to force, otherwise infer

        Returns
        -------
        DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [24164 24167])
                            ("data" variable nil (reparse-symbol function_parameters) [24169 24173])
                            ("orient" variable nil (reparse-symbol function_parameters) [24175 24181])
                            ("dtype" variable nil (reparse-symbol function_parameters) [24193 24198]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24133 25406])
                    ("" code nil (reparse-symbol indented_block_body) [25427 25474])
                    ("to_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25491 25495])
                            ("orient" variable nil (reparse-symbol function_parameters) [25497 25503]))                          
                        :documentation "Convert DataFrame to dictionary.

        Parameters
        ----------
        orient : str {'dict', 'list', 'series', 'split', 'records'}
            Determines the type of the values of the dictionary.

            - dict (default) : dict like {column -> {index -> value}}
            - list : dict like {column -> [values]}
            - series : dict like {column -> Series(values)}
            - split : dict like
              {index -> [index], columns -> [columns], data -> [values]}
            - records : list like
              [{column -> value}, ... , {column -> value}]

            Abbreviations are allowed. `s` indicates `series` and `sp`
            indicates `split`.

        Returns
        -------
        result : dict like {column -> {index -> value}}
        ")
                        (reparse-symbol indented_block_body) [25479 27280])
                    ("to_gbq" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27296 27300])
                            ("destination_table" variable nil (reparse-symbol function_parameters) [27302 27319])
                            ("project_id" variable nil (reparse-symbol function_parameters) [27321 27331])
                            ("chunksize" variable nil (reparse-symbol function_parameters) [27338 27347])
                            ("verbose" variable nil (reparse-symbol function_parameters) [27370 27377])
                            ("reauth" variable nil (reparse-symbol function_parameters) [27384 27390]))                          
                        :documentation "Write a DataFrame to a Google BigQuery table.

        THIS IS AN EXPERIMENTAL LIBRARY

        If the table exists, the dataframe will be written to the table using
        the defined table schema and column types. For simplicity, this method
        uses the Google BigQuery streaming API. The to_gbq method chunks data
        into a default chunk size of 10,000. Failures return the complete error
        response which can be quite long depending on the size of the insert.
        There are several important limitations of the Google streaming API
        which are detailed at:
        https://developers.google.com/bigquery/streaming-data-into-bigquery.

        Parameters
        ----------
        dataframe : DataFrame
            DataFrame to be written
        destination_table : string
            Name of table to be written, in the form 'dataset.tablename'
        project_id : str
            Google BigQuery Account project ID.
        chunksize : int (default 10000)
            Number of rows to be inserted in each chunk from the dataframe.
        verbose : boolean (default True)
            Show percentage complete
        reauth : boolean (default False)
            Force Google BigQuery to reauthenticate the user. This is useful
            if multiple accounts are used.

        ")
                        (reparse-symbol indented_block_body) [27285 28943])
                    ("from_records" function
                       (:documentation "
        Convert structured or record ndarray to DataFrame

        Parameters
        ----------
        data : ndarray (structured dtype), list of tuples, dict, or DataFrame
        index : string, list of fields, array-like
            Field of array to use as the index, alternately a specific set of
            input labels to use
        exclude : sequence, default None
            Columns or fields to exclude
        columns : sequence, default None
            Column names to use. If the passed data do not have names
            associated with them, this argument provides names for the
            columns. Otherwise this argument indicates the order of the columns
            in the result (any names not found in the data will become all-NA
            columns)
        coerce_float : boolean, default False
            Attempt to convert values to non-string, non-numeric objects (like
            decimal.Decimal) to floating point, useful for SQL result sets

        Returns
        -------
        df : DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28982 28985])
                            ("data" variable nil (reparse-symbol function_parameters) [28987 28991])
                            ("index" variable nil (reparse-symbol function_parameters) [28993 28998])
                            ("exclude" variable nil (reparse-symbol function_parameters) [29005 29012])
                            ("columns" variable nil (reparse-symbol function_parameters) [29019 29026])
                            ("coerce_float" variable nil (reparse-symbol function_parameters) [29054 29066])
                            ("nrows" variable nil (reparse-symbol function_parameters) [29074 29079]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [28948 33503])
                    ("to_records" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33523 33527])
                            ("index" variable nil (reparse-symbol function_parameters) [33529 33534])
                            ("convert_datetime64" variable nil (reparse-symbol function_parameters) [33541 33559]))                          
                        :documentation "
        Convert DataFrame to record array. Index will be put in the
        'index' field of the record array if requested

        Parameters
        ----------
        index : boolean, default True
            Include index in resulting record array, stored in 'index' field
        convert_datetime64 : boolean, default True
            Whether to convert the index to datetime.datetime if it is a
            DatetimeIndex

        Returns
        -------
        y : recarray
        ")
                        (reparse-symbol indented_block_body) [33508 35287])
                    ("from_items" function
                       (:documentation "
        Convert (key, value) pairs to DataFrame. The keys will be the axis
        index (usually the columns, but depends on the specified
        orientation). The values should be arrays or Series.

        Parameters
        ----------
        items : sequence of (key, value) pairs
            Values should be arrays or Series.
        columns : sequence of column labels, optional
            Must be passed if orient='index'.
        orient : {'columns', 'index'}, default 'columns'
            The \"orientation\" of the data. If the keys of the
            input correspond to column labels, pass 'columns'
            (default). Otherwise if the keys correspond to the index,
            pass 'index'.

        Returns
        -------
        frame : DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [35324 35327])
                            ("items" variable nil (reparse-symbol function_parameters) [35329 35334])
                            ("columns" variable nil (reparse-symbol function_parameters) [35336 35343])
                            ("orient" variable nil (reparse-symbol function_parameters) [35350 35356]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35292 37356])
                    ("_from_arrays" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [37395 37398])
                            ("arrays" variable nil (reparse-symbol function_parameters) [37400 37406])
                            ("columns" variable nil (reparse-symbol function_parameters) [37408 37415])
                            ("index" variable nil (reparse-symbol function_parameters) [37417 37422])
                            ("dtype" variable nil (reparse-symbol function_parameters) [37424 37429]))                          )
                        (reparse-symbol indented_block_body) [37361 37536])
                    ("from_csv" function
                       (:documentation "
        Read delimited file into DataFrame

        Parameters
        ----------
        path : string file path or file handle / StringIO
        header : int, default 0
            Row to use at header (skip prior rows)
        sep : string, default ','
            Field delimiter
        index_col : int or sequence, default 0
            Column to use for index. If a sequence is given, a MultiIndex
            is used. Different default from read_table
        parse_dates : boolean, default True
            Parse dates. Different default from read_table
        tupleize_cols : boolean, default False
            write multi_index columns as a list of tuples (if True)
            or new (expanded format) if False)
        infer_datetime_format: boolean, default False
            If True and `parse_dates` is True for a column, try to infer the
            datetime format based on the first datetime string. If the format
            can be inferred, there often will be a large parsing speed-up.

        Notes
        -----
        Preferable to use read_table for most general purposes but from_csv
        makes for an easy roundtrip to and from file, especially with a
        DataFrame of time series data

        Returns
        -------
        y : DataFrame
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [37571 37574])
                            ("path" variable nil (reparse-symbol function_parameters) [37576 37580])
                            ("header" variable nil (reparse-symbol function_parameters) [37582 37588])
                            ("sep" variable nil (reparse-symbol function_parameters) [37592 37595])
                            ("index_col" variable nil (reparse-symbol function_parameters) [37601 37610])
                            ("parse_dates" variable nil (reparse-symbol function_parameters) [37631 37642])
                            ("encoding" variable nil (reparse-symbol function_parameters) [37649 37657])
                            ("tupleize_cols" variable nil (reparse-symbol function_parameters) [37664 37677])
                            ("infer_datetime_format" variable nil (reparse-symbol function_parameters) [37702 37723]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [37541 39358])
                    ("to_sparse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39377 39381])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [39383 39393])
                            ("kind" variable nil (reparse-symbol function_parameters) [39400 39404]))                          
                        :documentation "
        Convert to SparseDataFrame

        Parameters
        ----------
        fill_value : float, default NaN
        kind : {'block', 'integer'}

        Returns
        -------
        y : SparseDataFrame
        ")
                        (reparse-symbol indented_block_body) [39363 39880])
                    ("to_panel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39898 39902]))                          
                        :documentation "
        Transform long (stacked) format (DataFrame) into wide (3D, Panel)
        format.

        Currently the index of the DataFrame must be a 2-level MultiIndex. This
        may be generalized later

        Returns
        -------
        panel : Panel
        ")
                        (reparse-symbol indented_block_body) [39885 41613])
                    ("to_wide" variable nil (reparse-symbol indented_block_body) [41618 41658])
                    ("to_csv" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41675 41679])
                            ("path_or_buf" variable nil (reparse-symbol function_parameters) [41681 41692])
                            ("sep" variable nil (reparse-symbol function_parameters) [41699 41702])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [41708 41714])
                            ("float_format" variable nil (reparse-symbol function_parameters) [41719 41731])
                            ("columns" variable nil (reparse-symbol function_parameters) [41753 41760])
                            ("header" variable nil (reparse-symbol function_parameters) [41767 41773])
                            ("index" variable nil (reparse-symbol function_parameters) [41780 41785])
                            ("index_label" variable nil (reparse-symbol function_parameters) [41792 41803])
                            ("mode" variable nil (reparse-symbol function_parameters) [41825 41829])
                            ("encoding" variable nil (reparse-symbol function_parameters) [41835 41843])
                            ("quoting" variable nil (reparse-symbol function_parameters) [41850 41857])
                            ("quotechar" variable nil (reparse-symbol function_parameters) [41879 41888])
                            ("line_terminator" variable nil (reparse-symbol function_parameters) [41894 41909])
                            ("chunksize" variable nil (reparse-symbol function_parameters) [41916 41925])
                            ("tupleize_cols" variable nil (reparse-symbol function_parameters) [41947 41960])
                            ("date_format" variable nil (reparse-symbol function_parameters) [41968 41979])
                            ("doublequote" variable nil (reparse-symbol function_parameters) [41986 41997])
                            ("escapechar" variable nil (reparse-symbol function_parameters) [42019 42029])
                            ("decimal" variable nil (reparse-symbol function_parameters) [42036 42043])
                            ("kwds" variable nil (reparse-symbol function_parameters) [42049 42055]))                          )
                        (reparse-symbol indented_block_body) [41664 45663])
                    ("to_excel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45681 45685])
                            ("excel_writer" variable nil (reparse-symbol function_parameters) [45687 45699])
                            ("sheet_name" variable nil (reparse-symbol function_parameters) [45701 45711])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [45722 45728])
                            ("float_format" variable nil (reparse-symbol function_parameters) [45750 45762])
                            ("columns" variable nil (reparse-symbol function_parameters) [45769 45776])
                            ("header" variable nil (reparse-symbol function_parameters) [45783 45789])
                            ("index" variable nil (reparse-symbol function_parameters) [45796 45801])
                            ("index_label" variable nil (reparse-symbol function_parameters) [45825 45836])
                            ("startrow" variable nil (reparse-symbol function_parameters) [45843 45851])
                            ("startcol" variable nil (reparse-symbol function_parameters) [45855 45863])
                            ("engine" variable nil (reparse-symbol function_parameters) [45867 45873])
                            ("merge_cells" variable nil (reparse-symbol function_parameters) [45897 45908])
                            ("encoding" variable nil (reparse-symbol function_parameters) [45915 45923])
                            ("inf_rep" variable nil (reparse-symbol function_parameters) [45930 45937]))                          
                        :documentation "
        Write DataFrame to a excel sheet

        Parameters
        ----------
        excel_writer : string or ExcelWriter object
            File path or existing ExcelWriter
        sheet_name : string, default 'Sheet1'
            Name of sheet which will contain DataFrame
        na_rep : string, default ''
            Missing data representation
        float_format : string, default None
            Format string for floating point numbers
        columns : sequence, optional
            Columns to write
        header : boolean or list of string, default True
            Write out column names. If a list of string is given it is
            assumed to be aliases for the column names
        index : boolean, default True
            Write row names (index)
        index_label : string or sequence, default None
            Column label for index column(s) if desired. If None is given, and
            `header` and `index` are True, then the index names are used. A
            sequence should be given if the DataFrame uses MultiIndex.
        startrow :
            upper left cell row to dump data frame
        startcol :
            upper left cell column to dump data frame
        engine : string, default None
            write engine to use - you can also set this via the options
            ``io.excel.xlsx.writer``, ``io.excel.xls.writer``, and
            ``io.excel.xlsm.writer``.
        merge_cells : boolean, default True
            Write MultiIndex and Hierarchical Rows as merged cells.
        encoding: string, default None
            encoding of the resulting excel file. Only necessary for xlwt,
            other writers support unicode natively.
        inf_rep : string, default 'inf'
            Representation for infinity (there is no native representation for
            infinity in Excel)

        Notes
        -----
        If passing an existing ExcelWriter object, then the sheet will be added
        to the existing workbook.  This can be used to save different
        DataFrames to one workbook:

        >>> writer = ExcelWriter('output.xlsx')
        >>> df1.to_excel(writer,'Sheet1')
        >>> df2.to_excel(writer,'Sheet2')
        >>> writer.save()
        ")
                        (reparse-symbol indented_block_body) [45668 49409])
                    ("to_stata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49436 49440])
                            ("fname" variable nil (reparse-symbol function_parameters) [49442 49447])
                            ("convert_dates" variable nil (reparse-symbol function_parameters) [49449 49462])
                            ("write_index" variable nil (reparse-symbol function_parameters) [49469 49480])
                            ("encoding" variable nil (reparse-symbol function_parameters) [49487 49495])
                            ("byteorder" variable nil (reparse-symbol function_parameters) [49519 49528])
                            ("time_stamp" variable nil (reparse-symbol function_parameters) [49535 49545])
                            ("data_label" variable nil (reparse-symbol function_parameters) [49552 49562]))                          
                        :documentation "
        A class for writing Stata binary dta files from array-like objects

        Parameters
        ----------
        fname : file path or buffer
            Where to save the dta file.
        convert_dates : dict
            Dictionary mapping column of datetime types to the stata internal
            format that you want to use for the dates. Options are
            'tc', 'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either a
            number or a name.
        encoding : str
            Default is latin-1. Note that Stata does not support unicode.
        byteorder : str
            Can be \">\", \"<\", \"little\", or \"big\". The default is None which uses
            `sys.byteorder`

        Examples
        --------
        >>> writer = StataWriter('./data_file.dta', data)
        >>> writer.write_file()

        Or with dates

        >>> writer = StataWriter('./date_data_file.dta', data, {2 : 'tw'})
        >>> writer.write_file()
        ")
                        (reparse-symbol indented_block_body) [49414 50895])
                    ("" code nil (reparse-symbol indented_block_body) [50909 50945])
                    ("to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50964 50968])
                            ("buf" variable nil (reparse-symbol function_parameters) [50970 50973])
                            ("columns" variable nil (reparse-symbol function_parameters) [50980 50987])
                            ("col_space" variable nil (reparse-symbol function_parameters) [50994 51003])
                            ("colSpace" variable nil (reparse-symbol function_parameters) [51010 51018])
                            ("header" variable nil (reparse-symbol function_parameters) [51043 51049])
                            ("index" variable nil (reparse-symbol function_parameters) [51056 51061])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [51068 51074])
                            ("formatters" variable nil (reparse-symbol function_parameters) [51082 51092])
                            ("float_format" variable nil (reparse-symbol function_parameters) [51117 51129])
                            ("sparsify" variable nil (reparse-symbol function_parameters) [51136 51144])
                            ("index_names" variable nil (reparse-symbol function_parameters) [51151 51162])
                            ("justify" variable nil (reparse-symbol function_parameters) [51187 51194])
                            ("line_width" variable nil (reparse-symbol function_parameters) [51201 51211])
                            ("max_rows" variable nil (reparse-symbol function_parameters) [51218 51226])
                            ("max_cols" variable nil (reparse-symbol function_parameters) [51233 51241])
                            ("show_dimensions" variable nil (reparse-symbol function_parameters) [51266 51281]))                          
                        :documentation "
        Render a DataFrame to a console-friendly tabular output.
        ")
                        (reparse-symbol indented_block_body) [50950 52519])
                    ("" code nil (reparse-symbol indented_block_body) [52533 52569])
                    ("to_html" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52586 52590])
                            ("buf" variable nil (reparse-symbol function_parameters) [52592 52595])
                            ("columns" variable nil (reparse-symbol function_parameters) [52602 52609])
                            ("col_space" variable nil (reparse-symbol function_parameters) [52616 52625])
                            ("colSpace" variable nil (reparse-symbol function_parameters) [52632 52640])
                            ("header" variable nil (reparse-symbol function_parameters) [52663 52669])
                            ("index" variable nil (reparse-symbol function_parameters) [52676 52681])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [52688 52694])
                            ("formatters" variable nil (reparse-symbol function_parameters) [52702 52712])
                            ("float_format" variable nil (reparse-symbol function_parameters) [52735 52747])
                            ("sparsify" variable nil (reparse-symbol function_parameters) [52754 52762])
                            ("index_names" variable nil (reparse-symbol function_parameters) [52769 52780])
                            ("justify" variable nil (reparse-symbol function_parameters) [52803 52810])
                            ("bold_rows" variable nil (reparse-symbol function_parameters) [52817 52826])
                            ("classes" variable nil (reparse-symbol function_parameters) [52833 52840])
                            ("escape" variable nil (reparse-symbol function_parameters) [52847 52853])
                            ("max_rows" variable nil (reparse-symbol function_parameters) [52876 52884])
                            ("max_cols" variable nil (reparse-symbol function_parameters) [52891 52899])
                            ("show_dimensions" variable nil (reparse-symbol function_parameters) [52906 52921])
                            ("notebook" variable nil (reparse-symbol function_parameters) [52945 52953]))                          
                        :documentation "
        Render a DataFrame as an HTML table.

        `to_html`-specific options:

        bold_rows : boolean, default True
            Make the row labels bold in the output
        classes : str or list or tuple, default None
            CSS class(es) to apply to the resulting html table
        escape : boolean, default True
            Convert the characters <, >, and & to HTML-safe sequences.=
        max_rows : int, optional
            Maximum number of rows to show before truncating. If None, show
            all.
        max_cols : int, optional
            Maximum number of columns to show before truncating. If None, show
            all.

        ")
                        (reparse-symbol indented_block_body) [52574 54845])
                    ("" code nil (reparse-symbol indented_block_body) [54859 54895])
                    ("to_latex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54913 54917])
                            ("buf" variable nil (reparse-symbol function_parameters) [54919 54922])
                            ("columns" variable nil (reparse-symbol function_parameters) [54929 54936])
                            ("col_space" variable nil (reparse-symbol function_parameters) [54943 54952])
                            ("colSpace" variable nil (reparse-symbol function_parameters) [54959 54967])
                            ("header" variable nil (reparse-symbol function_parameters) [54991 54997])
                            ("index" variable nil (reparse-symbol function_parameters) [55004 55009])
                            ("na_rep" variable nil (reparse-symbol function_parameters) [55016 55022])
                            ("formatters" variable nil (reparse-symbol function_parameters) [55030 55040])
                            ("float_format" variable nil (reparse-symbol function_parameters) [55064 55076])
                            ("sparsify" variable nil (reparse-symbol function_parameters) [55083 55091])
                            ("index_names" variable nil (reparse-symbol function_parameters) [55098 55109])
                            ("bold_rows" variable nil (reparse-symbol function_parameters) [55133 55142])
                            ("longtable" variable nil (reparse-symbol function_parameters) [55149 55158])
                            ("escape" variable nil (reparse-symbol function_parameters) [55166 55172]))                          
                        :documentation "
        Render a DataFrame to a tabular environment table. You can splice
        this into a LaTeX document. Requires \\\\usepackage{booktabs}.

        `to_latex`-specific options:

        bold_rows : boolean, default True
            Make the row labels bold in the output
        longtable : boolean, default False
            Use a longtable environment instead of tabular. Requires adding
            a \\\\usepackage{longtable} to your LaTeX preamble.
        escape : boolean, default True
            When set to False prevents from escaping latex special
            characters in column names.

        ")
                        (reparse-symbol indented_block_body) [54900 56733])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56747 56751])
                            ("verbose" variable nil (reparse-symbol function_parameters) [56753 56760])
                            ("buf" variable nil (reparse-symbol function_parameters) [56767 56770])
                            ("max_cols" variable nil (reparse-symbol function_parameters) [56777 56785])
                            ("memory_usage" variable nil (reparse-symbol function_parameters) [56792 56804])
                            ("null_counts" variable nil (reparse-symbol function_parameters) [56811 56822]))                          
                        :documentation "
        Concise summary of a DataFrame.

        Parameters
        ----------
        verbose : {None, True, False}, optional
            Whether to print the full summary.
            None follows the `display.max_info_columns` setting.
            True or False overrides the `display.max_info_columns` setting.
        buf : writable buffer, defaults to sys.stdout
        max_cols : int, default None
            Determines whether full summary or short summary is printed.
            None follows the `display.max_info_columns` setting.
        memory_usage : boolean, default None
            Specifies whether total memory usage of the DataFrame
            elements (including index) should be displayed. None follows
            the `display.memory_usage` setting. True or False overrides
            the `display.memory_usage` setting. Memory usage is shown in
            human-readable units (base-2 representation).
        null_counts : boolean, default None
            Whether to show the non-null counts
            If None, then only show if the frame is smaller than max_info_rows and max_info_columns.
            If True, always show counts.
            If False, never show counts.

        ")
                        (reparse-symbol indented_block_body) [56738 61474])
                    ("memory_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61496 61500])
                            ("index" variable nil (reparse-symbol function_parameters) [61502 61507]))                          
                        :documentation "Memory usage of DataFrame columns.

        Parameters
        ----------
        index : bool
            Specifies whether to include memory usage of DataFrame's
            index in returned Series. If `index=True` (default is False)
            the first index of the Series is `Index`.

        Returns
        -------
        sizes : Series
            A series with column names as index and memory usage of
            columns with units of bytes.

        Notes
        -----
        Memory usage does not include memory consumed by elements that
        are not components of the array.

        See Also
        --------
        numpy.ndarray.nbytes
        ")
                        (reparse-symbol indented_block_body) [61479 62464])
                    ("transpose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62483 62487]))                          
                        :documentation "Transpose index and columns")
                        (reparse-symbol indented_block_body) [62469 62586])
                    ("T" variable nil (reparse-symbol indented_block_body) [62591 62614])
                    ("_unpickle_frame_compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62771 62775])
                            ("state" variable nil (reparse-symbol function_parameters) [62777 62782]))                          )
                        (reparse-symbol indented_block_body) [62744 63178])
                    ("_unpickle_matrix_compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63211 63215])
                            ("state" variable nil (reparse-symbol function_parameters) [63217 63222]))                          )
                        (reparse-symbol indented_block_body) [63183 63826])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64033 64037])
                            ("index" variable nil (reparse-symbol function_parameters) [64039 64044])
                            ("col" variable nil (reparse-symbol function_parameters) [64046 64049])
                            ("takeable" variable nil (reparse-symbol function_parameters) [64051 64059]))                          
                        :documentation "
        Quickly retrieve single value at passed column and index

        Parameters
        ----------
        index : row label
        col : column label
        takeable : interpret the index/col as indexers, default False

        Returns
        -------
        value : scalar value
        ")
                        (reparse-symbol indented_block_body) [64019 64656])
                    ("set_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64675 64679])
                            ("index" variable nil (reparse-symbol function_parameters) [64681 64686])
                            ("col" variable nil (reparse-symbol function_parameters) [64688 64691])
                            ("value" variable nil (reparse-symbol function_parameters) [64693 64698])
                            ("takeable" variable nil (reparse-symbol function_parameters) [64700 64708]))                          
                        :documentation "
        Put single value at passed column and index

        Parameters
        ----------
        index : row label
        col : column label
        value : scalar value
        takeable : interpret the index/col as indexers, default False

        Returns
        -------
        frame : DataFrame
            If label pair is contained, will be reference to calling DataFrame,
            otherwise a new object
        ")
                        (reparse-symbol indented_block_body) [64661 65709])
                    ("irow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65723 65727])
                            ("i" variable nil (reparse-symbol function_parameters) [65729 65730])
                            ("copy" variable nil (reparse-symbol function_parameters) [65732 65736]))                          )
                        (reparse-symbol indented_block_body) [65714 65781])
                    ("icol" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65795 65799])
                            ("i" variable nil (reparse-symbol function_parameters) [65801 65802]))                          )
                        (reparse-symbol indented_block_body) [65786 65841])
                    ("_ixs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65855 65859])
                            ("i" variable nil (reparse-symbol function_parameters) [65861 65862])
                            ("axis" variable nil (reparse-symbol function_parameters) [65864 65868]))                          
                        :documentation "
        i : int, slice, or sequence of integers
        axis : int
        ")
                        (reparse-symbol indented_block_body) [65846 68157])
                    ("iget_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68177 68181])
                            ("i" variable nil (reparse-symbol function_parameters) [68183 68184])
                            ("j" variable nil (reparse-symbol function_parameters) [68186 68187]))                          )
                        (reparse-symbol indented_block_body) [68162 68220])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68241 68245])
                            ("key" variable nil (reparse-symbol function_parameters) [68247 68250]))                          )
                        (reparse-symbol indented_block_body) [68225 69071])
                    ("_getitem_column" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69096 69100])
                            ("key" variable nil (reparse-symbol function_parameters) [69102 69105]))                          
                        :documentation " return the actual column ")
                        (reparse-symbol indented_block_body) [69076 69463])
                    ("_getitem_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69487 69491])
                            ("key" variable nil (reparse-symbol function_parameters) [69493 69496]))                          )
                        (reparse-symbol indented_block_body) [69468 69539])
                    ("_getitem_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69563 69567])
                            ("key" variable nil (reparse-symbol function_parameters) [69569 69572]))                          )
                        (reparse-symbol indented_block_body) [69544 70764])
                    ("_getitem_multilevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70793 70797])
                            ("key" variable nil (reparse-symbol function_parameters) [70799 70802]))                          )
                        (reparse-symbol indented_block_body) [70769 71888])
                    ("_getitem_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71912 71916])
                            ("key" variable nil (reparse-symbol function_parameters) [71918 71921]))                          )
                        (reparse-symbol indented_block_body) [71893 72073])
                    ("query" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72088 72092])
                            ("expr" variable nil (reparse-symbol function_parameters) [72094 72098])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [72100 72108]))                          
                        :documentation "Query the columns of a frame with a boolean expression.

        .. versionadded:: 0.13

        Parameters
        ----------
        expr : string
            The query string to evaluate.  You can refer to variables
            in the environment by prefixing them with an '@' character like
            ``@a + b``.
        kwargs : dict
            See the documentation for :func:`pandas.eval` for complete details
            on the keyword arguments accepted by :meth:`DataFrame.query`.

        Returns
        -------
        q : DataFrame

        Notes
        -----
        The result of the evaluation of this expression is first passed to
        :attr:`DataFrame.loc` and if that fails because of a
        multidimensional key (e.g., a DataFrame) then the result will be passed
        to :meth:`DataFrame.__getitem__`.

        This method uses the top-level :func:`pandas.eval` function to
        evaluate the passed query.

        The :meth:`~pandas.DataFrame.query` method uses a slightly
        modified Python syntax by default. For example, the ``&`` and ``|``
        (bitwise) operators have the precedence of their boolean cousins,
        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,
        however the semantics are different.

        You can change the semantics of the expression by passing the keyword
        argument ``parser='python'``. This enforces the same semantics as
        evaluation in Python space. Likewise, you can pass ``engine='python'``
        to evaluate an expression using Python itself as a backend. This is not
        recommended as it is inefficient compared to using ``numexpr`` as the
        engine.

        The :attr:`DataFrame.index` and
        :attr:`DataFrame.columns` attributes of the
        :class:`~pandas.DataFrame` instance are placed in the query namespace
        by default, which allows you to treat both the index and columns of the
        frame as a column in the frame.
        The identifier ``index`` is used for the frame index; you can also
        use the name of the index to identify it in a query.

        For further details and examples see the ``query`` documentation in
        :ref:`indexing <indexing.query>`.

        See Also
        --------
        pandas.eval
        DataFrame.eval

        Examples
        --------
        >>> from numpy.random import randn
        >>> from pandas import DataFrame
        >>> df = DataFrame(randn(10, 2), columns=list('ab'))
        >>> df.query('a > b')
        >>> df[df.a > df.b]  # same result as the previous expression
        ")
                        (reparse-symbol indented_block_body) [72078 75032])
                    ("eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75046 75050])
                            ("expr" variable nil (reparse-symbol function_parameters) [75052 75056])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [75058 75066]))                          
                        :documentation "Evaluate an expression in the context of the calling DataFrame
        instance.

        Parameters
        ----------
        expr : string
            The expression string to evaluate.
        kwargs : dict
            See the documentation for :func:`~pandas.eval` for complete details
            on the keyword arguments accepted by
            :meth:`~pandas.DataFrame.query`.

        Returns
        -------
        ret : ndarray, scalar, or pandas object

        See Also
        --------
        pandas.DataFrame.query
        pandas.eval

        Notes
        -----
        For more details see the API documentation for :func:`~pandas.eval`.
        For detailed examples see :ref:`enhancing performance with eval
        <enhancingperf.eval>`.

        Examples
        --------
        >>> from numpy.random import randn
        >>> from pandas import DataFrame
        >>> df = DataFrame(randn(10, 2), columns=list('ab'))
        >>> df.eval('a + b')
        >>> df.eval('c = a + b')
        ")
                        (reparse-symbol indented_block_body) [75037 76489])
                    ("select_dtypes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76512 76516])
                            ("include" variable nil (reparse-symbol function_parameters) [76518 76525])
                            ("exclude" variable nil (reparse-symbol function_parameters) [76532 76539]))                          
                        :documentation "Return a subset of a DataFrame including/excluding columns based on
        their ``dtype``.

        Parameters
        ----------
        include, exclude : list-like
            A list of dtypes or strings to be included/excluded. You must pass
            in a non-empty sequence for at least one of these.

        Raises
        ------
        ValueError
            * If both of ``include`` and ``exclude`` are empty
            * If ``include`` and ``exclude`` have overlapping elements
            * If any kind of string dtype is passed in.
        TypeError
            * If either of ``include`` or ``exclude`` is not a sequence

        Returns
        -------
        subset : DataFrame
            The subset of the frame including the dtypes in ``include`` and
            excluding the dtypes in ``exclude``.

        Notes
        -----
        * To select all *numeric* types use the numpy dtype ``numpy.number``
        * To select strings you must use the ``object`` dtype, but note that
          this will return *all* object dtype columns
        * See the `numpy dtype hierarchy
          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__
        * To select Pandas categorical dtypes, use 'category'

        Examples
        --------
        >>> df = pd.DataFrame({'a': np.random.randn(6).astype('f4'),
        ...                    'b': [True, False] * 3,
        ...                    'c': [1.0, 2.0] * 3})
        >>> df
                a      b  c
        0  0.3962   True  1
        1  0.1459  False  2
        2  0.2623   True  1
        3  0.0764  False  2
        4 -0.9703   True  1
        5 -1.2094  False  2
        >>> df.select_dtypes(include=['float64'])
           c
        0  1
        1  2
        2  1
        3  2
        4  1
        5  2
        >>> df.select_dtypes(exclude=['floating'])
               b
        0   True
        1  False
        2   True
        3  False
        4   True
        5  False
        ")
                        (reparse-symbol indented_block_body) [76494 80885])
                    ("_box_item_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80911 80915])
                            ("key" variable nil (reparse-symbol function_parameters) [80917 80920])
                            ("values" variable nil (reparse-symbol function_parameters) [80922 80928]))                          )
                        (reparse-symbol indented_block_body) [80890 81165])
                    ("_box_col_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81190 81194])
                            ("values" variable nil (reparse-symbol function_parameters) [81196 81202])
                            ("items" variable nil (reparse-symbol function_parameters) [81204 81209]))                          
                        :documentation " provide boxed values for a column ")
                        (reparse-symbol indented_block_body) [81170 81417])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81438 81442])
                            ("key" variable nil (reparse-symbol function_parameters) [81444 81447])
                            ("value" variable nil (reparse-symbol function_parameters) [81449 81454]))                          )
                        (reparse-symbol indented_block_body) [81422 81911])
                    ("_setitem_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81935 81939])
                            ("key" variable nil (reparse-symbol function_parameters) [81941 81944])
                            ("value" variable nil (reparse-symbol function_parameters) [81946 81951]))                          )
                        (reparse-symbol indented_block_body) [81916 82039])
                    ("_setitem_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82063 82067])
                            ("key" variable nil (reparse-symbol function_parameters) [82069 82072])
                            ("value" variable nil (reparse-symbol function_parameters) [82074 82079]))                          )
                        (reparse-symbol indented_block_body) [82044 83037])
                    ("_setitem_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83061 83065])
                            ("key" variable nil (reparse-symbol function_parameters) [83067 83070])
                            ("value" variable nil (reparse-symbol function_parameters) [83072 83077]))                          )
                        (reparse-symbol indented_block_body) [83042 83435])
                    ("_ensure_valid_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83464 83468])
                            ("value" variable nil (reparse-symbol function_parameters) [83470 83475]))                          
                        :documentation "
        ensure that if we don't have an index, that we can create one from the
        passed value
        ")
                        (reparse-symbol indented_block_body) [83440 84353])
                    ("_set_item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84372 84376])
                            ("key" variable nil (reparse-symbol function_parameters) [84378 84381])
                            ("value" variable nil (reparse-symbol function_parameters) [84383 84388]))                          
                        :documentation "
        Add series to DataFrame in specified column.

        If series is a numpy-array (not a Series/TimeSeries), it must be the
        same length as the DataFrames index or an error will be thrown.

        Series/TimeSeries will be conformed to the DataFrames index to
        ensure homogeneity.
        ")
                        (reparse-symbol indented_block_body) [84358 85047])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85063 85067])
                            ("loc" variable nil (reparse-symbol function_parameters) [85069 85072])
                            ("column" variable nil (reparse-symbol function_parameters) [85074 85080])
                            ("value" variable nil (reparse-symbol function_parameters) [85082 85087])
                            ("allow_duplicates" variable nil (reparse-symbol function_parameters) [85089 85105]))                          
                        :documentation "
        Insert column into DataFrame at specified location.

        If `allow_duplicates` is False, raises Exception if column
        is already contained in the DataFrame.

        Parameters
        ----------
        loc : int
            Must have 0 <= loc <= len(columns)
        column : object
        value : int, Series, or array-like
        ")
                        (reparse-symbol indented_block_body) [85052 85671])
                    ("assign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85687 85691])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [85693 85701]))                          
                        :documentation "
        Assign new columns to a DataFrame, returning a new object
        (a copy) with all the original columns in addition to the new ones.

        .. versionadded:: 0.16.0

        Parameters
        ----------
        kwargs : keyword, value pairs
            keywords are the column names. If the values are
            callable, they are computed on the DataFrame and
            assigned to the new columns. If the values are
            not callable, (e.g. a Series, scalar, or array),
            they are simply assigned.

        Returns
        -------
        df : DataFrame
            A new DataFrame with the new columns in addition to
            all the existing columns.

        Notes
        -----
        Since ``kwargs`` is a dictionary, the order of your
        arguments may not be preserved. The make things predicatable,
        the columns are inserted in alphabetical order, at the end of
        your DataFrame. Assigning multiple columns within the same
        ``assign`` is possible, but you cannot reference other columns
        created within the same ``assign`` call.

        Examples
        --------
        >>> df = DataFrame({'A': range(1, 11), 'B': np.random.randn(10)})

        Where the value is a callable, evaluated on `df`:

        >>> df.assign(ln_A = lambda x: np.log(x.A))
            A         B      ln_A
        0   1  0.426905  0.000000
        1   2 -0.780949  0.693147
        2   3 -0.418711  1.098612
        3   4 -0.269708  1.386294
        4   5 -0.274002  1.609438
        5   6 -0.500792  1.791759
        6   7  1.649697  1.945910
        7   8 -1.495604  2.079442
        8   9  0.549296  2.197225
        9  10 -0.758542  2.302585

        Where the value already exists and is inserted:

        >>> newcol = np.log(df['A'])
        >>> df.assign(ln_A=newcol)
            A         B      ln_A
        0   1  0.426905  0.000000
        1   2 -0.780949  0.693147
        2   3 -0.418711  1.098612
        3   4 -0.269708  1.386294
        4   5 -0.274002  1.609438
        5   6 -0.500792  1.791759
        6   7  1.649697  1.945910
        7   8 -1.495604  2.079442
        8   9  0.549296  2.197225
        9  10 -0.758542  2.302585
        ")
                        (reparse-symbol indented_block_body) [85676 88294])
                    ("_sanitize_column" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88320 88324])
                            ("key" variable nil (reparse-symbol function_parameters) [88326 88329])
                            ("value" variable nil (reparse-symbol function_parameters) [88331 88336]))                          )
                        (reparse-symbol indented_block_body) [88299 91543])
                    ("_series" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91574 91578]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [91548 91792])
                    ("lookup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91808 91812])
                            ("row_labels" variable nil (reparse-symbol function_parameters) [91814 91824])
                            ("col_labels" variable nil (reparse-symbol function_parameters) [91826 91836]))                          
                        :documentation "Label-based \"fancy indexing\" function for DataFrame.
        Given equal-length arrays of row and column labels, return an
        array of the values corresponding to each (row, col) pair.

        Parameters
        ----------
        row_labels : sequence
            The row labels to use for lookup
        col_labels : sequence
            The column labels to use for lookup

        Notes
        -----
        Akin to::

            result = []
            for row, col in zip(row_labels, col_labels):
                result.append(df.get_value(row, col))

        Examples
        --------
        values : ndarray
            The found values

        ")
                        (reparse-symbol indented_block_body) [91797 93482])
                    ("_reindex_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93613 93617])
                            ("axes" variable nil (reparse-symbol function_parameters) [93619 93623])
                            ("level" variable nil (reparse-symbol function_parameters) [93625 93630])
                            ("limit" variable nil (reparse-symbol function_parameters) [93632 93637])
                            ("method" variable nil (reparse-symbol function_parameters) [93639 93645])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [93647 93657])
                            ("copy" variable nil (reparse-symbol function_parameters) [93659 93663]))                          )
                        (reparse-symbol indented_block_body) [93595 94093])
                    ("_reindex_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94117 94121])
                            ("new_index" variable nil (reparse-symbol function_parameters) [94123 94132])
                            ("method" variable nil (reparse-symbol function_parameters) [94134 94140])
                            ("copy" variable nil (reparse-symbol function_parameters) [94142 94146])
                            ("level" variable nil (reparse-symbol function_parameters) [94148 94153])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [94155 94165])
                            ("limit" variable nil (reparse-symbol function_parameters) [94193 94198]))                          )
                        (reparse-symbol indented_block_body) [94098 94549])
                    ("_reindex_columns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94575 94579])
                            ("new_columns" variable nil (reparse-symbol function_parameters) [94581 94592])
                            ("copy" variable nil (reparse-symbol function_parameters) [94594 94598])
                            ("level" variable nil (reparse-symbol function_parameters) [94600 94605])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [94607 94617])
                            ("limit" variable nil (reparse-symbol function_parameters) [94647 94652]))                          )
                        (reparse-symbol indented_block_body) [94554 95013])
                    ("_reindex_multi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95037 95041])
                            ("axes" variable nil (reparse-symbol function_parameters) [95043 95047])
                            ("copy" variable nil (reparse-symbol function_parameters) [95049 95053])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [95055 95065]))                          
                        :documentation " we are guaranteed non-Nones in the axes! ")
                        (reparse-symbol indented_block_body) [95018 95934])
                    ("" code nil (reparse-symbol indented_block_body) [95948 95994])
                    ("reindex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96011 96015])
                            ("index" variable nil (reparse-symbol function_parameters) [96017 96022])
                            ("columns" variable nil (reparse-symbol function_parameters) [96029 96036])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [96043 96051]))                          )
                        (reparse-symbol indented_block_body) [95999 96186])
                    ("" code nil (reparse-symbol indented_block_body) [96200 96251])
                    ("reindex_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96273 96277])
                            ("labels" variable nil (reparse-symbol function_parameters) [96279 96285])
                            ("axis" variable nil (reparse-symbol function_parameters) [96287 96291])
                            ("method" variable nil (reparse-symbol function_parameters) [96295 96301])
                            ("level" variable nil (reparse-symbol function_parameters) [96308 96313])
                            ("copy" variable nil (reparse-symbol function_parameters) [96320 96324])
                            ("limit" variable nil (reparse-symbol function_parameters) [96352 96357])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [96364 96374]))                          )
                        (reparse-symbol indented_block_body) [96256 96689])
                    ("" code nil (reparse-symbol indented_block_body) [96703 96748])
                    ("rename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96764 96768])
                            ("index" variable nil (reparse-symbol function_parameters) [96770 96775])
                            ("columns" variable nil (reparse-symbol function_parameters) [96782 96789])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [96796 96804]))                          )
                        (reparse-symbol indented_block_body) [96753 96937])
                    ("" code nil (reparse-symbol indented_block_body) [96951 96996])
                    ("fillna" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97012 97016])
                            ("value" variable nil (reparse-symbol function_parameters) [97018 97023])
                            ("method" variable nil (reparse-symbol function_parameters) [97030 97036])
                            ("axis" variable nil (reparse-symbol function_parameters) [97043 97047])
                            ("inplace" variable nil (reparse-symbol function_parameters) [97054 97061])
                            ("limit" variable nil (reparse-symbol function_parameters) [97084 97089])
                            ("downcast" variable nil (reparse-symbol function_parameters) [97096 97104])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [97111 97119]))                          )
                        (reparse-symbol indented_block_body) [97001 97400])
                    ("" code nil (reparse-symbol indented_block_body) [97414 97458])
                    ("shift" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97473 97477])
                            ("periods" variable nil (reparse-symbol function_parameters) [97479 97486])
                            ("freq" variable nil (reparse-symbol function_parameters) [97490 97494])
                            ("axis" variable nil (reparse-symbol function_parameters) [97501 97505])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [97509 97517]))                          )
                        (reparse-symbol indented_block_body) [97463 97657])
                    ("set_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97676 97680])
                            ("keys" variable nil (reparse-symbol function_parameters) [97682 97686])
                            ("drop" variable nil (reparse-symbol function_parameters) [97688 97692])
                            ("append" variable nil (reparse-symbol function_parameters) [97699 97705])
                            ("inplace" variable nil (reparse-symbol function_parameters) [97713 97720])
                            ("verify_integrity" variable nil (reparse-symbol function_parameters) [97746 97762]))                          
                        :documentation "
        Set the DataFrame index (row labels) using one or more existing
        columns. By default yields a new object.

        Parameters
        ----------
        keys : column label or list of column labels / arrays
        drop : boolean, default True
            Delete columns to be used as the new index
        append : boolean, default False
            Whether to append columns to existing index
        inplace : boolean, default False
            Modify the DataFrame in place (do not create a new object)
        verify_integrity : boolean, default False
            Check the new index for duplicates. Otherwise defer the check until
            necessary. Setting to False will improve the performance of this
            method

        Examples
        --------
        >>> indexed_df = df.set_index(['A', 'B'])
        >>> indexed_df2 = df.set_index(['A', [0, 1, 2, 0, 1, 2]])
        >>> indexed_df3 = df.set_index([[0, 1, 2, 0, 1, 2]])

        Returns
        -------
        dataframe : DataFrame
        ")
                        (reparse-symbol indented_block_body) [97662 100702])
                    ("reset_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100723 100727])
                            ("level" variable nil (reparse-symbol function_parameters) [100729 100734])
                            ("drop" variable nil (reparse-symbol function_parameters) [100741 100745])
                            ("inplace" variable nil (reparse-symbol function_parameters) [100753 100760])
                            ("col_level" variable nil (reparse-symbol function_parameters) [100768 100777])
                            ("col_fill" variable nil (reparse-symbol function_parameters) [100801 100809]))                          
                        :documentation "
        For DataFrame with multi-level index, return new DataFrame with
        labeling information in the columns under the index names, defaulting
        to 'level_0', 'level_1', etc. if any are None. For a standard index,
        the index name will be used (if set), otherwise a default 'index' or
        'level_0' (if 'index' is already taken) will be used.

        Parameters
        ----------
        level : int, str, tuple, or list, default None
            Only remove the given levels from the index. Removes all levels by
            default
        drop : boolean, default False
            Do not try to insert index into dataframe columns. This resets
            the index to the default integer index.
        inplace : boolean, default False
            Modify the DataFrame in place (do not create a new object)
        col_level : int or str, default 0
            If the columns have multiple levels, determines which level the
            labels are inserted into. By default it is inserted into the first
            level.
        col_fill : object, default ''
            If the columns have multiple levels, determines how the other
            levels are named. If None then the index name is repeated.

        Returns
        -------
        resetted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [100707 105415])
                    ("dropna" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105547 105551])
                            ("axis" variable nil (reparse-symbol function_parameters) [105553 105557])
                            ("how" variable nil (reparse-symbol function_parameters) [105561 105564])
                            ("thresh" variable nil (reparse-symbol function_parameters) [105572 105578])
                            ("subset" variable nil (reparse-symbol function_parameters) [105585 105591])
                            ("inplace" variable nil (reparse-symbol function_parameters) [105613 105620]))                          
                        :documentation "
        Return object with labels on given axis omitted where alternately any
        or all of the data are missing

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, or tuple/list thereof
            Pass tuple or list to drop on multiple axes
        how : {'any', 'all'}
            * any : if any NA values are present, drop that label
            * all : if all values are NA, drop that label
        thresh : int, default None
            int value : require that many non-NA values
        subset : array-like
            Labels along other axis to consider, e.g. if you are dropping rows
            these would be a list of columns to include
        inplace : boolean, defalt False
            If True, do operation inplace and return None.

        Returns
        -------
        dropped : DataFrame
        ")
                        (reparse-symbol indented_block_body) [105536 107852])
                    ("" code nil (reparse-symbol indented_block_body) [107873 107917])
                    ("drop_duplicates" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107942 107946])
                            ("subset" variable nil (reparse-symbol function_parameters) [107948 107954])
                            ("take_last" variable nil (reparse-symbol function_parameters) [107961 107970])
                            ("inplace" variable nil (reparse-symbol function_parameters) [107978 107985]))                          
                        :documentation "
        Return DataFrame with duplicate rows removed, optionally only
        considering certain columns

        Parameters
        ----------
        subset : column label or sequence of labels, optional
            Only consider certain columns for identifying duplicates, by
            default use all of the columns
        take_last : boolean, default False
            Take the last observed row in a row. Defaults to the first row
        inplace : boolean, default False
            Whether to drop duplicates in place or to return a copy
        cols : kwargs only argument of subset [deprecated]

        Returns
        -------
        deduplicated : DataFrame
        ")
                        (reparse-symbol indented_block_body) [107922 108963])
                    ("" code nil (reparse-symbol indented_block_body) [108984 109028])
                    ("duplicated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109048 109052])
                            ("subset" variable nil (reparse-symbol function_parameters) [109054 109060])
                            ("take_last" variable nil (reparse-symbol function_parameters) [109067 109076]))                          
                        :documentation "
        Return boolean Series denoting duplicate rows, optionally only
        considering certain columns

        Parameters
        ----------
        subset : column label or sequence of labels, optional
            Only consider certain columns for identifying duplicates, by
            default use all of the columns
        take_last : boolean, default False
            For a set of distinct duplicate rows, flag all but the last row as
            duplicated. Default is for all but the first row to be flagged
        cols : kwargs only argument of subset [deprecated]

        Returns
        -------
        duplicated : Series
        ")
                        (reparse-symbol indented_block_body) [109033 110621])
                    ("sort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110726 110730])
                            ("columns" variable nil (reparse-symbol function_parameters) [110732 110739])
                            ("axis" variable nil (reparse-symbol function_parameters) [110746 110750])
                            ("ascending" variable nil (reparse-symbol function_parameters) [110754 110763])
                            ("inplace" variable nil (reparse-symbol function_parameters) [110783 110790])
                            ("kind" variable nil (reparse-symbol function_parameters) [110798 110802])
                            ("na_position" variable nil (reparse-symbol function_parameters) [110816 110827]))                          
                        :documentation "
        Sort DataFrame either by labels (along either axis) or by the values in
        column(s)

        Parameters
        ----------
        columns : object
            Column name(s) in frame. Accepts a column name or a list
            for a nested sort. A tuple will be interpreted as the
            levels of a multi-index.
        ascending : boolean or list, default True
            Sort ascending vs. descending. Specify list for multiple sort
            orders
        axis : {0 or 'index', 1 or 'columns'}, default 0
            Sort index/rows versus columns
        inplace : boolean, default False
            Sort the DataFrame without creating a new instance
        kind : {'quicksort', 'mergesort', 'heapsort'}, optional
            This option is only applied when sorting on a single column or label.
        na_position : {'first', 'last'} (optional, default='last')
            'first' puts NaNs at the beginning
            'last' puts NaNs at the end

        Examples
        --------
        >>> result = df.sort(['A', 'B'], ascending=[1, 0])

        Returns
        -------
        sorted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [110717 112155])
                    ("sort_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112175 112179])
                            ("axis" variable nil (reparse-symbol function_parameters) [112181 112185])
                            ("by" variable nil (reparse-symbol function_parameters) [112189 112191])
                            ("ascending" variable nil (reparse-symbol function_parameters) [112198 112207])
                            ("inplace" variable nil (reparse-symbol function_parameters) [112214 112221])
                            ("kind" variable nil (reparse-symbol function_parameters) [112248 112252])
                            ("na_position" variable nil (reparse-symbol function_parameters) [112266 112277]))                          
                        :documentation "
        Sort DataFrame either by labels (along either axis) or by the values in
        a column

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            Sort index/rows versus columns
        by : object
            Column name(s) in frame. Accepts a column name or a list
            for a nested sort. A tuple will be interpreted as the
            levels of a multi-index.
        ascending : boolean or list, default True
            Sort ascending vs. descending. Specify list for multiple sort
            orders
        inplace : boolean, default False
            Sort the DataFrame without creating a new instance
        na_position : {'first', 'last'} (optional, default='last')
            'first' puts NaNs at the beginning
            'last' puts NaNs at the end
        kind : {'quicksort', 'mergesort', 'heapsort'}, optional
            This option is only applied when sorting on a single column or label.

        Examples
        --------
        >>> result = df.sort_index(by=['A', 'B'], ascending=[True, False])

        Returns
        -------
        sorted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [112160 116575])
                    ("sortlevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116594 116598])
                            ("level" variable nil (reparse-symbol function_parameters) [116600 116605])
                            ("axis" variable nil (reparse-symbol function_parameters) [116609 116613])
                            ("ascending" variable nil (reparse-symbol function_parameters) [116617 116626])
                            ("inplace" variable nil (reparse-symbol function_parameters) [116651 116658])
                            ("sort_remaining" variable nil (reparse-symbol function_parameters) [116666 116680]))                          
                        :documentation "
        Sort multilevel index by chosen axis and primary level. Data will be
        lexicographically sorted by the chosen level followed by the other
        levels (in order)

        Parameters
        ----------
        level : int
        axis : {0 or 'index', 1 or 'columns'}, default 0
        ascending : boolean, default True
        inplace : boolean, default False
            Sort the DataFrame without creating a new instance
        sort_remaining : boolean, default True
            Sort by the other levels too.

        Returns
        -------
        sorted : DataFrame
        ")
                        (reparse-symbol indented_block_body) [116580 118271])
                    ("swaplevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118290 118294])
                            ("i" variable nil (reparse-symbol function_parameters) [118296 118297])
                            ("j" variable nil (reparse-symbol function_parameters) [118299 118300])
                            ("axis" variable nil (reparse-symbol function_parameters) [118302 118306]))                          
                        :documentation "
        Swap levels i and j in a MultiIndex on a particular axis

        Parameters
        ----------
        i, j : int, string (can be mixed)
            Level of index to be swapped. Can pass level name as string.

        Returns
        -------
        swapped : type of caller (new object)
        ")
                        (reparse-symbol indented_block_body) [118276 118880])
                    ("reorder_levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118904 118908])
                            ("order" variable nil (reparse-symbol function_parameters) [118910 118915])
                            ("axis" variable nil (reparse-symbol function_parameters) [118917 118921]))                          
                        :documentation "
        Rearrange index levels using input order.
        May not drop or duplicate levels

        Parameters
        ----------
        order : list of int or list of str
            List representing new level order. Reference level by number
            (position) or by key (label).
        axis : int
            Where to reorder levels.

        Returns
        -------
        type of caller (new object)
        ")
                        (reparse-symbol indented_block_body) [118885 119809])
                    ("_combine_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119949 119953])
                            ("other" variable nil (reparse-symbol function_parameters) [119955 119960])
                            ("func" variable nil (reparse-symbol function_parameters) [119962 119966])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [119968 119978])
                            ("level" variable nil (reparse-symbol function_parameters) [119985 119990]))                          )
                        (reparse-symbol indented_block_body) [119930 121814])
                    ("_combine_series" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121839 121843])
                            ("other" variable nil (reparse-symbol function_parameters) [121845 121850])
                            ("func" variable nil (reparse-symbol function_parameters) [121852 121856])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [121858 121868])
                            ("axis" variable nil (reparse-symbol function_parameters) [121875 121879])
                            ("level" variable nil (reparse-symbol function_parameters) [121910 121915]))                          )
                        (reparse-symbol indented_block_body) [121819 122336])
                    ("_combine_series_infer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122367 122371])
                            ("other" variable nil (reparse-symbol function_parameters) [122373 122378])
                            ("func" variable nil (reparse-symbol function_parameters) [122380 122384])
                            ("level" variable nil (reparse-symbol function_parameters) [122386 122391])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [122398 122408]))                          )
                        (reparse-symbol indented_block_body) [122341 123366])
                    ("_combine_match_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123396 123400])
                            ("other" variable nil (reparse-symbol function_parameters) [123402 123407])
                            ("func" variable nil (reparse-symbol function_parameters) [123409 123413])
                            ("level" variable nil (reparse-symbol function_parameters) [123415 123420])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [123427 123437]))                          )
                        (reparse-symbol indented_block_body) [123371 123876])
                    ("_combine_match_columns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123908 123912])
                            ("other" variable nil (reparse-symbol function_parameters) [123914 123919])
                            ("func" variable nil (reparse-symbol function_parameters) [123921 123925])
                            ("level" variable nil (reparse-symbol function_parameters) [123927 123932])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [123939 123949]))                          )
                        (reparse-symbol indented_block_body) [123881 124348])
                    ("_combine_const" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124372 124376])
                            ("other" variable nil (reparse-symbol function_parameters) [124378 124383])
                            ("func" variable nil (reparse-symbol function_parameters) [124385 124389])
                            ("raise_on_error" variable nil (reparse-symbol function_parameters) [124391 124405]))                          )
                        (reparse-symbol indented_block_body) [124353 124594])
                    ("_compare_frame_evaluate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124627 124631])
                            ("other" variable nil (reparse-symbol function_parameters) [124633 124638])
                            ("func" variable nil (reparse-symbol function_parameters) [124640 124644])
                            ("str_rep" variable nil (reparse-symbol function_parameters) [124646 124653]))                          )
                        (reparse-symbol indented_block_body) [124599 125505])
                    ("_compare_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125529 125533])
                            ("other" variable nil (reparse-symbol function_parameters) [125535 125540])
                            ("func" variable nil (reparse-symbol function_parameters) [125542 125546])
                            ("str_rep" variable nil (reparse-symbol function_parameters) [125548 125555]))                          )
                        (reparse-symbol indented_block_body) [125510 125785])
                    ("_flex_compare_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125814 125818])
                            ("other" variable nil (reparse-symbol function_parameters) [125820 125825])
                            ("func" variable nil (reparse-symbol function_parameters) [125827 125831])
                            ("str_rep" variable nil (reparse-symbol function_parameters) [125833 125840])
                            ("level" variable nil (reparse-symbol function_parameters) [125842 125847]))                          )
                        (reparse-symbol indented_block_body) [125790 126036])
                    ("combine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [126053 126057])
                            ("other" variable nil (reparse-symbol function_parameters) [126059 126064])
                            ("func" variable nil (reparse-symbol function_parameters) [126066 126070])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [126072 126082])
                            ("overwrite" variable nil (reparse-symbol function_parameters) [126089 126098]))                          
                        :documentation "
        Add two DataFrame objects and do not propagate NaN values, so if for a
        (column, time) one frame is missing a value, it will default to the
        other frame's value (which might be NaN as well)

        Parameters
        ----------
        other : DataFrame
        func : function
        fill_value : scalar value
        overwrite : boolean, default True
            If True then overwrite values for common keys in the calling frame

        Returns
        -------
        result : DataFrame
        ")
                        (reparse-symbol indented_block_body) [126041 129198])
                    ("combine_first" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129221 129225])
                            ("other" variable nil (reparse-symbol function_parameters) [129227 129232]))                          
                        :documentation "
        Combine two DataFrame objects and default to non-null values in frame
        calling the method. Result index columns will be the union of the
        respective indexes and columns

        Parameters
        ----------
        other : DataFrame

        Examples
        --------
        a's values prioritized, use values from b to fill holes:

        >>> a.combine_first(b)


        Returns
        -------
        combined : DataFrame
        ")
                        (reparse-symbol indented_block_body) [129203 130297])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130313 130317])
                            ("other" variable nil (reparse-symbol function_parameters) [130319 130324])
                            ("join" variable nil (reparse-symbol function_parameters) [130326 130330])
                            ("overwrite" variable nil (reparse-symbol function_parameters) [130339 130348])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [130355 130366])
                            ("raise_conflict" variable nil (reparse-symbol function_parameters) [130388 130402]))                          
                        :documentation "
        Modify DataFrame in place using non-NA values from passed
        DataFrame. Aligns on indices

        Parameters
        ----------
        other : DataFrame, or object coercible into a DataFrame
        join : {'left'}, default 'left'
        overwrite : boolean, default True
            If True then overwrite values for common keys in the calling frame
        filter_func : callable(1d-array) -> 1d-array<boolean>, default None
            Can choose to replace values other than NA. Return True for values
            that should be updated
        raise_conflict : boolean
            If True, will raise an error if the DataFrame and other both
            contain data in the same place.
        ")
                        (reparse-symbol indented_block_body) [130302 132239])
                    ("first_valid_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132362 132366]))                          
                        :documentation "
        Return label for first non-NA/null value
        ")
                        (reparse-symbol indented_block_body) [132340 132490])
                    ("last_valid_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132516 132520]))                          
                        :documentation "
        Return label for last non-NA/null value
        ")
                        (reparse-symbol indented_block_body) [132495 132644])
                    ("pivot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132757 132761])
                            ("index" variable nil (reparse-symbol function_parameters) [132763 132768])
                            ("columns" variable nil (reparse-symbol function_parameters) [132775 132782])
                            ("values" variable nil (reparse-symbol function_parameters) [132789 132795]))                          
                        :documentation "
        Reshape data (produce a \"pivot\" table) based on column values. Uses
        unique values from index / columns to form axes and return either
        DataFrame or Panel, depending on whether you request a single value
        column (DataFrame) or all columns (Panel)

        Parameters
        ----------
        index : string or object
            Column name to use to make new frame's index
        columns : string or object
            Column name to use to make new frame's columns
        values : string or object, optional
            Column name to use for populating new frame's values

        Notes
        -----
        For finer-tuned control, see hierarchical indexing documentation along
        with the related stack/unstack methods

        Examples
        --------
        >>> df
            foo   bar  baz
        0   one   A    1.
        1   one   B    2.
        2   one   C    3.
        3   two   A    4.
        4   two   B    5.
        5   two   C    6.

        >>> df.pivot('foo', 'bar', 'baz')
             A   B   C
        one  1   2   3
        two  4   5   6

        >>> df.pivot('foo', 'bar')['baz']
             A   B   C
        one  1   2   3
        two  4   5   6

        Returns
        -------
        pivoted : DataFrame
            If no values column specified, will have hierarchically indexed
            columns
        ")
                        (reparse-symbol indented_block_body) [132747 134322])
                    ("stack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134337 134341])
                            ("level" variable nil (reparse-symbol function_parameters) [134343 134348])
                            ("dropna" variable nil (reparse-symbol function_parameters) [134353 134359]))                          
                        :documentation "
        Pivot a level of the (possibly hierarchical) column labels, returning a
        DataFrame (or Series in the case of an object with a single level of
        column labels) having a hierarchical index with a new inner-most level
        of row labels.
        The level involved will automatically get sorted.

        Parameters
        ----------
        level : int, string, or list of these, default last level
            Level(s) to stack, can pass level name
        dropna : boolean, default True
            Whether to drop rows in the resulting Frame/Series with no valid
            values

        Examples
        ----------
        >>> s
             a   b
        one  1.  2.
        two  3.  4.

        >>> s.stack()
        one a    1
            b    2
        two a    3
            b    4

        Returns
        -------
        stacked : DataFrame or Series
        ")
                        (reparse-symbol indented_block_body) [134327 135516])
                    ("unstack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135533 135537])
                            ("level" variable nil (reparse-symbol function_parameters) [135539 135544]))                          
                        :documentation "
        Pivot a level of the (necessarily hierarchical) index labels, returning
        a DataFrame having a new level of column labels whose inner-most level
        consists of the pivoted index labels. If the index is not a MultiIndex,
        the output will be a Series (the analogue of stack when the columns are
        not a MultiIndex).
        The level involved will automatically get sorted.

        Parameters
        ----------
        level : int, string, or list of these, default -1 (last level)
            Level(s) of index to unstack, can pass level name

        See also
        --------
        DataFrame.pivot : Pivot a table based on column values.
        DataFrame.stack : Pivot a level of the column labels (inverse operation
            from `unstack`).

        Examples
        --------
        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),
        ...                                    ('two', 'a'), ('two', 'b')])
        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)
        >>> s
        one  a   1
             b   2
        two  a   3
             b   4
        dtype: float64

        >>> s.unstack(level=-1)
             a   b
        one  1  2
        two  3  4

        >>> s.unstack(level=0)
           one  two
        a  1   3
        b  2   4

        >>> df = s.unstack(level=0)
        >>> df.unstack()
        one  a  1.
             b  3.
        two  a  2.
             b  4.

        Returns
        -------
        unstacked : DataFrame or Series
        ")
                        (reparse-symbol indented_block_body) [135521 137186])
                    ("diff" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137303 137307])
                            ("periods" variable nil (reparse-symbol function_parameters) [137309 137316])
                            ("axis" variable nil (reparse-symbol function_parameters) [137320 137324]))                          
                        :documentation "
        1st discrete difference of object

        Parameters
        ----------
        periods : int, default 1
            Periods to shift for forming difference
        axis : {0 or 'index', 1 or 'columns'}, default 0

        Returns
        -------
        diffed : DataFrame
        ")
                        (reparse-symbol indented_block_body) [137294 137792])
                    ("apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137911 137915])
                            ("func" variable nil (reparse-symbol function_parameters) [137917 137921])
                            ("axis" variable nil (reparse-symbol function_parameters) [137923 137927])
                            ("broadcast" variable nil (reparse-symbol function_parameters) [137931 137940])
                            ("raw" variable nil (reparse-symbol function_parameters) [137948 137951])
                            ("reduce" variable nil (reparse-symbol function_parameters) [137959 137965])
                            ("args" variable nil (reparse-symbol function_parameters) [137986 137990])
                            ("kwds" variable nil (reparse-symbol function_parameters) [137995 138001]))                          
                        :documentation "
        Applies function along input axis of DataFrame.

        Objects passed to functions are Series objects having index
        either the DataFrame's index (axis=0) or the columns (axis=1).
        Return type depends on whether passed function aggregates, or the
        reduce argument if the DataFrame is empty.

        Parameters
        ----------
        func : function
            Function to apply to each column/row
        axis : {0 or 'index', 1 or 'columns'}, default 0
            * 0 or 'index': apply function to each column
            * 1 or 'columns': apply function to each row
        broadcast : boolean, default False
            For aggregation functions, return object of same size with values
            propagated
        reduce : boolean or None, default None
            Try to apply reduction procedures. If the DataFrame is empty,
            apply will use reduce to determine whether the result should be a
            Series or a DataFrame. If reduce is None (the default), apply's
            return value will be guessed by calling func an empty Series (note:
            while guessing, exceptions raised by func will be ignored). If
            reduce is True a Series will always be returned, and if False a
            DataFrame will always be returned.
        raw : boolean, default False
            If False, convert each row or column into a Series. If raw=True the
            passed function will receive ndarray objects instead. If you are
            just applying a NumPy reduction function this will achieve much
            better performance
        args : tuple
            Positional arguments to pass to function in addition to the
            array/series
        Additional keyword arguments will be passed as keywords to the function

        Notes
        -----
        In the current implementation apply calls func twice on the
        first column/row to decide whether it can take a fast or slow
        code path. This can lead to unexpected behavior if func has
        side-effects, as they will take effect twice for the first
        column/row.

        Examples
        --------
        >>> df.apply(numpy.sqrt) # returns DataFrame
        >>> df.apply(numpy.sum, axis=0) # equiv to df.sum(0)
        >>> df.apply(numpy.sum, axis=1) # equiv to df.sum(1)

        See also
        --------
        DataFrame.applymap: For elementwise operations

        Returns
        -------
        applied : Series or DataFrame
        ")
                        (reparse-symbol indented_block_body) [137901 141634])
                    ("_apply_empty_result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141663 141667])
                            ("func" variable nil (reparse-symbol function_parameters) [141669 141673])
                            ("axis" variable nil (reparse-symbol function_parameters) [141675 141679])
                            ("reduce" variable nil (reparse-symbol function_parameters) [141681 141687])
                            ("args" variable nil (reparse-symbol function_parameters) [141689 141694])
                            ("kwds" variable nil (reparse-symbol function_parameters) [141696 141702]))                          )
                        (reparse-symbol indented_block_body) [141639 142078])
                    ("_apply_raw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142098 142102])
                            ("func" variable nil (reparse-symbol function_parameters) [142104 142108])
                            ("axis" variable nil (reparse-symbol function_parameters) [142110 142114]))                          )
                        (reparse-symbol indented_block_body) [142083 142532])
                    ("_apply_standard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142557 142561])
                            ("func" variable nil (reparse-symbol function_parameters) [142563 142567])
                            ("axis" variable nil (reparse-symbol function_parameters) [142569 142573])
                            ("ignore_failures" variable nil (reparse-symbol function_parameters) [142575 142590])
                            ("reduce" variable nil (reparse-symbol function_parameters) [142598 142604]))                          )
                        (reparse-symbol indented_block_body) [142537 145740])
                    ("_apply_broadcast" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145766 145770])
                            ("func" variable nil (reparse-symbol function_parameters) [145772 145776])
                            ("axis" variable nil (reparse-symbol function_parameters) [145778 145782]))                          )
                        (reparse-symbol indented_block_body) [145745 146377])
                    ("applymap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146395 146399])
                            ("func" variable nil (reparse-symbol function_parameters) [146401 146405]))                          
                        :documentation "
        Apply a function to a DataFrame that is intended to operate
        elementwise, i.e. like doing map(func, series) for each series in the
        DataFrame

        Parameters
        ----------
        func : function
            Python function, returns a single value from a single value

        Returns
        -------
        applied : DataFrame

        See also
        --------
        DataFrame.apply : For operations on rows/columns

        ")
                        (reparse-symbol indented_block_body) [146382 147207])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147332 147336])
                            ("other" variable nil (reparse-symbol function_parameters) [147338 147343])
                            ("ignore_index" variable nil (reparse-symbol function_parameters) [147345 147357])
                            ("verify_integrity" variable nil (reparse-symbol function_parameters) [147365 147381]))                          
                        :documentation "
        Append rows of `other` to the end of this frame, returning a new
        object. Columns not in this frame are added as new columns.

        Parameters
        ----------
        other : DataFrame or Series/dict-like object, or list of these
            The data to append.
        ignore_index : boolean, default False
            If True, do not use the index labels.
        verify_integrity : boolean, default False
            If True, raise ValueError on creating index with duplicates.

        Returns
        -------
        appended : DataFrame

        Notes
        -----
        If a list of dict/series is passed and the keys are all contained in the
        DataFrame's index, the order of the columns in the resulting DataFrame
        will be unchanged.

        See also
        --------
        pandas.concat : General function to concatenate DataFrame, Series
            or Panel objects

        Examples
        --------

        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))
        >>> df
           A  B
        0  1  2
        1  3  4
        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))
        >>> df.append(df2)
           A  B
        0  1  2
        1  3  4
        0  5  6
        1  7  8

        With `ignore_index` set to True:

        >>> df.append(df2, ignore_index=True)
           A  B
        0  1  2
        1  3  4
        2  5  6
        3  7  8

        ")
                        (reparse-symbol indented_block_body) [147321 150230])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150244 150248])
                            ("other" variable nil (reparse-symbol function_parameters) [150250 150255])
                            ("on" variable nil (reparse-symbol function_parameters) [150257 150259])
                            ("how" variable nil (reparse-symbol function_parameters) [150266 150269])
                            ("lsuffix" variable nil (reparse-symbol function_parameters) [150278 150285])
                            ("rsuffix" variable nil (reparse-symbol function_parameters) [150290 150297])
                            ("sort" variable nil (reparse-symbol function_parameters) [150315 150319]))                          
                        :documentation "
        Join columns with other DataFrame either on index or on a key
        column. Efficiently Join multiple DataFrame objects by index at once by
        passing a list.

        Parameters
        ----------
        other : DataFrame, Series with name field set, or list of DataFrame
            Index should be similar to one of the columns in this one. If a
            Series is passed, its name attribute must be set, and that will be
            used as the column name in the resulting joined DataFrame
        on : column name, tuple/list of column names, or array-like
            Column(s) to use for joining, otherwise join on index. If multiples
            columns given, the passed DataFrame must have a MultiIndex. Can
            pass an array as the join key if not already contained in the
            calling DataFrame. Like an Excel VLOOKUP operation
        how : {'left', 'right', 'outer', 'inner'}
            How to handle indexes of the two objects. Default: 'left'
            for joining on index, None otherwise

            * left: use calling frame's index
            * right: use input frame's index
            * outer: form union of indexes
            * inner: use intersection of indexes
        lsuffix : string
            Suffix to use from left frame's overlapping columns
        rsuffix : string
            Suffix to use from right frame's overlapping columns
        sort : boolean, default False
            Order result DataFrame lexicographically by the join key. If False,
            preserves the index order of the calling (left) DataFrame

        Notes
        -----
        on, lsuffix, and rsuffix options are not supported when passing a list
        of DataFrame objects

        Returns
        -------
        joined : DataFrame
        ")
                        (reparse-symbol indented_block_body) [150235 152318])
                    ("_join_compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152340 152344])
                            ("other" variable nil (reparse-symbol function_parameters) [152346 152351])
                            ("on" variable nil (reparse-symbol function_parameters) [152353 152355])
                            ("how" variable nil (reparse-symbol function_parameters) [152362 152365])
                            ("lsuffix" variable nil (reparse-symbol function_parameters) [152374 152381])
                            ("rsuffix" variable nil (reparse-symbol function_parameters) [152386 152393])
                            ("sort" variable nil (reparse-symbol function_parameters) [152419 152423]))                          )
                        (reparse-symbol indented_block_body) [152323 153773])
                    ("" code nil (reparse-symbol indented_block_body) [153791 153795])
                    ("" code nil (reparse-symbol indented_block_body) [153809 153832])
                    ("merge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153847 153851])
                            ("right" variable nil (reparse-symbol function_parameters) [153853 153858])
                            ("how" variable nil (reparse-symbol function_parameters) [153860 153863])
                            ("on" variable nil (reparse-symbol function_parameters) [153873 153875])
                            ("left_on" variable nil (reparse-symbol function_parameters) [153882 153889])
                            ("right_on" variable nil (reparse-symbol function_parameters) [153896 153904])
                            ("left_index" variable nil (reparse-symbol function_parameters) [153925 153935])
                            ("right_index" variable nil (reparse-symbol function_parameters) [153943 153954])
                            ("sort" variable nil (reparse-symbol function_parameters) [153962 153966])
                            ("suffixes" variable nil (reparse-symbol function_parameters) [153988 153996])
                            ("copy" variable nil (reparse-symbol function_parameters) [154011 154015]))                          )
                        (reparse-symbol indented_block_body) [153837 154306])
                    ("corr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154429 154433])
                            ("method" variable nil (reparse-symbol function_parameters) [154435 154441])
                            ("min_periods" variable nil (reparse-symbol function_parameters) [154453 154464]))                          
                        :documentation "
        Compute pairwise correlation of columns, excluding NA/null values

        Parameters
        ----------
        method : {'pearson', 'kendall', 'spearman'}
            * pearson : standard correlation coefficient
            * kendall : Kendall Tau correlation coefficient
            * spearman : Spearman rank correlation
        min_periods : int, optional
            Minimum number of observations required per pair of columns
            to have a valid result. Currently only available for pearson
            and spearman correlation

        Returns
        -------
        y : DataFrame
        ")
                        (reparse-symbol indented_block_body) [154420 156318])
                    ("cov" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156331 156335])
                            ("min_periods" variable nil (reparse-symbol function_parameters) [156337 156348]))                          
                        :documentation "
        Compute pairwise covariance of columns, excluding NA/null values

        Parameters
        ----------
        min_periods : int, optional
            Minimum number of observations required per pair of columns
            to have a valid result.

        Returns
        -------
        y : DataFrame

        Notes
        -----
        `y` contains the covariance matrix of the DataFrame's time series.
        The covariance is normalized by N-1 (unbiased estimator).
        ")
                        (reparse-symbol indented_block_body) [156323 157505])
                    ("corrwith" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [157523 157527])
                            ("other" variable nil (reparse-symbol function_parameters) [157529 157534])
                            ("axis" variable nil (reparse-symbol function_parameters) [157536 157540])
                            ("drop" variable nil (reparse-symbol function_parameters) [157544 157548]))                          
                        :documentation "
        Compute pairwise correlation between rows or columns of two DataFrame
        objects.

        Parameters
        ----------
        other : DataFrame
        axis : {0 or 'index', 1 or 'columns'}, default 0
            0 or 'index' to compute column-wise, 1 or 'columns' for row-wise
        drop : boolean, default False
            Drop missing indices from result, default returns union of all

        Returns
        -------
        correls : Series
        ")
                        (reparse-symbol indented_block_body) [157510 158937])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159062 159066])
                            ("axis" variable nil (reparse-symbol function_parameters) [159068 159072])
                            ("level" variable nil (reparse-symbol function_parameters) [159076 159081])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [159088 159100]))                          
                        :documentation "
        Return Series with number of non-NA/null observations over requested
        axis. Works with non-floating point data as well (detects NaN and None)

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            0 or 'index' for row-wise, 1 or 'columns' for column-wise
        level : int or level name, default None
            If the axis is a MultiIndex (hierarchical), count along a
            particular level, collapsing into a DataFrame
        numeric_only : boolean, default False
            Include only float, int, boolean data

        Returns
        -------
        count : Series (or DataFrame if level specified)
        ")
                        (reparse-symbol indented_block_body) [159052 160545])
                    ("_count_level" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160567 160571])
                            ("level" variable nil (reparse-symbol function_parameters) [160573 160578])
                            ("axis" variable nil (reparse-symbol function_parameters) [160580 160584])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [160588 160600]))                          )
                        (reparse-symbol indented_block_body) [160550 162010])
                    ("_reduce" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162027 162031])
                            ("op" variable nil (reparse-symbol function_parameters) [162033 162035])
                            ("name" variable nil (reparse-symbol function_parameters) [162037 162041])
                            ("axis" variable nil (reparse-symbol function_parameters) [162043 162047])
                            ("skipna" variable nil (reparse-symbol function_parameters) [162051 162057])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [162064 162076])
                            ("filter_type" variable nil (reparse-symbol function_parameters) [162099 162110])
                            ("kwds" variable nil (reparse-symbol function_parameters) [162117 162123]))                          )
                        (reparse-symbol indented_block_body) [162015 165020])
                    ("idxmin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165036 165040])
                            ("axis" variable nil (reparse-symbol function_parameters) [165042 165046])
                            ("skipna" variable nil (reparse-symbol function_parameters) [165050 165056]))                          
                        :documentation "
        Return index of first occurrence of minimum over requested axis.
        NA/null values are excluded.

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            0 or 'index' for row-wise, 1 or 'columns' for column-wise
        skipna : boolean, default True
            Exclude NA/null values. If an entire row/column is NA, the result
            will be NA

        Returns
        -------
        idxmin : Series

        Notes
        -----
        This method is the DataFrame version of ``ndarray.argmin``.

        See Also
        --------
        Series.idxmin
        ")
                        (reparse-symbol indented_block_body) [165025 165994])
                    ("idxmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166010 166014])
                            ("axis" variable nil (reparse-symbol function_parameters) [166016 166020])
                            ("skipna" variable nil (reparse-symbol function_parameters) [166024 166030]))                          
                        :documentation "
        Return index of first occurrence of maximum over requested axis.
        NA/null values are excluded.

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            0 or 'index' for row-wise, 1 or 'columns' for column-wise
        skipna : boolean, default True
            Exclude NA/null values. If an entire row/column is NA, the result
            will be first index.

        Returns
        -------
        idxmax : Series

        Notes
        -----
        This method is the DataFrame version of ``ndarray.argmax``.

        See Also
        --------
        Series.idxmax
        ")
                        (reparse-symbol indented_block_body) [165999 166978])
                    ("_get_agg_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167001 167005])
                            ("axis_num" variable nil (reparse-symbol function_parameters) [167007 167015]))                          
                        :documentation " let's be explict about this ")
                        (reparse-symbol indented_block_body) [166983 167264])
                    ("mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167278 167282])
                            ("axis" variable nil (reparse-symbol function_parameters) [167284 167288])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [167292 167304]))                          
                        :documentation "
        Gets the mode(s) of each element along the axis selected. Empty if nothing
        has 2+ occurrences. Adds a row for each mode per label, fills in gaps
        with nan.

        Note that there could be multiple values returned for the selected
        axis (when more than one item share the maximum frequency), which is the
        reason why a dataframe is returned. If you want to impute missing values
        with the mode in a dataframe ``df``, you can just do this:
        ``df.fillna(df.mode().iloc[0])``

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            * 0 or 'index' : get mode of each column
            * 1 or 'columns' : get mode of each row
        numeric_only : boolean, default False
            if True, only apply to numeric columns

        Returns
        -------
        modes : DataFrame (sorted)

        Examples
        --------
        >>> df = pd.DataFrame({'A': [1, 2, 1, 2, 1, 2, 3]})
        >>> df.mode()
           A
        0  1
        1  2
        ")
                        (reparse-symbol indented_block_body) [167269 168525])
                    ("quantile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [168543 168547])
                            ("q" variable nil (reparse-symbol function_parameters) [168549 168550])
                            ("axis" variable nil (reparse-symbol function_parameters) [168556 168560])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [168564 168576]))                          
                        :documentation "
        Return values at the given quantile over requested axis, a la
        numpy.percentile.

        Parameters
        ----------
        q : float or array-like, default 0.5 (50% quantile)
            0 <= q <= 1, the quantile(s) to compute
        axis : {0, 1, 'index', 'columns'} (default 0)
            0 or 'index' for row-wise, 1 or 'columns' for column-wise 


        Returns
        -------
        quantiles : Series or DataFrame
            If ``q`` is an array, a DataFrame will be returned where the
            index is ``q``, the columns are the columns of self, and the
            values are the quantiles.
            If ``q`` is a float, a Series will be returned where the
            index is the columns of self and the values are the quantiles.

        Examples
        --------

        >>> df = DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),
                          columns=['a', 'b'])
        >>> df.quantile(.1)
        a    1.3
        b    3.7
        dtype: float64
        >>> df.quantile([.1, .5])
               a     b
        0.1  1.3   3.7
        0.5  2.5  55.0
        ")
                        (reparse-symbol indented_block_body) [168530 171244])
                    ("rank" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171258 171262])
                            ("axis" variable nil (reparse-symbol function_parameters) [171264 171268])
                            ("numeric_only" variable nil (reparse-symbol function_parameters) [171272 171284])
                            ("method" variable nil (reparse-symbol function_parameters) [171291 171297])
                            ("na_option" variable nil (reparse-symbol function_parameters) [171322 171331])
                            ("ascending" variable nil (reparse-symbol function_parameters) [171340 171349])
                            ("pct" variable nil (reparse-symbol function_parameters) [171356 171359]))                          
                        :documentation "
        Compute numerical data ranks (1 through n) along axis. Equal values are
        assigned a rank that is the average of the ranks of those values

        Parameters
        ----------
        axis : {0 or 'index', 1 or 'columns'}, default 0
            Ranks over columns (0) or rows (1)
        numeric_only : boolean, default None
            Include only float, int, boolean data
        method : {'average', 'min', 'max', 'first', 'dense'}
            * average: average rank of group
            * min: lowest rank in group
            * max: highest rank in group
            * first: ranks assigned in order they appear in the array
            * dense: like 'min', but rank always increases by 1 between groups
        na_option : {'keep', 'top', 'bottom'}
            * keep: leave NA values where they are
            * top: smallest rank if ascending
            * bottom: smallest rank if descending
        ascending : boolean, default True
            False for ranks by high (1) to low (N)
        pct : boolean, default False
            Computes percentage rank of data

        Returns
        -------
        ranks : DataFrame
        ")
                        (reparse-symbol indented_block_body) [171249 173360])
                    ("to_timestamp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [173382 173386])
                            ("freq" variable nil (reparse-symbol function_parameters) [173388 173392])
                            ("how" variable nil (reparse-symbol function_parameters) [173399 173402])
                            ("axis" variable nil (reparse-symbol function_parameters) [173412 173416])
                            ("copy" variable nil (reparse-symbol function_parameters) [173420 173424]))                          
                        :documentation "
        Cast to DatetimeIndex of timestamps, at *beginning* of period

        Parameters
        ----------
        freq : string, default frequency of PeriodIndex
            Desired frequency
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end
        axis : {0 or 'index', 1 or 'columns'}, default 0
            The axis to convert (the index by default)
        copy : boolean, default True
            If false then underlying input data is not copied

        Returns
        -------
        df : DataFrame with DatetimeIndex
        ")
                        (reparse-symbol indented_block_body) [173365 174561])
                    ("to_period" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [174580 174584])
                            ("freq" variable nil (reparse-symbol function_parameters) [174586 174590])
                            ("axis" variable nil (reparse-symbol function_parameters) [174597 174601])
                            ("copy" variable nil (reparse-symbol function_parameters) [174605 174609]))                          
                        :documentation "
        Convert DataFrame from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed)

        Parameters
        ----------
        freq : string, default
        axis : {0 or 'index', 1 or 'columns'}, default 0
            The axis to convert (the index by default)
        copy : boolean, default True
            If False then underlying input data is not copied

        Returns
        -------
        ts : TimeSeries with PeriodIndex
        ")
                        (reparse-symbol indented_block_body) [174566 175587])
                    ("isin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [175601 175605])
                            ("values" variable nil (reparse-symbol function_parameters) [175607 175613]))                          
                        :documentation "
        Return boolean DataFrame showing whether each element in the
        DataFrame is contained in values.

        Parameters
        ----------
        values : iterable, Series, DataFrame or dictionary
            The result will only be true at a location if all the
            labels match. If `values` is a Series, that's the index. If
            `values` is a dictionary, the keys must be the column names,
            which must match. If `values` is a DataFrame,
            then both the index and column labels must match.

        Returns
        -------

        DataFrame of booleans

        Examples
        --------
        When ``values`` is a list:

        >>> df = DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})
        >>> df.isin([1, 3, 12, 'a'])
               A      B
        0   True   True
        1  False  False
        2   True  False

        When ``values`` is a dict:

        >>> df = DataFrame({'A': [1, 2, 3], 'B': [1, 4, 7]})
        >>> df.isin({'A': [1, 3], 'B': [4, 7, 12]})
               A      B
        0   True  False  # Note that B didn't match the 1 here.
        1  False   True
        2   True   True

        When ``values`` is a Series or DataFrame:

        >>> df = DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})
        >>> other = DataFrame({'A': [1, 3, 3, 2], 'B': ['e', 'f', 'f', 'e']})
        >>> df.isin(other)
               A      B
        0   True  False
        1  False  False  # Column A in `other` has a 3, but not at index 1.
        2   True   True
        ")
                        (reparse-symbol indented_block_body) [175592 178620])
                    ("combineAdd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [178740 178744])
                            ("other" variable nil (reparse-symbol function_parameters) [178746 178751]))                          
                        :documentation "
        Add two DataFrame objects and do not propagate
        NaN values, so if for a (column, time) one frame is missing a
        value, it will default to the other frame's value (which might
        be NaN as well)

        Parameters
        ----------
        other : DataFrame

        Returns
        -------
        DataFrame
        ")
                        (reparse-symbol indented_block_body) [178725 179160])
                    ("combineMult" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [179181 179185])
                            ("other" variable nil (reparse-symbol function_parameters) [179187 179192]))                          
                        :documentation "
        Multiply two DataFrame objects and do not propagate NaN values, so if
        for a (column, time) one frame is missing a value, it will default to
        the other frame's value (which might be NaN as well)

        Parameters
        ----------
        other : DataFrame

        Returns
        -------
        DataFrame
        ")
                        (reparse-symbol indented_block_body) [179165 179598]))                  
                :type "class")
                nil [5363 179598])
            ("DataFrame" code nil nil [179600 179736])
            ("DataFrame" code nil nil [179737 179772])
            ("_EMPTY_SERIES" variable nil nil [179774 179800])
            ("_arrays_to_mgr" function
               (:documentation "
    Segregate Series based on type and coerce into matrices.
    Needs to handle a lot of exceptional cases.
    "
                :arguments 
                  ( ("arrays" variable nil (reparse-symbol function_parameters) [179821 179827])
                    ("arr_names" variable nil (reparse-symbol function_parameters) [179829 179838])
                    ("index" variable nil (reparse-symbol function_parameters) [179840 179845])
                    ("columns" variable nil (reparse-symbol function_parameters) [179847 179854])
                    ("dtype" variable nil (reparse-symbol function_parameters) [179856 179861]))                  )
                nil [179802 180422])
            ("extract_index" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [180442 180446]))              ) nil [180424 182055])
            ("_prep_ndarray" function (:arguments 
              ( ("values" variable nil (reparse-symbol function_parameters) [182075 182081])
                ("copy" variable nil (reparse-symbol function_parameters) [182083 182087]))              ) nil [182057 183055])
            ("_to_arrays" function
               (:documentation "
    Return list of arrays, columns
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [183072 183076])
                    ("columns" variable nil (reparse-symbol function_parameters) [183078 183085])
                    ("coerce_float" variable nil (reparse-symbol function_parameters) [183087 183099])
                    ("dtype" variable nil (reparse-symbol function_parameters) [183107 183112]))                  )
                nil [183057 184952])
            ("_masked_rec_array_to_mgr" function
               (:documentation " extract from a masked rec array and create the manager "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [184983 184987])
                    ("index" variable nil (reparse-symbol function_parameters) [184989 184994])
                    ("columns" variable nil (reparse-symbol function_parameters) [184996 185003])
                    ("dtype" variable nil (reparse-symbol function_parameters) [185005 185010])
                    ("copy" variable nil (reparse-symbol function_parameters) [185012 185016]))                  )
                nil [184954 186065])
            ("_reorder_arrays" function (:arguments 
              ( ("arrays" variable nil (reparse-symbol function_parameters) [186087 186093])
                ("arr_columns" variable nil (reparse-symbol function_parameters) [186095 186106])
                ("columns" variable nil (reparse-symbol function_parameters) [186108 186115]))              ) nil [186067 186505])
            ("_list_to_arrays" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [186527 186531])
                ("columns" variable nil (reparse-symbol function_parameters) [186533 186540])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [186542 186554])
                ("dtype" variable nil (reparse-symbol function_parameters) [186562 186567]))              ) nil [186507 186897])
            ("_list_of_series_to_arrays" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [186929 186933])
                ("columns" variable nil (reparse-symbol function_parameters) [186935 186942])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [186944 186956])
                ("dtype" variable nil (reparse-symbol function_parameters) [186964 186969]))              ) nil [186899 187923])
            ("_list_of_dict_to_arrays" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [187953 187957])
                ("columns" variable nil (reparse-symbol function_parameters) [187959 187966])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [187968 187980])
                ("dtype" variable nil (reparse-symbol function_parameters) [187988 187993]))              ) nil [187925 188460])
            ("_convert_object_array" function (:arguments 
              ( ("content" variable nil (reparse-symbol function_parameters) [188488 188495])
                ("columns" variable nil (reparse-symbol function_parameters) [188497 188504])
                ("coerce_float" variable nil (reparse-symbol function_parameters) [188506 188518])
                ("dtype" variable nil (reparse-symbol function_parameters) [188526 188531]))              ) nil [188462 189241])
            ("_get_names_from_index" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [189269 189273]))              ) nil [189243 189666])
            ("_homogenize" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [189684 189688])
                ("index" variable nil (reparse-symbol function_parameters) [189690 189695])
                ("dtype" variable nil (reparse-symbol function_parameters) [189697 189702]))              ) nil [189668 190509])
            ("_from_nested_dict" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [190533 190537]))              ) nil [190511 190822])
            ("_put_str" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [190837 190838])
                ("space" variable nil (reparse-symbol function_parameters) [190840 190845]))              ) nil [190824 190891])
            ("pandas.tools.plotting" include nil nil [191002 191037])
            ("DataFrame" variable nil nil [191039 191070])
            ("DataFrame" variable nil nil [191071 191102])
            ("" code nil nil [191114 191160])
            ("boxplot" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [191173 191177])
                    ("column" variable nil (reparse-symbol function_parameters) [191179 191185])
                    ("by" variable nil (reparse-symbol function_parameters) [191192 191194])
                    ("ax" variable nil (reparse-symbol function_parameters) [191201 191203])
                    ("fontsize" variable nil (reparse-symbol function_parameters) [191210 191218])
                    ("rot" variable nil (reparse-symbol function_parameters) [191237 191240])
                    ("grid" variable nil (reparse-symbol function_parameters) [191244 191248])
                    ("figsize" variable nil (reparse-symbol function_parameters) [191255 191262])
                    ("layout" variable nil (reparse-symbol function_parameters) [191269 191275])
                    ("return_type" variable nil (reparse-symbol function_parameters) [191282 191293])
                    ("kwds" variable nil (reparse-symbol function_parameters) [191312 191318]))                  )
                nil [191161 191674])
            ("DataFrame" variable nil nil [191675 191702])
            ("ops" code nil nil [191704 191770])
            ("ops" code nil nil [191771 191843])
            ("if" code nil nil [191845 191995]))          
      :file "frame.py"
      :pointmax 191995
      :fsize 191994
      :lastmodtime '(21949 21283 986394 994000)
      :unmatched-syntax nil)
    (semanticdb-table "generic.py"
      :major-mode 'python-mode
      :tags 
        '( ("warnings" include nil nil [31 46])
            ("operator" include nil nil [47 62])
            ("weakref" include nil nil [63 77])
            ("gc" include nil nil [78 87])
            ("numpy" include nil nil [88 106])
            ("pandas.lib" include nil nil [107 131])
            ("pandas" include nil nil [133 152])
            ("pandas.core.base" include nil nil [153 194])
            ("" code nil nil [225 309])
            ("pandas.core.indexing" include nil nil [310 349])
            ("pandas.tseries.index" include nil nil [350 396])
            ("pandas.tseries.period" include nil nil [397 442])
            ("pandas.core.internals" include nil nil [443 489])
            ("pandas.core.common" include nil nil [490 522])
            ("pandas.core.datetools" include nil nil [523 564])
            ("pandas" include nil nil [565 590])
            ("pandas.compat" include nil nil [591 661])
            ("" code nil nil [693 992])
            ("pandas.core.nanops" include nil nil [993 1028])
            ("pandas.util.decorators" include nil nil [1029 1103])
            ("pandas.core" include nil nil [1104 1134])
            ("_shared_docs" variable nil nil [1229 1250])
            ("_shared_doc_kwargs" variable nil nil [1251 1545])
            ("is_dictlike" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1564 1565]))              ) nil [1548 1616])
            ("_single_replace" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1638 1642])
                    ("to_replace" variable nil (reparse-symbol function_parameters) [1644 1654])
                    ("method" variable nil (reparse-symbol function_parameters) [1656 1662])
                    ("inplace" variable nil (reparse-symbol function_parameters) [1664 1671])
                    ("limit" variable nil (reparse-symbol function_parameters) [1673 1678]))                  )
                nil [1618 2345])
            ("NDFrame" type
               (:documentation "
    N-dimensional analogue of DataFrame. Store multi-dimensional in a
    size-mutable, labeled data structure

    Parameters
    ----------
    data : BlockManager
    axes : list
    copy : boolean, default False
    "
                :superclasses ("PandasObject")
                :members 
                  ( ("_internal_names" variable nil (reparse-symbol indented_block_body) [2613 2859])
                    ("_internal_names_set" variable nil (reparse-symbol indented_block_body) [2864 2906])
                    ("_accessors" variable nil (reparse-symbol indented_block_body) [2911 2937])
                    ("_metadata" variable nil (reparse-symbol indented_block_body) [2942 2956])
                    ("is_copy" variable nil (reparse-symbol indented_block_body) [2961 2975])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [3084 3372])
                            ("object" code nil (reparse-symbol indented_block_body) [3381 3422])
                            ("object" code nil (reparse-symbol indented_block_body) [3431 3470])
                            ("object" code nil (reparse-symbol indented_block_body) [3479 3522]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2994 2998])
                            ("data" variable nil (reparse-symbol function_parameters) [3000 3004])
                            ("axes" variable nil (reparse-symbol function_parameters) [3006 3010])
                            ("copy" variable nil (reparse-symbol function_parameters) [3017 3021])
                            ("dtype" variable nil (reparse-symbol function_parameters) [3029 3034])
                            ("fastpath" variable nil (reparse-symbol function_parameters) [3058 3066]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2981 3523])
                    ("_validate_dtype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3548 3552])
                            ("dtype" variable nil (reparse-symbol function_parameters) [3554 3559]))                          
                        :documentation " validate the passed dtype ")
                        (reparse-symbol indented_block_body) [3528 3993])
                    ("_init_mgr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4012 4016])
                            ("mgr" variable nil (reparse-symbol function_parameters) [4018 4021])
                            ("axes" variable nil (reparse-symbol function_parameters) [4023 4027])
                            ("dtype" variable nil (reparse-symbol function_parameters) [4034 4039])
                            ("copy" variable nil (reparse-symbol function_parameters) [4046 4050]))                          
                        :documentation " passed a manager and a axes dict ")
                        (reparse-symbol indented_block_body) [3998 4599])
                    ("_constructor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4731 4735]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4700 4778])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4799 4803]))                          )
                        (reparse-symbol indented_block_body) [4783 5058])
                    ("_dir_additions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5082 5086]))                          
                        :documentation " add the string-like attributes from the info_axis ")
                        (reparse-symbol indented_block_body) [5063 5271])
                    ("_constructor_sliced" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5314 5318]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5276 5361])
                    ("_constructor_expanddim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5407 5411]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5366 5448])
                    ("_setup_axes" function
                       (:documentation " provide axes setup for the major PandasObjects

            axes : the names of the axes in order (lowest to highest)
            info_axis_num : the axis of the selector dimension (int)
            stat_axis_num : the number of axis for the default stats (int)
            aliases : other names for a single axis (dict)
            slicers : how axes slice to others (dict)
            axes_are_reversed : boolean whether to treat passed axes as
                reversed (DataFrame)
            build_axes : setup the axis properties (default True)
            "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5583 5586])
                            ("axes" variable nil (reparse-symbol function_parameters) [5588 5592])
                            ("info_axis" variable nil (reparse-symbol function_parameters) [5594 5603])
                            ("stat_axis" variable nil (reparse-symbol function_parameters) [5610 5619])
                            ("aliases" variable nil (reparse-symbol function_parameters) [5626 5633])
                            ("slicers" variable nil (reparse-symbol function_parameters) [5640 5647])
                            ("axes_are_reversed" variable nil (reparse-symbol function_parameters) [5666 5683])
                            ("build_axes" variable nil (reparse-symbol function_parameters) [5691 5701])
                            ("ns" variable nil (reparse-symbol function_parameters) [5708 5710]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5541 7698])
                    ("_construct_axes_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7728 7732])
                            ("axes" variable nil (reparse-symbol function_parameters) [7734 7738])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7745 7753]))                          
                        :documentation " return an axes dictionary for myself ")
                        (reparse-symbol indented_block_body) [7703 7931])
                    ("_construct_axes_dict_from" function
                       (:typemodifiers ("static")
                        :documentation " return an axes dictionary for the passed axes "
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7984 7988])
                            ("axes" variable nil (reparse-symbol function_parameters) [7990 7994])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7996 8004]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :parent "dummy")
                        (reparse-symbol indented_block_body) [7936 8181])
                    ("_construct_axes_dict_for_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8221 8225])
                            ("axes" variable nil (reparse-symbol function_parameters) [8227 8231])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8238 8246]))                          
                        :documentation " return an axes dictionary for myself ")
                        (reparse-symbol indented_block_body) [8186 8462])
                    ("_construct_axes_from_arguments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8502 8506])
                            ("args" variable nil (reparse-symbol function_parameters) [8508 8512])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8514 8520])
                            ("require_all" variable nil (reparse-symbol function_parameters) [8522 8533]))                          
                        :documentation " construct and returns axes if supplied in args/kwargs
            if require_all, raise if all axis arguments are not supplied
            return a tuple of (axes, kwargs) ")
                        (reparse-symbol indented_block_body) [8467 9786])
                    ("_from_axes" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9823 9826])
                            ("data" variable nil (reparse-symbol function_parameters) [9828 9832])
                            ("axes" variable nil (reparse-symbol function_parameters) [9834 9838])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9840 9848]))                          )
                        (reparse-symbol indented_block_body) [9791 10193])
                    ("_get_axis_number" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10219 10223])
                            ("axis" variable nil (reparse-symbol function_parameters) [10225 10229]))                          )
                        (reparse-symbol indented_block_body) [10198 10621])
                    ("_get_axis_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10645 10649])
                            ("axis" variable nil (reparse-symbol function_parameters) [10651 10655]))                          )
                        (reparse-symbol indented_block_body) [10626 11057])
                    ("_get_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11076 11080])
                            ("axis" variable nil (reparse-symbol function_parameters) [11082 11086]))                          )
                        (reparse-symbol indented_block_body) [11062 11165])
                    ("_get_block_manager_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11198 11202])
                            ("axis" variable nil (reparse-symbol function_parameters) [11204 11208]))                          
                        :documentation " map the axis to the block_manager axis ")
                        (reparse-symbol indented_block_body) [11170 11424])
                    ("_get_axis_resolvers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11453 11457])
                            ("axis" variable nil (reparse-symbol function_parameters) [11459 11463]))                          )
                        (reparse-symbol indented_block_body) [11429 12380])
                    ("_get_index_resolvers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12410 12414]))                          )
                        (reparse-symbol indented_block_body) [12385 12551])
                    ("_info_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12585 12589]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12556 12643])
                    ("_stat_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12677 12681]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12648 12735])
                    ("shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12764 12768]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12740 12878])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12906 12910]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12883 13125])
                    ("ndim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13153 13157]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13130 13235])
                    ("size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13263 13267]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13240 13349])
                    ("_expand_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13371 13375])
                            ("key" variable nil (reparse-symbol function_parameters) [13377 13380]))                          )
                        (reparse-symbol indented_block_body) [13354 13694])
                    ("set_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13712 13716])
                            ("axis" variable nil (reparse-symbol function_parameters) [13718 13722])
                            ("labels" variable nil (reparse-symbol function_parameters) [13724 13730]))                          
                        :documentation " public verson of axis assignment ")
                        (reparse-symbol indented_block_body) [13699 13837])
                    ("_set_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13856 13860])
                            ("axis" variable nil (reparse-symbol function_parameters) [13862 13866])
                            ("labels" variable nil (reparse-symbol function_parameters) [13868 13874]))                          )
                        (reparse-symbol indented_block_body) [13842 13952])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [13957 14436])
                    ("" code nil (reparse-symbol indented_block_body) [14451 14499])
                    ("transpose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14518 14522])
                            ("args" variable nil (reparse-symbol function_parameters) [14524 14529])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [14531 14539]))                          )
                        (reparse-symbol indented_block_body) [14504 15573])
                    ("swapaxes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15591 15595])
                            ("axis1" variable nil (reparse-symbol function_parameters) [15597 15602])
                            ("axis2" variable nil (reparse-symbol function_parameters) [15604 15609])
                            ("copy" variable nil (reparse-symbol function_parameters) [15611 15615]))                          
                        :documentation "
        Interchange axes and swap values axes appropriately

        Returns
        -------
        y : same as input
        ")
                        (reparse-symbol indented_block_body) [15578 16271])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16284 16288])
                            ("item" variable nil (reparse-symbol function_parameters) [16290 16294]))                          
                        :documentation "
        Return item and drop from frame. Raise KeyError if not found.
        ")
                        (reparse-symbol indented_block_body) [16276 16464])
                    ("squeeze" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16481 16485]))                          
                        :documentation " squeeze length 1 dimensions ")
                        (reparse-symbol indented_block_body) [16469 16711])
                    ("swaplevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16730 16734])
                            ("i" variable nil (reparse-symbol function_parameters) [16736 16737])
                            ("j" variable nil (reparse-symbol function_parameters) [16739 16740])
                            ("axis" variable nil (reparse-symbol function_parameters) [16742 16746]))                          
                        :documentation "
        Swap levels i and j in a MultiIndex on a particular axis

        Parameters
        ----------
        i, j : int, string (can be mixed)
            Level of index to be swapped. Can pass level name as string.

        Returns
        -------
        swapped : type of caller (new object)
        ")
                        (reparse-symbol indented_block_body) [16716 17268])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [17483 18130])
                    ("" code nil (reparse-symbol indented_block_body) [18145 18278])
                    ("rename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18294 18298])
                            ("args" variable nil (reparse-symbol function_parameters) [18300 18305])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18307 18315]))                          )
                        (reparse-symbol indented_block_body) [18283 19764])
                    ("rename" variable nil (reparse-symbol indented_block_body) [19769 19808])
                    ("rename_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19830 19834])
                            ("mapper" variable nil (reparse-symbol function_parameters) [19836 19842])
                            ("axis" variable nil (reparse-symbol function_parameters) [19844 19848])
                            ("copy" variable nil (reparse-symbol function_parameters) [19852 19856])
                            ("inplace" variable nil (reparse-symbol function_parameters) [19863 19870]))                          
                        :documentation "
        Alter index and / or columns using input function or functions.
        Function / dict values must be unique (1-to-1). Labels not contained in
        a dict / Series will be left as-is.

        Parameters
        ----------
        mapper : dict-like or function, optional
        axis : int or string, default 0
        copy : boolean, default True
            Also copy underlying data
        inplace : boolean, default False

        Returns
        -------
        renamed : type of caller
        ")
                        (reparse-symbol indented_block_body) [19814 20554])
                    ("_indexed_same" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20672 20676])
                            ("other" variable nil (reparse-symbol function_parameters) [20678 20683]))                          )
                        (reparse-symbol indented_block_body) [20654 20800])
                    ("__neg__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20817 20821]))                          )
                        (reparse-symbol indented_block_body) [20805 21036])
                    ("__invert__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21056 21060]))                          )
                        (reparse-symbol indented_block_body) [21041 21317])
                    ("equals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21333 21337])
                            ("other" variable nil (reparse-symbol function_parameters) [21339 21344]))                          
                        :documentation "
        Determines if two NDFrame objects contain the same elements. NaNs in the
        same location are considered equal.
        ")
                        (reparse-symbol indented_block_body) [21322 21620])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21731 21735]))                          )
                        (reparse-symbol indented_block_body) [21718 21878])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21896 21900]))                          
                        :documentation "
        Iterate over infor axis
        ")
                        (reparse-symbol indented_block_body) [21883 21996])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22057 22061]))                          
                        :documentation "Get the 'info axis' (see Indexing for more)

        This is index for Series, columns for DataFrame and major_axis for
        Panel.")
                        (reparse-symbol indented_block_body) [22048 22244])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22263 22267]))                          
                        :documentation "Iterate over (label, values) on info axis

        This is index for Series, columns for DataFrame, major_axis for Panel,
        and so on.
        ")
                        (reparse-symbol indented_block_body) [22249 22497])
                    ("iterkv" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22711 22715])
                            ("args" variable nil (reparse-symbol function_parameters) [22717 22722])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [22724 22732]))                          )
                        (reparse-symbol indented_block_body) [22700 23025])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23042 23046]))                          
                        :documentation "Returns length of info axis ")
                        (reparse-symbol indented_block_body) [23030 23128])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23150 23154])
                            ("key" variable nil (reparse-symbol function_parameters) [23156 23159]))                          
                        :documentation "True if the key is in the info axis ")
                        (reparse-symbol indented_block_body) [23133 23251])
                    ("empty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23280 23284]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23256 23420])
                    ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23441 23445]))                          )
                        (reparse-symbol indented_block_body) [23425 23654])
                    ("__bool__" variable nil (reparse-symbol indented_block_body) [23659 23681])
                    ("bool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23696 23700]))                          
                        :documentation " Return the bool of a single element PandasObject
            This must be a boolean scalar value, either True or False

            Raise a ValueError if the PandasObject does not have exactly
            1 element, or that element is not boolean ")
                        (reparse-symbol indented_block_body) [23687 24269])
                    ("__abs__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24286 24290]))                          )
                        (reparse-symbol indented_block_body) [24274 24319])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24437 24441])
                            ("dtype" variable nil (reparse-symbol function_parameters) [24443 24448]))                          )
                        (reparse-symbol indented_block_body) [24423 24497])
                    ("__array_wrap__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24521 24525])
                            ("result" variable nil (reparse-symbol function_parameters) [24527 24533])
                            ("context" variable nil (reparse-symbol function_parameters) [24535 24542]))                          )
                        (reparse-symbol indented_block_body) [24502 24684])
                    ("to_dense" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25000 25004]))                          )
                        (reparse-symbol indented_block_body) [24987 25116])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25234 25238]))                          )
                        (reparse-symbol indented_block_body) [25217 25267])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25289 25293])
                            ("state" variable nil (reparse-symbol function_parameters) [25295 25300]))                          )
                        (reparse-symbol indented_block_body) [25272 26632])
                    ("to_json" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26830 26834])
                            ("path_or_buf" variable nil (reparse-symbol function_parameters) [26836 26847])
                            ("orient" variable nil (reparse-symbol function_parameters) [26854 26860])
                            ("date_format" variable nil (reparse-symbol function_parameters) [26867 26878])
                            ("double_precision" variable nil (reparse-symbol function_parameters) [26904 26920])
                            ("force_ascii" variable nil (reparse-symbol function_parameters) [26925 26936])
                            ("date_unit" variable nil (reparse-symbol function_parameters) [26943 26952])
                            ("default_handler" variable nil (reparse-symbol function_parameters) [26975 26990]))                          
                        :documentation "
        Convert the object to a JSON string.

        Note NaN's and None will be converted to null and datetime objects
        will be converted to UNIX timestamps.

        Parameters
        ----------
        path_or_buf : the path or buffer to write the result string
            if this is None, return a StringIO of the converted string
        orient : string

            * Series

              - default is 'index'
              - allowed values are: {'split','records','index'}

            * DataFrame

              - default is 'columns'
              - allowed values are:
                {'split','records','index','columns','values'}

            * The format of the JSON string

              - split : dict like
                {index -> [index], columns -> [columns], data -> [values]}
              - records : list like
                [{column -> value}, ... , {column -> value}]
              - index : dict like {index -> {column -> value}}
              - columns : dict like {column -> {index -> value}}
              - values : just the values array

        date_format : {'epoch', 'iso'}
            Type of date conversion. `epoch` = epoch milliseconds,
            `iso`` = ISO8601, default is epoch.
        double_precision : The number of decimal places to use when encoding
            floating point values, default 10.
        force_ascii : force encoded string to be ASCII, default True.
        date_unit : string, default 'ms' (milliseconds)
            The time unit to encode to, governs timestamp and ISO8601
            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,
            microsecond, and nanosecond respectively.
        default_handler : callable, default None
            Handler to call if object cannot otherwise be converted to a
            suitable format for JSON. Should receive a single argument which is
            the object to convert and return a serialisable object.

        Returns
        -------
        same type as input object with filtered info axis

        ")
                        (reparse-symbol indented_block_body) [26818 29409])
                    ("to_hdf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29425 29429])
                            ("path_or_buf" variable nil (reparse-symbol function_parameters) [29431 29442])
                            ("key" variable nil (reparse-symbol function_parameters) [29444 29447])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29449 29457]))                          
                        :documentation " activate the HDFStore

        Parameters
        ----------
        path_or_buf : the path (string) or buffer to put the store
        key : string
            indentifier for the group in the store
        mode : optional, {'a', 'w', 'r', 'r+'}, default 'a'

          ``'r'``
              Read-only; no data can be modified.
          ``'w'``
              Write; a new file is created (an existing file with the same
              name would be deleted).
          ``'a'``
              Append; an existing file is opened for reading and writing,
              and if the file does not exist it is created.
          ``'r+'``
              It is similar to ``'a'``, but the file must already exist.
        format   : 'fixed(f)|table(t)', default is 'fixed'
            fixed(f) : Fixed format
                       Fast writing/reading. Not-appendable, nor searchable
            table(t) : Table format
                       Write as a PyTables Table structure which may perform
                       worse but allow more flexible operations like searching
                       / selecting subsets of the data
        append   : boolean, default False
            For Table formats, append the input data to the existing
        complevel : int, 1-9, default 0
            If a complib is specified compression will be applied
            where possible
        complib : {'zlib', 'bzip2', 'lzo', 'blosc', None}, default None
            If complevel is > 0 apply compression to objects written
            in the store wherever possible
        fletcher32 : bool, default False
            If applying compression use the fletcher32 checksum

        ")
                        (reparse-symbol indented_block_body) [29414 31245])
                    ("to_msgpack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31265 31269])
                            ("path_or_buf" variable nil (reparse-symbol function_parameters) [31271 31282])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31289 31297]))                          
                        :documentation "
        msgpack (serialize) object to input file path

        THIS IS AN EXPERIMENTAL LIBRARY and the storage format
        may not be stable until a future release.

        Parameters
        ----------
        path : string File path, buffer-like, or None
            if None, return generated string
        append : boolean whether to append to an existing msgpack
            (default is False)
        compress : type of compressor (zlib or blosc), default to None (no
            compression)
        ")
                        (reparse-symbol indented_block_body) [31250 31929])
                    ("to_sql" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31945 31949])
                            ("name" variable nil (reparse-symbol function_parameters) [31951 31955])
                            ("con" variable nil (reparse-symbol function_parameters) [31957 31960])
                            ("flavor" variable nil (reparse-symbol function_parameters) [31962 31968])
                            ("schema" variable nil (reparse-symbol function_parameters) [31979 31985])
                            ("if_exists" variable nil (reparse-symbol function_parameters) [31992 32001])
                            ("index" variable nil (reparse-symbol function_parameters) [32025 32030])
                            ("index_label" variable nil (reparse-symbol function_parameters) [32037 32048])
                            ("chunksize" variable nil (reparse-symbol function_parameters) [32055 32064])
                            ("dtype" variable nil (reparse-symbol function_parameters) [32071 32076]))                          
                        :documentation "
        Write records stored in a DataFrame to a SQL database.

        Parameters
        ----------
        name : string
            Name of SQL table
        con : SQLAlchemy engine or DBAPI2 connection (legacy mode)
            Using SQLAlchemy makes it possible to use any DB supported by that
            library.
            If a DBAPI2 object, only sqlite3 is supported.
        flavor : {'sqlite', 'mysql'}, default 'sqlite'
            The flavor of SQL to use. Ignored when using SQLAlchemy engine.
            'mysql' is deprecated and will be removed in future versions, but it
            will be further supported through SQLAlchemy engines.
        schema : string, default None
            Specify the schema (if database flavor supports this). If None, use
            default schema.
        if_exists : {'fail', 'replace', 'append'}, default 'fail'
            - fail: If table exists, do nothing.
            - replace: If table exists, drop it, recreate it, and insert data.
            - append: If table exists, insert data. Create if does not exist.
        index : boolean, default True
            Write DataFrame index as a column.
        index_label : string or sequence, default None
            Column label for index column(s). If None is given (default) and
            `index` is True, then the index names are used.
            A sequence should be given if the DataFrame uses MultiIndex.
        chunksize : int, default None
            If not None, then rows will be written in batches of this size at a
            time.  If None, all rows will be written at once.
        dtype : dict of column name to SQL type, default None
            Optional specifying the datatype for columns. The SQL type should
            be a SQLAlchemy type, or a string for sqlite3 fallback connection.

        ")
                        (reparse-symbol indented_block_body) [31934 34164])
                    ("to_pickle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34183 34187])
                            ("path" variable nil (reparse-symbol function_parameters) [34189 34193]))                          
                        :documentation "
        Pickle (serialize) object to input file path

        Parameters
        ----------
        path : string
            File path
        ")
                        (reparse-symbol indented_block_body) [34169 34440])
                    ("save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34454 34458])
                            ("path" variable nil (reparse-symbol function_parameters) [34460 34464]))                          )
                        (reparse-symbol indented_block_body) [34445 34716])
                    ("load" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34730 34734])
                            ("path" variable nil (reparse-symbol function_parameters) [34736 34740]))                          )
                        (reparse-symbol indented_block_body) [34721 34998])
                    ("to_clipboard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35020 35024])
                            ("excel" variable nil (reparse-symbol function_parameters) [35026 35031])
                            ("sep" variable nil (reparse-symbol function_parameters) [35038 35041])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35048 35056]))                          
                        :documentation "
        Attempt to write text representation of object to the system clipboard
        This can be pasted into Excel, for example.

        Parameters
        ----------
        excel : boolean, defaults to True
                if True, use the provided separator, writing in a csv
                format for allowing easy pasting into excel.
                if False, write a string representation of the object
                to the clipboard
        sep : optional, defaults to tab
        other keywords are passed to to_csv

        Notes
        -----
        Requirements for your platform
          - Linux: xclip, or xsel (with gtk or PyQt4 modules)
          - Windows: none
          - OS X: none
        ")
                        (reparse-symbol indented_block_body) [35003 35901])
                    ("_create_indexer" function
                       (:documentation " create an indexer like _name in the class "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [36041 36044])
                            ("name" variable nil (reparse-symbol function_parameters) [36046 36050])
                            ("indexer" variable nil (reparse-symbol function_parameters) [36052 36059]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [36004 36619])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36632 36636])
                            ("key" variable nil (reparse-symbol function_parameters) [36638 36641])
                            ("default" variable nil (reparse-symbol function_parameters) [36643 36650]))                          
                        :documentation "
        Get item from object for given key (DataFrame column, Panel slice,
        etc.). Returns default value if not found

        Parameters
        ----------
        key : object

        Returns
        -------
        value : type of items contained in object
        ")
                        (reparse-symbol indented_block_body) [36624 37070])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37091 37095])
                            ("item" variable nil (reparse-symbol function_parameters) [37097 37101]))                          )
                        (reparse-symbol indented_block_body) [37075 37146])
                    ("_get_item_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37171 37175])
                            ("item" variable nil (reparse-symbol function_parameters) [37177 37181]))                          
                        :documentation " return the cached item, item represents a label indexer ")
                        (reparse-symbol indented_block_body) [37151 37597])
                    ("_set_as_cached" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37621 37625])
                            ("item" variable nil (reparse-symbol function_parameters) [37627 37631])
                            ("cacher" variable nil (reparse-symbol function_parameters) [37633 37639]))                          
                        :documentation " set the _cacher attribute on the calling object with
            a weakref to cacher ")
                        (reparse-symbol indented_block_body) [37602 37794])
                    ("_iget_item_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37820 37824])
                            ("item" variable nil (reparse-symbol function_parameters) [37826 37830]))                          
                        :documentation " return the cached item, item represents a positional indexer ")
                        (reparse-symbol indented_block_body) [37799 38129])
                    ("_box_item_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38155 38159])
                            ("key" variable nil (reparse-symbol function_parameters) [38161 38164])
                            ("values" variable nil (reparse-symbol function_parameters) [38166 38172]))                          )
                        (reparse-symbol indented_block_body) [38134 38215])
                    ("_maybe_cache_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38245 38249])
                            ("item" variable nil (reparse-symbol function_parameters) [38251 38255])
                            ("value" variable nil (reparse-symbol function_parameters) [38257 38262]))                          
                        :documentation "
        the object has called back to us saying
        maybe it has changed

        numpy < 1.8 has an issue with object arrays and aliasing
        GH6026
        ")
                        (reparse-symbol indented_block_body) [38220 38514])
                    ("_is_cached" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38548 38552]))                          
                        :documentation " boolean : return if I am cached ")
                        (reparse-symbol indented_block_body) [38519 38661])
                    ("_get_cacher" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38682 38686]))                          
                        :documentation " return my cacher or None ")
                        (reparse-symbol indented_block_body) [38666 38864])
                    ("_is_view" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38896 38900]))                          
                        :documentation " boolean : return if I am a view of another array ")
                        (reparse-symbol indented_block_body) [38869 39002])
                    ("_maybe_update_cacher" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39032 39036])
                            ("clear" variable nil (reparse-symbol function_parameters) [39038 39043])
                            ("verify_is_copy" variable nil (reparse-symbol function_parameters) [39051 39065]))                          
                        :documentation "

        see if we need to update our parent cacher
        if clear, then clear our cache

        Parameters
        ----------
        clear : boolean, default False
            clear the item cache
        verify_is_copy : boolean, default True
            provide is_copy checks

        ")
                        (reparse-symbol indented_block_body) [39007 39938])
                    ("_clear_item_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39965 39969])
                            ("i" variable nil (reparse-symbol function_parameters) [39971 39972]))                          )
                        (reparse-symbol indented_block_body) [39943 40099])
                    ("_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40115 40119])
                            ("slobj" variable nil (reparse-symbol function_parameters) [40121 40126])
                            ("axis" variable nil (reparse-symbol function_parameters) [40128 40132])
                            ("kind" variable nil (reparse-symbol function_parameters) [40136 40140]))                          
                        :documentation "
        Construct a slice of this container.

        kind parameter is maintained for compatibility with Series slicing.

        ")
                        (reparse-symbol indented_block_body) [40104 40667])
                    ("_set_item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40686 40690])
                            ("key" variable nil (reparse-symbol function_parameters) [40692 40695])
                            ("value" variable nil (reparse-symbol function_parameters) [40697 40702]))                          )
                        (reparse-symbol indented_block_body) [40672 40773])
                    ("_set_is_copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40795 40799])
                            ("ref" variable nil (reparse-symbol function_parameters) [40801 40804])
                            ("copy" variable nil (reparse-symbol function_parameters) [40811 40815]))                          )
                        (reparse-symbol indented_block_body) [40778 41024])
                    ("_check_is_chained_assignment_possible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41071 41075]))                          
                        :documentation "
        check if we are a view, have a cacher, and are of mixed type
        if so, then force a setitem_copy check

        should be called just near setting a value

        will return a boolean if it we are a view and are cached, but a single-dtype
        meaning that the cacher should be updated following setting
        ")
                        (reparse-symbol indented_block_body) [41029 41780])
                    ("_check_setitem_copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41809 41813])
                            ("stacklevel" variable nil (reparse-symbol function_parameters) [41815 41825])
                            ("t" variable nil (reparse-symbol function_parameters) [41829 41830])
                            ("force" variable nil (reparse-symbol function_parameters) [41842 41847]))                          
                        :documentation "

        Parameters
        ----------
        stacklevel : integer, default 4
           the level to show of the stack when the error is output
        t : string, the type of setting error
        force : boolean, default False
           if True, then force showing an error

        validate if we are doing a settitem on a chained copy.

        If you call this function, be sure to set the stacklevel such that the
        user will see the error *at the level of setting*

        It is technically possible to figure out that we are setting on
        a copy even WITH a multi-dtyped pandas object. In other words, some blocks
        may be views while other are not. Currently _is_view will ALWAYS return False
        for multi-blocks to avoid having to handle this case.

        df = DataFrame(np.arange(0,9), columns=['count'])
        df['group'] = 'b'

        # this technically need not raise SettingWithCopy if both are view (which is not
        # generally guaranteed but is usually True
        # however, this is in general not a good practice and we recommend using .loc
        df.iloc[0:5]['group'] = 'a'

        ")
                        (reparse-symbol indented_block_body) [41785 44796])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44817 44821])
                            ("key" variable nil (reparse-symbol function_parameters) [44823 44826]))                          
                        :documentation "
        Delete item
        ")
                        (reparse-symbol indented_block_body) [44801 45844])
                    ("take" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45858 45862])
                            ("indices" variable nil (reparse-symbol function_parameters) [45864 45871])
                            ("axis" variable nil (reparse-symbol function_parameters) [45873 45877])
                            ("convert" variable nil (reparse-symbol function_parameters) [45881 45888])
                            ("is_copy" variable nil (reparse-symbol function_parameters) [45895 45902]))                          
                        :documentation "
        Analogous to ndarray.take

        Parameters
        ----------
        indices : list / array of ints
        axis : int, default 0
        convert : translate neg to pos indices (default)
        is_copy : mark the returned frame as a copy

        Returns
        -------
        taken : type of caller
        ")
                        (reparse-symbol indented_block_body) [45849 46754])
                    ("xs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46766 46770])
                            ("key" variable nil (reparse-symbol function_parameters) [46772 46775])
                            ("axis" variable nil (reparse-symbol function_parameters) [46777 46781])
                            ("level" variable nil (reparse-symbol function_parameters) [46785 46790])
                            ("copy" variable nil (reparse-symbol function_parameters) [46797 46801])
                            ("drop_level" variable nil (reparse-symbol function_parameters) [46808 46818]))                          
                        :documentation "
        Returns a cross-section (row(s) or column(s)) from the Series/DataFrame.
        Defaults to cross-section on the rows (axis=0).

        Parameters
        ----------
        key : object
            Some label contained in the index, or partially in a MultiIndex
        axis : int, default 0
            Axis to retrieve cross-section on
        level : object, defaults to first n levels (n=1 or len(key))
            In case of a key partially contained in a MultiIndex, indicate
            which levels are used. Levels can be referred by label or position.
        copy : boolean [deprecated]
            Whether to make a copy of the data
        drop_level : boolean, default True
            If False, returns object with same levels as self.

        Examples
        --------
        >>> df
           A  B  C
        a  4  5  2
        b  4  0  9
        c  9  7  3
        >>> df.xs('a')
        A    4
        B    5
        C    2
        Name: a
        >>> df.xs('C', axis=1)
        a    2
        b    9
        c    3
        Name: C

        >>> df
                            A  B  C  D
        first second third
        bar   one    1      4  1  8  9
              two    1      7  5  5  0
        baz   one    1      6  6  8  0
              three  2      5  3  5  3
        >>> df.xs(('baz', 'three'))
               A  B  C  D
        third
        2      5  3  5  3
        >>> df.xs('one', level=1)
                     A  B  C  D
        first third
        bar   1      4  1  8  9
        baz   1      6  6  8  0
        >>> df.xs(('baz', 2), level=[0, 'third'])
                A  B  C  D
        second
        three   5  3  5  3

        Returns
        -------
        xs : Series or DataFrame

        Notes
        -----
        xs is only for getting, not setting values.

        MultiIndex Slicers is a generic way to get/set values on any level or levels
        it is a superset of xs functionality, see :ref:`MultiIndex Slicers <advanced.mi_slicers>`

        ")
                        (reparse-symbol indented_block_body) [46759 51513])
                    ("_xs" variable nil (reparse-symbol indented_block_body) [51518 51526])
                    ("select" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51589 51593])
                            ("crit" variable nil (reparse-symbol function_parameters) [51595 51599])
                            ("axis" variable nil (reparse-symbol function_parameters) [51601 51605]))                          
                        :documentation "
        Return data corresponding to axis labels matching criteria

        Parameters
        ----------
        crit : function
            To be called on each index (label). Should return True or False
        axis : int

        Returns
        -------
        selection : type of caller
        ")
                        (reparse-symbol indented_block_body) [51578 52306])
                    ("reindex_like" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52328 52332])
                            ("other" variable nil (reparse-symbol function_parameters) [52334 52339])
                            ("method" variable nil (reparse-symbol function_parameters) [52341 52347])
                            ("copy" variable nil (reparse-symbol function_parameters) [52354 52358])
                            ("limit" variable nil (reparse-symbol function_parameters) [52365 52370]))                          
                        :documentation " return an object with matching indicies to myself

        Parameters
        ----------
        other : Object
        method : string or None
        copy : boolean, default True
        limit : int, default None
            Maximum size gap to forward or backward fill

        Notes
        -----
        Like calling s.reindex(index=other.index, columns=other.columns,
                               method=...)

        Returns
        -------
        reindexed : same as input
        ")
                        (reparse-symbol indented_block_body) [52311 53038])
                    ("drop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53052 53056])
                            ("labels" variable nil (reparse-symbol function_parameters) [53058 53064])
                            ("axis" variable nil (reparse-symbol function_parameters) [53066 53070])
                            ("level" variable nil (reparse-symbol function_parameters) [53074 53079])
                            ("inplace" variable nil (reparse-symbol function_parameters) [53086 53093])
                            ("errors" variable nil (reparse-symbol function_parameters) [53101 53107]))                          
                        :documentation "
        Return new object with labels in requested axis removed

        Parameters
        ----------
        labels : single label or list-like
        axis : int or axis name
        level : int or level name, default None
            For MultiIndex
        inplace : bool, default False
            If True, do operation inplace and return None.
        errors : {'ignore', 'raise'}, default 'raise'
            If 'ignore', suppress error and existing labels are dropped.

        Returns
        -------
        dropped : type of caller
        ")
                        (reparse-symbol indented_block_body) [53043 55072])
                    ("_update_inplace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55097 55101])
                            ("result" variable nil (reparse-symbol function_parameters) [55103 55109])
                            ("verify_is_copy" variable nil (reparse-symbol function_parameters) [55111 55125]))                          
                        :documentation "
        replace self internals with result.

        Parameters
        ----------
        verify_is_copy : boolean, default True
            provide is_copy checks

        ")
                        (reparse-symbol indented_block_body) [55077 55629])
                    ("add_prefix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55649 55653])
                            ("prefix" variable nil (reparse-symbol function_parameters) [55655 55661]))                          
                        :documentation "
        Concatenate prefix string with panel items names.

        Parameters
        ----------
        prefix : string

        Returns
        -------
        with_prefix : type of caller
        ")
                        (reparse-symbol indented_block_body) [55634 55990])
                    ("add_suffix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56010 56014])
                            ("suffix" variable nil (reparse-symbol function_parameters) [56016 56022]))                          
                        :documentation "
        Concatenate suffix string with panel items names

        Parameters
        ----------
        suffix : string

        Returns
        -------
        with_suffix : type of caller
        ")
                        (reparse-symbol indented_block_body) [55995 56350])
                    ("sort_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56370 56374])
                            ("axis" variable nil (reparse-symbol function_parameters) [56376 56380])
                            ("ascending" variable nil (reparse-symbol function_parameters) [56384 56393]))                          
                        :documentation "
        Sort object by labels (along an axis)

        Parameters
        ----------
        axis : {0, 1}
            Sort index/rows versus columns
        ascending : boolean, default True
            Sort ascending vs. descending

        Returns
        -------
        sorted_obj : type of caller
        ")
                        (reparse-symbol indented_block_body) [56355 57059])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [57064 58677])
                    ("" code nil (reparse-symbol indented_block_body) [58786 58848])
                    ("reindex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58865 58869])
                            ("args" variable nil (reparse-symbol function_parameters) [58871 58876])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58878 58886]))                          )
                        (reparse-symbol indented_block_body) [58853 60192])
                    ("_reindex_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60215 60219])
                            ("axes" variable nil (reparse-symbol function_parameters) [60221 60225])
                            ("level" variable nil (reparse-symbol function_parameters) [60227 60232])
                            ("limit" variable nil (reparse-symbol function_parameters) [60234 60239])
                            ("method" variable nil (reparse-symbol function_parameters) [60241 60247])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [60249 60259])
                            ("copy" variable nil (reparse-symbol function_parameters) [60261 60265]))                          
                        :documentation " perform the reinxed for all the axes ")
                        (reparse-symbol indented_block_body) [60197 60832])
                    ("_needs_reindex_multi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60862 60866])
                            ("axes" variable nil (reparse-symbol function_parameters) [60868 60872])
                            ("method" variable nil (reparse-symbol function_parameters) [60874 60880])
                            ("level" variable nil (reparse-symbol function_parameters) [60882 60887]))                          
                        :documentation " check if we do need a multi reindex ")
                        (reparse-symbol indented_block_body) [60837 61096])
                    ("_reindex_multi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61120 61124])
                            ("axes" variable nil (reparse-symbol function_parameters) [61126 61130])
                            ("copy" variable nil (reparse-symbol function_parameters) [61132 61136])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [61138 61148]))                          )
                        (reparse-symbol indented_block_body) [61101 61181])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [61186 62665])
                    ("" code nil (reparse-symbol indented_block_body) [62680 62731])
                    ("reindex_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62753 62757])
                            ("labels" variable nil (reparse-symbol function_parameters) [62759 62765])
                            ("axis" variable nil (reparse-symbol function_parameters) [62767 62771])
                            ("method" variable nil (reparse-symbol function_parameters) [62775 62781])
                            ("level" variable nil (reparse-symbol function_parameters) [62788 62793])
                            ("copy" variable nil (reparse-symbol function_parameters) [62800 62804])
                            ("limit" variable nil (reparse-symbol function_parameters) [62832 62837])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [62844 62854]))                          )
                        (reparse-symbol indented_block_body) [62736 63305])
                    ("_reindex_with_indexers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63337 63341])
                            ("reindexers" variable nil (reparse-symbol function_parameters) [63343 63353])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [63386 63396])
                            ("copy" variable nil (reparse-symbol function_parameters) [63405 63409])
                            ("allow_dups" variable nil (reparse-symbol function_parameters) [63448 63458]))                          
                        :documentation " allow_dups indicates an internal call here ")
                        (reparse-symbol indented_block_body) [63310 64455])
                    ("_reindex_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64478 64482])
                            ("new_index" variable nil (reparse-symbol function_parameters) [64484 64493])
                            ("fill_method" variable nil (reparse-symbol function_parameters) [64495 64506])
                            ("axis" variable nil (reparse-symbol function_parameters) [64508 64512])
                            ("copy" variable nil (reparse-symbol function_parameters) [64514 64518]))                          )
                        (reparse-symbol indented_block_body) [64460 64813])
                    ("filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64829 64833])
                            ("items" variable nil (reparse-symbol function_parameters) [64835 64840])
                            ("like" variable nil (reparse-symbol function_parameters) [64847 64851])
                            ("regex" variable nil (reparse-symbol function_parameters) [64858 64863])
                            ("axis" variable nil (reparse-symbol function_parameters) [64870 64874]))                          
                        :documentation "
        Restrict the info axis to set of items or wildcard

        Parameters
        ----------
        items : list-like
            List of info axis to restrict to (must not all be present)
        like : string
            Keep info axis where \"arg in col == True\"
        regex : string (regular expression)
            Keep info axis with re.search(regex, col) == True
        axis : int or None
            The axis to filter on. By default this is the info axis. The \"info
            axis\" is the axis that is used when indexing with ``[]``. For
            example, ``df = DataFrame({'a': [1, 2, 3, 4]]}); df['a']``. So,
            the ``DataFrame`` columns are the info axis.

        Notes
        -----
        Arguments are mutually exclusive, but this is not checked for

        ")
                        (reparse-symbol indented_block_body) [64818 66508])
                    ("head" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66522 66526])
                            ("n" variable nil (reparse-symbol function_parameters) [66528 66529]))                          
                        :documentation "
        Returns first n rows
        ")
                        (reparse-symbol indented_block_body) [66513 66689])
                    ("tail" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66703 66707])
                            ("n" variable nil (reparse-symbol function_parameters) [66709 66710]))                          
                        :documentation "
        Returns last n rows
        ")
                        (reparse-symbol indented_block_body) [66694 66872])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66889 66893])
                            ("n" variable nil (reparse-symbol function_parameters) [66895 66896])
                            ("frac" variable nil (reparse-symbol function_parameters) [66903 66907])
                            ("replace" variable nil (reparse-symbol function_parameters) [66914 66921])
                            ("weights" variable nil (reparse-symbol function_parameters) [66929 66936])
                            ("random_state" variable nil (reparse-symbol function_parameters) [66943 66955])
                            ("axis" variable nil (reparse-symbol function_parameters) [66962 66966]))                          
                        :documentation "
        Returns a random sample of items from an axis of object.

        Parameters
        ----------
        n : int, optional
            Number of items from axis to return. Cannot be used with `frac`.
            Default = 1 if `frac` = None.
        frac : float, optional
            Fraction of axis items to return. Cannot be used with `n`.
        replace : boolean, optional
            Sample with or without replacement. Default = False.
        weights : str or ndarray-like, optional
            Default 'None' results in equal probability weighting.
            If called on a DataFrame, will accept the name of a column
            when axis = 0.
            Weights must be same length as axis being sampled.
            If weights do not sum to 1, they will be normalized to sum to 1.
            Missing values in the weights column will be treated as zero.
            inf and -inf values not allowed.
        random_state : int or numpy.random.RandomState, optional
            Seed for the random number generator (if int), or numpy RandomState
            object.
        axis : int or string, optional
            Axis to sample. Accepts axis number or name. Default is stat axis
            for given data type (0 for Series and DataFrames, 1 for Panels).

        Returns
        -------
        Same type as caller.
        ")
                        (reparse-symbol indented_block_body) [66878 70781])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [70786 72265])
                    ("" code nil (reparse-symbol indented_block_body) [72279 72322])
                    ("pipe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72336 72340])
                            ("func" variable nil (reparse-symbol function_parameters) [72342 72346])
                            ("args" variable nil (reparse-symbol function_parameters) [72348 72353])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [72355 72363]))                          )
                        (reparse-symbol indented_block_body) [72327 72724])
                    ("__finalize__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72846 72850])
                            ("other" variable nil (reparse-symbol function_parameters) [72852 72857])
                            ("method" variable nil (reparse-symbol function_parameters) [72859 72865])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [72872 72880]))                          
                        :documentation "
        propagate metadata from other to self

        Parameters
        ----------
        other : the object from which to get the attributes that we are going
            to propagate
        method : optional, a passed method name ; possibly to take different
            types of propagation actions based on this

        ")
                        (reparse-symbol indented_block_body) [72829 73402])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73423 73427])
                            ("name" variable nil (reparse-symbol function_parameters) [73429 73433]))                          
                        :documentation "After regular attribute access, try looking up the name
        This allows simpler access to columns for interactive use.
        ")
                        (reparse-symbol indented_block_body) [73407 74105])
                    ("__setattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74126 74130])
                            ("name" variable nil (reparse-symbol function_parameters) [74132 74136])
                            ("value" variable nil (reparse-symbol function_parameters) [74138 74143]))                          
                        :documentation "After regular attribute access, try setting the name
        This allows simpler access to columns for interactive use.")
                        (reparse-symbol indented_block_body) [74110 75379])
                    ("_protect_consolidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75631 75635])
                            ("f" variable nil (reparse-symbol function_parameters) [75637 75638]))                          
                        :documentation " consolidate _data. if the blocks have changed, then clear the cache ")
                        (reparse-symbol indented_block_body) [75606 75904])
                    ("_consolidate_inplace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75934 75938]))                          
                        :documentation " we are inplace consolidating; return None ")
                        (reparse-symbol indented_block_body) [75909 76103])
                    ("consolidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76124 76128])
                            ("inplace" variable nil (reparse-symbol function_parameters) [76130 76137]))                          
                        :documentation "
        Compute NDFrame with \"consolidated\" internals (data of each dtype
        grouped together in a single ndarray). Mainly an internal API function,
        but available here to the savvy user

        Parameters
        ----------
        inplace : boolean, default False
            If False return new object, otherwise modify existing object

        Returns
        -------
        consolidated : type of caller
        ")
                        (reparse-symbol indented_block_body) [76108 76836])
                    ("_is_mixed_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76874 76878]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [76841 76970])
                    ("_is_numeric_mixed_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77016 77020]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [76975 77120])
                    ("_is_datelike_mixed_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77167 77171]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [77125 77272])
                    ("_check_inplace_setting" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77304 77308])
                            ("value" variable nil (reparse-symbol function_parameters) [77310 77315]))                          
                        :documentation " check whether we allow in-place setting with this type of value ")
                        (reparse-symbol indented_block_body) [77277 77823])
                    ("_get_numeric_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77850 77854]))                          )
                        (reparse-symbol indented_block_body) [77828 77953])
                    ("_get_bool_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77977 77981]))                          )
                        (reparse-symbol indented_block_body) [77958 78064])
                    ("as_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78193 78197])
                            ("columns" variable nil (reparse-symbol function_parameters) [78199 78206]))                          
                        :documentation "
        Convert the frame to its Numpy-array representation.

        Parameters
        ----------
        columns: list, optional, default:None
            If None, return all columns, otherwise, returns specified columns.

        Returns
        -------
        values : ndarray
            If the caller is heterogeneous and contains booleans or objects,
            the result will be of dtype=object. See Notes.


        Notes
        -----
        Return is NOT a Numpy-matrix, rather, a Numpy-array.

        The dtype will be a lower-common-denominator dtype (implicit
        upcasting); that is to say if the dtypes (even of numeric types)
        are mixed, the one that accommodates all will be chosen. Use this
        with care if you are not dealing with the blocks.

        e.g. If the dtypes are float16 and float32, dtype will be upcast to
        float32.  If dtypes are int32 and uint8, dtype will be upcase to
        int32.

        This method is provided for backwards compatibility. Generally,
        it is recommended to use '.values'.

        See Also
        --------
        pandas.DataFrame.values
        ")
                        (reparse-symbol indented_block_body) [78179 79536])
                    ("values" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79566 79570]))                          
                        :documentation "Numpy representation of NDFrame

        Notes
        -----
        The dtype will be a lower-common-denominator dtype (implicit
        upcasting); that is to say if the dtypes (even of numeric types)
        are mixed, the one that accommodates all will be chosen. Use this
        with care if you are not dealing with the blocks.

        e.g. If the dtypes are float16 and float32, dtype will be upcast to
        float32.  If dtypes are int32 and uint8, dtype will be upcase to
        int32.
        ")
                        (reparse-symbol indented_block_body) [79541 80128])
                    ("_get_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80163 80167]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [80133 80219])
                    ("get_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80239 80243]))                          
                        :documentation " same as values (but handles sparseness conversions) ")
                        (reparse-symbol indented_block_body) [80224 80346])
                    ("get_dtype_counts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80372 80376]))                          
                        :documentation " Return the counts of dtypes in this object ")
                        (reparse-symbol indented_block_body) [80351 80525])
                    ("get_ftype_counts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80551 80555]))                          
                        :documentation " Return the counts of ftypes in this object ")
                        (reparse-symbol indented_block_body) [80530 80704])
                    ("dtypes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80734 80738]))                          
                        :documentation " Return the dtypes in this object ")
                        (reparse-symbol indented_block_body) [80709 80934])
                    ("ftypes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80964 80968]))                          
                        :documentation "
        Return the ftypes (indication of sparse/dense and dtype)
        in this object.
        ")
                        (reparse-symbol indented_block_body) [80939 81228])
                    ("as_blocks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81247 81251]))                          
                        :documentation "
        Convert the frame to a dict of dtype -> Constructor Types that each has
        a homogeneous dtype.

        NOTE: the dtypes of the blocks WILL BE PRESERVED HERE (unlike in
              as_matrix)

        Returns
        -------
        values : a dict of dtype -> Constructor Types
        ")
                        (reparse-symbol indented_block_body) [81233 82083])
                    ("blocks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82113 82117]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [82088 82214])
                    ("astype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82230 82234])
                            ("dtype" variable nil (reparse-symbol function_parameters) [82236 82241])
                            ("copy" variable nil (reparse-symbol function_parameters) [82243 82247])
                            ("raise_on_error" variable nil (reparse-symbol function_parameters) [82254 82268])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [82275 82283]))                          
                        :documentation "
        Cast object to input numpy.dtype
        Return a copy when copy = True (be really careful with this!)

        Parameters
        ----------
        dtype : numpy.dtype or Python type
        raise_on_error : raise on invalid input
        kwargs : keyword arguments to pass on to the constructor

        Returns
        -------
        casted : type of caller
        ")
                        (reparse-symbol indented_block_body) [82219 82849])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82863 82867])
                            ("deep" variable nil (reparse-symbol function_parameters) [82869 82873]))                          
                        :documentation "
        Make a copy of this object

        Parameters
        ----------
        deep : boolean or string, default True
            Make a deep copy, i.e. also copy data

        Returns
        -------
        copy : type of caller
        ")
                        (reparse-symbol indented_block_body) [82854 83239])
                    ("convert_objects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83264 83268])
                            ("convert_dates" variable nil (reparse-symbol function_parameters) [83270 83283])
                            ("convert_numeric" variable nil (reparse-symbol function_parameters) [83290 83305])
                            ("convert_timedeltas" variable nil (reparse-symbol function_parameters) [83337 83355])
                            ("copy" variable nil (reparse-symbol function_parameters) [83362 83366]))                          
                        :documentation "
        Attempt to infer better dtype for object columns

        Parameters
        ----------
        convert_dates : boolean, default True
            If True, convert to date where possible. If 'coerce', force
            conversion, with unconvertible values becoming NaT.
        convert_numeric : boolean, default False
            If True, attempt to coerce to numbers (including strings), with
            unconvertible values becoming NaN.
        convert_timedeltas : boolean, default True
            If True, convert to timedelta where possible. If 'coerce', force
            conversion, with unconvertible values becoming NaT.
        copy : boolean, default True
            If True, return a copy even if no copy is necessary (e.g. no
            conversion was done). Note: This is meant for internal use, and
            should not be confused with inplace.

        Returns
        -------
        converted : same as input object
        ")
                        (reparse-symbol indented_block_body) [83244 84639])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [84740 86587])
                    ("" code nil (reparse-symbol indented_block_body) [86602 86647])
                    ("fillna" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86663 86667])
                            ("value" variable nil (reparse-symbol function_parameters) [86669 86674])
                            ("method" variable nil (reparse-symbol function_parameters) [86681 86687])
                            ("axis" variable nil (reparse-symbol function_parameters) [86694 86698])
                            ("inplace" variable nil (reparse-symbol function_parameters) [86705 86712])
                            ("limit" variable nil (reparse-symbol function_parameters) [86735 86740])
                            ("downcast" variable nil (reparse-symbol function_parameters) [86747 86755]))                          )
                        (reparse-symbol indented_block_body) [86652 90797])
                    ("ffill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90812 90816])
                            ("axis" variable nil (reparse-symbol function_parameters) [90818 90822])
                            ("inplace" variable nil (reparse-symbol function_parameters) [90829 90836])
                            ("limit" variable nil (reparse-symbol function_parameters) [90844 90849])
                            ("downcast" variable nil (reparse-symbol function_parameters) [90856 90864]))                          )
                        (reparse-symbol indented_block_body) [90802 91055])
                    ("bfill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91070 91074])
                            ("axis" variable nil (reparse-symbol function_parameters) [91076 91080])
                            ("inplace" variable nil (reparse-symbol function_parameters) [91087 91094])
                            ("limit" variable nil (reparse-symbol function_parameters) [91102 91107])
                            ("downcast" variable nil (reparse-symbol function_parameters) [91114 91122]))                          )
                        (reparse-symbol indented_block_body) [91060 91313])
                    ("replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91330 91334])
                            ("to_replace" variable nil (reparse-symbol function_parameters) [91336 91346])
                            ("value" variable nil (reparse-symbol function_parameters) [91353 91358])
                            ("inplace" variable nil (reparse-symbol function_parameters) [91365 91372])
                            ("limit" variable nil (reparse-symbol function_parameters) [91380 91385])
                            ("regex" variable nil (reparse-symbol function_parameters) [91408 91413])
                            ("method" variable nil (reparse-symbol function_parameters) [91421 91427])
                            ("axis" variable nil (reparse-symbol function_parameters) [91435 91439]))                          
                        :documentation "
        Replace values given in 'to_replace' with 'value'.

        Parameters
        ----------
        to_replace : str, regex, list, dict, Series, numeric, or None

            * str or regex:

                - str: string exactly matching `to_replace` will be replaced
                  with `value`
                - regex: regexs matching `to_replace` will be replaced with
                  `value`

            * list of str, regex, or numeric:

                - First, if `to_replace` and `value` are both lists, they
                  **must** be the same length.
                - Second, if ``regex=True`` then all of the strings in **both**
                  lists will be interpreted as regexs otherwise they will match
                  directly. This doesn't matter much for `value` since there
                  are only a few possible substitution regexes you can use.
                - str and regex rules apply as above.

            * dict:

                - Nested dictionaries, e.g., {'a': {'b': nan}}, are read as
                  follows: look in column 'a' for the value 'b' and replace it
                  with nan. You can nest regular expressions as well. Note that
                  column names (the top-level dictionary keys in a nested
                  dictionary) **cannot** be regular expressions.
                - Keys map to column names and values map to substitution
                  values. You can treat this as a special case of passing two
                  lists except that you are specifying the column to search in.

            * None:

                - This means that the ``regex`` argument must be a string,
                  compiled regular expression, or list, dict, ndarray or Series
                  of such elements. If `value` is also ``None`` then this
                  **must** be a nested dictionary or ``Series``.

            See the examples section for examples of each of these.
        value : scalar, dict, list, str, regex, default None
            Value to use to fill holes (e.g. 0), alternately a dict of values
            specifying which value to use for each column (columns not in the
            dict will not be filled). Regular expressions, strings and lists or
            dicts of such objects are also allowed.
        inplace : boolean, default False
            If True, in place. Note: this will modify any
            other views on this object (e.g. a column form a DataFrame).
            Returns the caller if this is True.
        limit : int, default None
            Maximum size gap to forward or backward fill
        regex : bool or same types as `to_replace`, default False
            Whether to interpret `to_replace` and/or `value` as regular
            expressions. If this is ``True`` then `to_replace` *must* be a
            string. Otherwise, `to_replace` must be ``None`` because this
            parameter will be interpreted as a regular expression or a list,
            dict, or array of regular expressions.
        method : string, optional, {'pad', 'ffill', 'bfill'}
            The method to use when for replacement, when ``to_replace`` is a
            ``list``.

        See also
        --------
        NDFrame.reindex
        NDFrame.asfreq
        NDFrame.fillna

        Returns
        -------
        filled : NDFrame

        Raises
        ------
        AssertionError
            * If `regex` is not a ``bool`` and `to_replace` is not ``None``.
        TypeError
            * If `to_replace` is a ``dict`` and `value` is not a ``list``,
              ``dict``, ``ndarray``, or ``Series``
            * If `to_replace` is ``None`` and `regex` is not compilable into a
              regular expression or is a list, dict, ndarray, or Series.
        ValueError
            * If `to_replace` and `value` are ``list`` s or ``ndarray`` s, but
              they are not the same length.

        Notes
        -----
        * Regex substitution is performed under the hood with ``re.sub``. The
          rules for substitution for ``re.sub`` are the same.
        * Regular expressions will only substitute on strings, meaning you
          cannot provide, for example, a regular expression matching floating
          point numbers and expect the columns in your frame that have a
          numeric dtype to be matched. However, if those floating point numbers
          *are* strings, then you can do this.
        * This method has *a lot* of options. You are encouraged to experiment
          and play with this method to gain intuition about how it works.

        ")
                        (reparse-symbol indented_block_body) [91318 102913])
                    ("interpolate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102934 102938])
                            ("method" variable nil (reparse-symbol function_parameters) [102940 102946])
                            ("axis" variable nil (reparse-symbol function_parameters) [102957 102961])
                            ("limit" variable nil (reparse-symbol function_parameters) [102965 102970])
                            ("inplace" variable nil (reparse-symbol function_parameters) [102977 102984])
                            ("downcast" variable nil (reparse-symbol function_parameters) [103012 103020])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [103027 103035]))                          
                        :documentation "
        Interpolate values according to different methods.

        Parameters
        ----------
        method : {'linear', 'time', 'index', 'values', 'nearest', 'zero',
                  'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh',
                  'polynomial', 'spline' 'piecewise_polynomial', 'pchip'}

            * 'linear': ignore the index and treat the values as equally
              spaced. default
            * 'time': interpolation works on daily and higher resolution
              data to interpolate given length of interval
            * 'index', 'values': use the actual numerical values of the index
            * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',
              'barycentric', 'polynomial' is passed to
              `scipy.interpolate.interp1d` with the order given both
              'polynomial' and 'spline' requre that you also specify and order
              (int) e.g. df.interpolate(method='polynomial', order=4)
            * 'krogh', 'piecewise_polynomial', 'spline', and 'pchip' are all
              wrappers around the scipy interpolation methods of similar
              names. See the scipy documentation for more on their behavior:
              http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation
              http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html

        axis : {0, 1}, default 0
            * 0: fill column-by-column
            * 1: fill row-by-row
        limit : int, default None.
            Maximum number of consecutive NaNs to fill.
        inplace : bool, default False
            Update the NDFrame in place if possible.
        downcast : optional, 'infer' or None, defaults to None
            Downcast dtypes if possible.

        Returns
        -------
        Series or DataFrame of same shape interpolated at the NaNs

        See Also
        --------
        reindex, replace, fillna

        Examples
        --------

        Filling in NaNs

        >>> s = pd.Series([0, 1, np.nan, 3])
        >>> s.interpolate()
        0    0
        1    1
        2    2
        3    3
        dtype: float64

        ")
                        (reparse-symbol indented_block_body) [102918 107249])
                    ("isnull" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107363 107367]))                          
                        :documentation "
        Return a boolean same-sized object indicating if the values are null

        See also
        --------
        notnull : boolean inverse of isnull
        ")
                        (reparse-symbol indented_block_body) [107352 107597])
                    ("notnull" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107614 107618]))                          
                        :documentation "Return a boolean same-sized object indicating if the values are
        not null

        See also
        --------
        isnull : boolean inverse of notnull
        ")
                        (reparse-symbol indented_block_body) [107602 107852])
                    ("clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107866 107870])
                            ("lower" variable nil (reparse-symbol function_parameters) [107872 107877])
                            ("upper" variable nil (reparse-symbol function_parameters) [107884 107889])
                            ("out" variable nil (reparse-symbol function_parameters) [107896 107899])
                            ("axis" variable nil (reparse-symbol function_parameters) [107906 107910]))                          
                        :documentation "
        Trim values at input threshold(s)

        Parameters
        ----------
        lower : float or array_like, default None
        upper : float or array_like, default None
        axis : int or string axis name, optional
            Align object with lower and upper along the given axis.

        Returns
        -------
        clipped : Series

        Examples
        --------
        >>> df
          0         1
        0  0.335232 -1.256177
        1 -1.367855  0.746646
        2  0.027753 -1.176076
        3  0.230930 -0.679613
        4  1.261967  0.570967
        >>> df.clip(-1.0, 0.5)
                  0         1
        0  0.335232 -1.000000
        1 -1.000000  0.500000
        2  0.027753 -1.000000
        3  0.230930 -0.679613
        4  0.500000  0.500000
        >>> t
        0   -0.3
        1   -0.2
        2   -0.1
        3    0.0
        4    0.1
        dtype: float64
        >>> df.clip(t, t + 1, axis=0)
                  0         1
        0  0.335232 -0.300000
        1 -0.200000  0.746646
        2  0.027753 -0.100000
        3  0.230930  0.000000
        4  1.100000  0.570967
        ")
                        (reparse-symbol indented_block_body) [107857 109619])
                    ("clip_upper" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109639 109643])
                            ("threshold" variable nil (reparse-symbol function_parameters) [109645 109654])
                            ("axis" variable nil (reparse-symbol function_parameters) [109656 109660]))                          
                        :documentation "
        Return copy of input with values above given value(s) truncated

        Parameters
        ----------
        threshold : float or array_like
        axis : int or string axis name, optional
            Align object with threshold along the given axis.

        See also
        --------
        clip

        Returns
        -------
        clipped : same type as input
        ")
                        (reparse-symbol indented_block_body) [109624 110304])
                    ("clip_lower" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110324 110328])
                            ("threshold" variable nil (reparse-symbol function_parameters) [110330 110339])
                            ("axis" variable nil (reparse-symbol function_parameters) [110341 110345]))                          
                        :documentation "
        Return copy of the input with values below given value(s) truncated

        Parameters
        ----------
        threshold : float or array_like
        axis : int or string axis name, optional
            Align object with threshold along the given axis.

        See also
        --------
        clip

        Returns
        -------
        clipped : same type as input
        ")
                        (reparse-symbol indented_block_body) [110309 110993])
                    ("groupby" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111010 111014])
                            ("by" variable nil (reparse-symbol function_parameters) [111016 111018])
                            ("axis" variable nil (reparse-symbol function_parameters) [111025 111029])
                            ("level" variable nil (reparse-symbol function_parameters) [111033 111038])
                            ("as_index" variable nil (reparse-symbol function_parameters) [111045 111053])
                            ("sort" variable nil (reparse-symbol function_parameters) [111060 111064])
                            ("group_keys" variable nil (reparse-symbol function_parameters) [111087 111097])
                            ("squeeze" variable nil (reparse-symbol function_parameters) [111104 111111]))                          
                        :documentation "
        Group series using mapper (dict or key function, apply given function
        to group, return result as series) or by a series of columns

        Parameters
        ----------
        by : mapping function / list of functions, dict, Series, or tuple /
            list of column names.
            Called on each element of the object index to determine the groups.
            If a dict or Series is passed, the Series or dict VALUES will be
            used to determine the groups
        axis : int, default 0
        level : int, level name, or sequence of such, default None
            If the axis is a MultiIndex (hierarchical), group by a particular
            level or levels
        as_index : boolean, default True
            For aggregated output, return object with group labels as the
            index. Only relevant for DataFrame input. as_index=False is
            effectively \"SQL-style\" grouped output
        sort : boolean, default True
            Sort group keys. Get better performance by turning this off
        group_keys : boolean, default True
            When calling apply, add group keys to index to identify pieces
        squeeze : boolean, default False
            reduce the dimensionaility of the return type if possible,
            otherwise return a consistent type

        Examples
        --------
        DataFrame results

        >>> data.groupby(func, axis=0).mean()
        >>> data.groupby(['col1', 'col2'])['col3'].mean()

        DataFrame with hierarchical index

        >>> data.groupby(['col1', 'col2']).mean()

        Returns
        -------
        GroupBy object

        ")
                        (reparse-symbol indented_block_body) [110998 113142])
                    ("asfreq" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113158 113162])
                            ("freq" variable nil (reparse-symbol function_parameters) [113164 113168])
                            ("method" variable nil (reparse-symbol function_parameters) [113170 113176])
                            ("how" variable nil (reparse-symbol function_parameters) [113183 113186])
                            ("normalize" variable nil (reparse-symbol function_parameters) [113193 113202]))                          
                        :documentation "
        Convert all TimeSeries inside to specified frequency using DateOffset
        objects. Optionally provide fill method to pad/backfill missing values.

        Parameters
        ----------
        freq : DateOffset object, or string
        method : {'backfill', 'bfill', 'pad', 'ffill', None}
            Method to use for filling holes in reindexed Series
            pad / ffill: propagate last valid observation forward to next valid
            backfill / bfill: use NEXT valid observation to fill method
        how : {'start', 'end'}, default end
            For PeriodIndex only, see PeriodIndex.asfreq
        normalize : bool, default False
            Whether to reset output index to midnight

        Returns
        -------
        converted : type of caller
        ")
                        (reparse-symbol indented_block_body) [113147 114168])
                    ("at_time" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114185 114189])
                            ("time" variable nil (reparse-symbol function_parameters) [114191 114195])
                            ("asof" variable nil (reparse-symbol function_parameters) [114197 114201]))                          
                        :documentation "
        Select values at particular time of day (e.g. 9:30AM)

        Parameters
        ----------
        time : datetime.time or string

        Returns
        -------
        values_at_time : type of caller
        ")
                        (reparse-symbol indented_block_body) [114173 114669])
                    ("between_time" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114691 114695])
                            ("start_time" variable nil (reparse-symbol function_parameters) [114697 114707])
                            ("end_time" variable nil (reparse-symbol function_parameters) [114709 114717])
                            ("include_start" variable nil (reparse-symbol function_parameters) [114719 114732])
                            ("include_end" variable nil (reparse-symbol function_parameters) [114760 114771]))                          
                        :documentation "
        Select values between particular times of the day (e.g., 9:00-9:30 AM)

        Parameters
        ----------
        start_time : datetime.time or string
        end_time : datetime.time or string
        include_start : boolean, default True
        include_end : boolean, default True

        Returns
        -------
        values_between_time : type of caller
        ")
                        (reparse-symbol indented_block_body) [114674 115496])
                    ("resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115514 115518])
                            ("rule" variable nil (reparse-symbol function_parameters) [115520 115524])
                            ("how" variable nil (reparse-symbol function_parameters) [115526 115529])
                            ("axis" variable nil (reparse-symbol function_parameters) [115536 115540])
                            ("fill_method" variable nil (reparse-symbol function_parameters) [115544 115555])
                            ("closed" variable nil (reparse-symbol function_parameters) [115579 115585])
                            ("label" variable nil (reparse-symbol function_parameters) [115592 115597])
                            ("convention" variable nil (reparse-symbol function_parameters) [115604 115614])
                            ("kind" variable nil (reparse-symbol function_parameters) [115641 115645])
                            ("loffset" variable nil (reparse-symbol function_parameters) [115652 115659])
                            ("limit" variable nil (reparse-symbol function_parameters) [115666 115671])
                            ("base" variable nil (reparse-symbol function_parameters) [115678 115682]))                          
                        :documentation "
        Convenience method for frequency conversion and resampling of regular
        time-series data.

        Parameters
        ----------
        rule : string
            the offset string or object representing target conversion
        how : string
            method for down- or re-sampling, default to 'mean' for
            downsampling
        axis : int, optional, default 0
        fill_method : string, default None
            fill_method for upsampling
        closed : {'right', 'left'}
            Which side of bin interval is closed
        label : {'right', 'left'}
            Which bin edge label to label bucket with
        convention : {'start', 'end', 's', 'e'}
        kind : \"period\"/\"timestamp\"
        loffset : timedelta
            Adjust the resampled time labels
        limit : int, default None
            Maximum size gap to when reindexing with fill_method
        base : int, default 0
            For frequencies that evenly subdivide 1 day, the \"origin\" of the
            aggregated intervals. For example, for '5min' frequency, base could
            range from 0 through 4. Defaults to 0
        ")
                        (reparse-symbol indented_block_body) [115501 117277])
                    ("first" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117292 117296])
                            ("offset" variable nil (reparse-symbol function_parameters) [117298 117304]))                          
                        :documentation "
        Convenience method for subsetting initial periods of time series data
        based on a date offset

        Parameters
        ----------
        offset : string, DateOffset, dateutil.relativedelta

        Examples
        --------
        ts.last('10D') -> First 10 days

        Returns
        -------
        subset : type of caller
        ")
                        (reparse-symbol indented_block_body) [117282 118295])
                    ("last" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118309 118313])
                            ("offset" variable nil (reparse-symbol function_parameters) [118315 118321]))                          
                        :documentation "
        Convenience method for subsetting final periods of time series data
        based on a date offset

        Parameters
        ----------
        offset : string, DateOffset, dateutil.relativedelta

        Examples
        --------
        ts.last('5M') -> Last 5 months

        Returns
        -------
        subset : type of caller
        ")
                        (reparse-symbol indented_block_body) [118300 119174])
                    ("align" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119189 119193])
                            ("other" variable nil (reparse-symbol function_parameters) [119195 119200])
                            ("join" variable nil (reparse-symbol function_parameters) [119202 119206])
                            ("axis" variable nil (reparse-symbol function_parameters) [119216 119220])
                            ("level" variable nil (reparse-symbol function_parameters) [119227 119232])
                            ("copy" variable nil (reparse-symbol function_parameters) [119239 119243])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [119264 119274])
                            ("method" variable nil (reparse-symbol function_parameters) [119281 119287])
                            ("limit" variable nil (reparse-symbol function_parameters) [119294 119299])
                            ("fill_axis" variable nil (reparse-symbol function_parameters) [119306 119315]))                          
                        :documentation "
        Align two object on their axes with the
        specified join method for each axis Index

        Parameters
        ----------
        other : DataFrame or Series
        join : {'outer', 'inner', 'left', 'right'}, default 'outer'
        axis : allowed axis of the other object, default None
            Align on index (0), columns (1), or both (None)
        level : int or level name, default None
            Broadcast across a level, matching Index values on the
            passed MultiIndex level
        copy : boolean, default True
            Always returns new objects. If copy=False and no reindexing is
            required then original objects are returned.
        fill_value : scalar, default np.NaN
            Value to use for missing values. Defaults to NaN, but can be any
            \"compatible\" value
        method : str, default None
        limit : int, default None
        fill_axis : {0, 1}, default 0
            Filling axis, method and limit

        Returns
        -------
        (left, right) : (type of input, type of other)
            Aligned objects
        ")
                        (reparse-symbol indented_block_body) [119179 121346])
                    ("_align_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121368 121372])
                            ("other" variable nil (reparse-symbol function_parameters) [121374 121379])
                            ("join" variable nil (reparse-symbol function_parameters) [121381 121385])
                            ("axis" variable nil (reparse-symbol function_parameters) [121395 121399])
                            ("level" variable nil (reparse-symbol function_parameters) [121406 121411])
                            ("copy" variable nil (reparse-symbol function_parameters) [121439 121443])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [121450 121460])
                            ("method" variable nil (reparse-symbol function_parameters) [121469 121475])
                            ("limit" variable nil (reparse-symbol function_parameters) [121482 121487])
                            ("fill_axis" variable nil (reparse-symbol function_parameters) [121515 121524]))                          )
                        (reparse-symbol indented_block_body) [121351 123020])
                    ("_align_series" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123043 123047])
                            ("other" variable nil (reparse-symbol function_parameters) [123049 123054])
                            ("join" variable nil (reparse-symbol function_parameters) [123056 123060])
                            ("axis" variable nil (reparse-symbol function_parameters) [123070 123074])
                            ("level" variable nil (reparse-symbol function_parameters) [123081 123086])
                            ("copy" variable nil (reparse-symbol function_parameters) [123115 123119])
                            ("fill_value" variable nil (reparse-symbol function_parameters) [123126 123136])
                            ("method" variable nil (reparse-symbol function_parameters) [123143 123149])
                            ("limit" variable nil (reparse-symbol function_parameters) [123156 123161])
                            ("fill_axis" variable nil (reparse-symbol function_parameters) [123190 123199]))                          )
                        (reparse-symbol indented_block_body) [123025 125670])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [125675 126529])
                    ("" code nil (reparse-symbol indented_block_body) [126543 126606])
                    ("where" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [126621 126625])
                            ("cond" variable nil (reparse-symbol function_parameters) [126627 126631])
                            ("other" variable nil (reparse-symbol function_parameters) [126633 126638])
                            ("inplace" variable nil (reparse-symbol function_parameters) [126647 126654])
                            ("axis" variable nil (reparse-symbol function_parameters) [126662 126666])
                            ("level" variable nil (reparse-symbol function_parameters) [126673 126678])
                            ("try_cast" variable nil (reparse-symbol function_parameters) [126699 126707])
                            ("raise_on_error" variable nil (reparse-symbol function_parameters) [126715 126729]))                          )
                        (reparse-symbol indented_block_body) [126611 131800])
                    ("" code nil (reparse-symbol indented_block_body) [131814 131878])
                    ("mask" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131892 131896])
                            ("cond" variable nil (reparse-symbol function_parameters) [131898 131902])
                            ("other" variable nil (reparse-symbol function_parameters) [131904 131909])
                            ("inplace" variable nil (reparse-symbol function_parameters) [131918 131925])
                            ("axis" variable nil (reparse-symbol function_parameters) [131933 131937])
                            ("level" variable nil (reparse-symbol function_parameters) [131944 131949])
                            ("try_cast" variable nil (reparse-symbol function_parameters) [131969 131977])
                            ("raise_on_error" variable nil (reparse-symbol function_parameters) [131985 131999]))                          )
                        (reparse-symbol indented_block_body) [131883 132156])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [132161 132908])
                    ("" code nil (reparse-symbol indented_block_body) [132922 132966])
                    ("shift" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132981 132985])
                            ("periods" variable nil (reparse-symbol function_parameters) [132987 132994])
                            ("freq" variable nil (reparse-symbol function_parameters) [132998 133002])
                            ("axis" variable nil (reparse-symbol function_parameters) [133009 133013])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [133017 133025]))                          )
                        (reparse-symbol indented_block_body) [132971 133386])
                    ("slice_shift" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133407 133411])
                            ("periods" variable nil (reparse-symbol function_parameters) [133413 133420])
                            ("axis" variable nil (reparse-symbol function_parameters) [133424 133428]))                          
                        :documentation "
        Equivalent to `shift` without copying data. The shifted data will
        not include the dropped periods and the shifted axis will be smaller
        than the original.

        Parameters
        ----------
        periods : int
            Number of periods to move, can be positive or negative

        Notes
        -----
        While the `slice_shift` is faster than `shift`, you may pay for it
        later during alignment.

        Returns
        -------
        shifted : same type as caller
        ")
                        (reparse-symbol indented_block_body) [133391 134424])
                    ("tshift" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134440 134444])
                            ("periods" variable nil (reparse-symbol function_parameters) [134446 134453])
                            ("freq" variable nil (reparse-symbol function_parameters) [134457 134461])
                            ("axis" variable nil (reparse-symbol function_parameters) [134468 134472])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [134476 134484]))                          
                        :documentation "
        Shift the time index, using the index's frequency if available

        Parameters
        ----------
        periods : int
            Number of periods to move, can be positive or negative
        freq : DateOffset, timedelta, or time rule string, default None
            Increment to use from datetools module or time rule (e.g. 'EOM')
        axis : int or basestring
            Corresponds to the axis that contains the Index

        Notes
        -----
        If freq is not specified then tries to use the freq or inferred_freq
        attributes of the index. If neither of those attributes exist, a
        ValueError is thrown

        Returns
        -------
        shifted : NDFrame
        ")
                        (reparse-symbol indented_block_body) [134429 136483])
                    ("truncate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136501 136505])
                            ("before" variable nil (reparse-symbol function_parameters) [136507 136513])
                            ("after" variable nil (reparse-symbol function_parameters) [136520 136525])
                            ("axis" variable nil (reparse-symbol function_parameters) [136532 136536])
                            ("copy" variable nil (reparse-symbol function_parameters) [136543 136547]))                          
                        :documentation "Truncates a sorted NDFrame before and/or after some particular
        dates.

        Parameters
        ----------
        before : date
            Truncate before date
        after : date
            Truncate after date
        axis : the truncation axis, defaults to the stat axis
        copy : boolean, default is True,
            return a copy of the truncated section

        Returns
        -------
        truncated : type of caller
        ")
                        (reparse-symbol indented_block_body) [136488 137988])
                    ("tz_convert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138008 138012])
                            ("tz" variable nil (reparse-symbol function_parameters) [138014 138016])
                            ("axis" variable nil (reparse-symbol function_parameters) [138018 138022])
                            ("level" variable nil (reparse-symbol function_parameters) [138026 138031])
                            ("copy" variable nil (reparse-symbol function_parameters) [138038 138042]))                          
                        :documentation "
        Convert tz-aware axis to target time zone.

        Parameters
        ----------
        tz : string or pytz.timezone object
        axis : the axis to convert
        level : int, str, default None
            If axis ia a MultiIndex, convert a specific level. Otherwise
            must be None
        copy : boolean, default True
            Also make a copy of the underlying data

        Returns
        -------

        Raises
        ------
        TypeError
            If the axis is tz-naive.
        ")
                        (reparse-symbol indented_block_body) [137993 139727])
                    ("" code nil (reparse-symbol indented_block_body) [139748 139862])
                    ("tz_localize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139883 139887])
                            ("tz" variable nil (reparse-symbol function_parameters) [139889 139891])
                            ("axis" variable nil (reparse-symbol function_parameters) [139893 139897])
                            ("level" variable nil (reparse-symbol function_parameters) [139901 139906])
                            ("copy" variable nil (reparse-symbol function_parameters) [139913 139917])
                            ("ambiguous" variable nil (reparse-symbol function_parameters) [139944 139953]))                          
                        :documentation "
        Localize tz-naive TimeSeries to target time zone

        Parameters
        ----------
        tz : string or pytz.timezone object
        axis : the axis to localize
        level : int, str, default None
            If axis ia a MultiIndex, localize a specific level. Otherwise
            must be None
        copy : boolean, default True
            Also make a copy of the underlying data
        ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'
            - 'infer' will attempt to infer fall dst-transition hours based on order
            - bool-ndarray where True signifies a DST time, False designates
              a non-DST time (note that this flag is only applicable for ambiguous times)
            - 'NaT' will return NaT where there are ambiguous times
            - 'raise' will raise an AmbiguousTimeError if there are ambiguous times
        infer_dst : boolean, default False (DEPRECATED)
            Attempt to infer fall dst-transition hours based on order

        Returns
        -------

        Raises
        ------
        TypeError
            If the TimeSeries is tz-aware and tz is not None.
        ")
                        (reparse-symbol indented_block_body) [139867 142329])
                    ("abs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142440 142444]))                          
                        :documentation "
        Return an object with absolute value taken. Only applicable to objects
        that are all numeric

        Returns
        -------
        abs: type of caller
        ")
                        (reparse-symbol indented_block_body) [142432 142668])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [142673 145132])
                    ("" code nil (reparse-symbol indented_block_body) [145147 145194])
                    ("describe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145212 145216])
                            ("percentile_width" variable nil (reparse-symbol function_parameters) [145218 145234])
                            ("percentiles" variable nil (reparse-symbol function_parameters) [145241 145252])
                            ("include" variable nil (reparse-symbol function_parameters) [145259 145266])
                            ("exclude" variable nil (reparse-symbol function_parameters) [145273 145280]))                          )
                        (reparse-symbol indented_block_body) [145199 149750])
                    ("_shared_docs" variable nil (reparse-symbol indented_block_body) [149755 150632])
                    ("" code nil (reparse-symbol indented_block_body) [150647 150696])
                    ("pct_change" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150716 150720])
                            ("periods" variable nil (reparse-symbol function_parameters) [150722 150729])
                            ("fill_method" variable nil (reparse-symbol function_parameters) [150733 150744])
                            ("limit" variable nil (reparse-symbol function_parameters) [150752 150757])
                            ("freq" variable nil (reparse-symbol function_parameters) [150764 150768])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [150794 150802]))                          )
                        (reparse-symbol indented_block_body) [150701 151362])
                    ("_agg_by_level" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151385 151389])
                            ("name" variable nil (reparse-symbol function_parameters) [151391 151395])
                            ("axis" variable nil (reparse-symbol function_parameters) [151397 151401])
                            ("level" variable nil (reparse-symbol function_parameters) [151405 151410])
                            ("skipna" variable nil (reparse-symbol function_parameters) [151414 151420])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [151427 151435]))                          )
                        (reparse-symbol indented_block_body) [151367 151791])
                    ("_add_numeric_operations" function
                       (:documentation " add the operations to the cls; evaluate the doc strings again "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [151841 151844]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [151796 162163]))                  
                :type "class")
                nil [2347 162163])
            ("for" code nil nil [162188 162286]))          
      :file "generic.py"
      :pointmax 162286
      :fsize 162285
      :lastmodtime '(21949 21283 986394 994000)
      :unmatched-syntax '((RETURN 99253 . 99259) (IF 99265 . 99267) (ELSE 99276 . 99280) (NAME 98809 . 98812) (IF 98820 . 98822) (ELSE 98831 . 98835) (NAME 89846 . 89852) (IF 89860 . 89862) (ELSE 89871 . 89875) (NAME 19165 . 19171) (IF 19179 . 19181) (ELSE 19190 . 19194) (NAME 1881 . 1887) (IF 1895 . 1897) (ELSE 1906 . 1910) (NAME 19165 . 19171) (IF 19179 . 19181) (ELSE 19190 . 19194) (NAME 1881 . 1887) (IF 1895 . 1897) (ELSE 1906 . 1910) (NAME 19165 . 19171) (IF 19179 . 19181) (ELSE 19190 . 19194) (NAME 1881 . 1887) (IF 1895 . 1897) (ELSE 1906 . 1910) (NAME 19165 . 19171) (IF 19179 . 19181) (ELSE 19190 . 19194) (NAME 1881 . 1887) (IF 1895 . 1897) (ELSE 1906 . 1910) (RETURN 99253 . 99259) (IF 99265 . 99267) (ELSE 99276 . 99280) (NAME 98809 . 98812) (IF 98820 . 98822) (ELSE 98831 . 98835) (NAME 89846 . 89852) (IF 89860 . 89862) (ELSE 89871 . 89875) (NAME 19165 . 19171) (IF 19179 . 19181) (ELSE 19190 . 19194) (NAME 1881 . 1887) (IF 1895 . 1897) (ELSE 1906 . 1910))))
  :file "!home!amit!Documents!git-cloned!pandas!pandas!core!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
